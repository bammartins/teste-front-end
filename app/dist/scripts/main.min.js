(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormController = function () {
    function FormController() {
        _classCallCheck(this, FormController);
    }

    _createClass(FormController, [{
        key: 'animateForm',
        value: function animateForm() {
            var fields = document.querySelectorAll('.material-input');

            var _loop = function _loop(index) {
                fields[index].addEventListener('change', function () {
                    if (fields[index].value != "") {
                        fields[index].classList.add('has-value');
                    } else {
                        fields[index].classList.remove('has-value');
                    }
                });

                if (fields[index].value != "") {
                    fields[index].classList.add('has-value');
                } else {
                    fields[index].classList.remove('has-value');
                }
            };

            for (var index = 0; index < fields.length; index++) {
                _loop(index);
            }
        }
    }, {
        key: 'loadButtonAnimate',
        value: function loadButtonAnimate() {
            var urlParam = window.location;
            var parameter = urlParam.search.substring(1);
            var button = null;
            if (parameter == "") {
                button = document.getElementById('send');
            } else {
                button = document.getElementById('alter');
            }
            var loader = document.getElementById('loader');
            var value = button.getAttribute('value');
            button.addEventListener('click', function (e) {
                button.setAttribute('value', '');
                loader.style.display = "block";
                setTimeout(function () {
                    button.setAttribute('value', value);
                    loader.style.display = "none";
                    window.location.href = "/listuser.html";
                }, 1500);
            });
        }
    }]);

    return FormController;
}();

module.exports = FormController;

},{}],2:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UserController = require('./UserController.js');

var _UserController2 = _interopRequireDefault(_UserController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventHandler = function () {
    function EventHandler() {
        _classCallCheck(this, EventHandler);

        this.user = new _UserController2.default();
        this.nameField = document.getElementById('name');
        this.emailField = document.getElementById('email');
        this.cpfField = document.getElementById('cpf');
        this.phoneField = document.getElementById('phone');
    }

    _createClass(EventHandler, [{
        key: 'buttonClick',
        value: function buttonClick() {
            var _this = this;

            var urlParam = window.location;
            var parameter = urlParam.search.substring(1);
            var button = document.getElementById('send');
            if (button != null && parameter == "") {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    if (button.classList.value.indexOf('disabled') == -1) {
                        _this.user.set(_this.nameField.value, _this.emailField.value, _this.cpfField.value, _this.phoneField.value);
                    }
                });
            }
        }
    }, {
        key: 'deleteClick',
        value: function deleteClick() {
            var _this2 = this;

            var deleteBtn = document.querySelector('.list-user');
            var currentEl = null;
            var listItem = null;
            if (deleteBtn != null) {
                deleteBtn.addEventListener('click', function (e) {
                    e.preventDefault();
                    if (e.target && e.target.classList.contains('delete')) {
                        currentEl = e.target;
                        listItem = document.getElementById(currentEl.getAttribute('data-id')).remove();
                        _this2.user.delete(currentEl.getAttribute('data-id'));
                    }
                });
            }
        }
    }, {
        key: 'editClick',
        value: function editClick() {
            var editBtn = document.querySelector('.list-user');
            var currentEl = null;

            if (editBtn != null) {
                editBtn.addEventListener('click', function (e) {
                    e.preventDefault();
                    if (e.target && e.target.classList.contains('edit')) {
                        currentEl = e.target;
                        document.location.href = '/?editUser=' + currentEl.getAttribute('data-id');
                    }
                });
            }
        }
    }, {
        key: 'alterClick',
        value: function alterClick() {
            var _this3 = this;

            var saveBtn = document.querySelector('form');
            var urlParam = window.location;
            var parameter = urlParam.search.substring(1);
            var id = parameter.split('=');

            if (saveBtn != null) {
                saveBtn.addEventListener('click', function (e) {
                    e.preventDefault();
                    if (e.target && e.target.classList.contains('alter')) {
                        _this3.user.edit(id[1], _this3.nameField.value, _this3.emailField.value, _this3.cpfField.value, _this3.phoneField.value);
                    }
                });
            }
        }
    }, {
        key: 'maskInputs',
        value: function maskInputs() {
            var cpfField = document.getElementById('cpf');
            var phoneField = document.getElementById('phone');

            if (phoneField != null && cpfField != null) {
                phoneField.addEventListener('keypress', function (e) {
                    switch (phoneField.value.length) {
                        case 1:
                            phoneField.value = "(" + phoneField.value;
                            break;
                        case 3:
                            phoneField.value = phoneField.value + ") ";
                            break;
                        case 9:
                            phoneField.value = phoneField.value + "-";
                            break;
                        case 14:
                            phoneField.value = phoneField.value.substring(0, 9) + phoneField.value.charAt(10) + '-' + phoneField.value.substring(11);
                            break;
                    }

                    if (e.charCode > 47 && e.charCode < 58) {
                        return true;
                    } else {
                        return false;
                    }
                });

                cpfField.addEventListener('keypress', function (e) {
                    switch (cpfField.value.length) {
                        case 3:
                            cpfField.value = cpfField.value + ".";
                            break;
                        case 7:
                            cpfField.value = cpfField.value + ".";
                            break;
                        case 11:
                            cpfField.value = cpfField.value + "-";
                            break;
                        default:
                            break;
                    }
                });
            }
        }
    }]);

    return EventHandler;
}();

module.exports = EventHandler;

},{"./UserController.js":4}],3:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _CpfValidate = require('../helper/CpfValidate.js');

var _CpfValidate2 = _interopRequireDefault(_CpfValidate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormController = function () {
    function FormController() {
        _classCallCheck(this, FormController);

        this.nameField = document.getElementById('name');
        this.emailField = document.getElementById('email');
        this.cpfField = document.getElementById('cpf');
        this.phoneField = document.getElementById('phone');
        this.errorMessage = null;
        this.errorCount = 0;
    }

    _createClass(FormController, [{
        key: 'validateFillFields',
        value: function validateFillFields() {
            var inputs = document.querySelectorAll('.material-input');
            var count = 0;

            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].value.length > 0) {
                    count++;
                }
            }

            if (count == inputs.length) {
                return true;
            } else {
                return false;
            }
        }
    }, {
        key: 'validateFields',
        value: function validateFields() {
            var mailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
            var cpfTest = new _CpfValidate2.default();
            if (this.nameField.value.length < 3) {
                this.nameField.classList.add('error');
                this.errorMessage = "Campo deve conter 3 caracteres ou mais";
                document.getElementById('name-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                this.nameField.classList.remove('error');
                this.errorCount--;
                document.getElementById('name-error').innerText = "";
            }
            if (cpfTest.validate(this.cpfField.value) == false) {
                this.cpfField.classList.add('error');
                this.errorMessage = "Este CPF não é válido";
                document.getElementById('cpf-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                this.cpfField.classList.remove('error');
                this.errorCount--;
                document.getElementById('cpf-error').innerText = "";
            }
            if (!this.emailField.value.match(mailRegex)) {
                this.emailField.classList.add('error');
                this.errorMessage = "Este Email não é válido";
                document.getElementById('email-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                this.emailField.classList.remove('error');
                this.errorCount--;
                document.getElementById('email-error').innerText = "";
            }
            if (this.phoneField.value == "") {
                this.phoneField.classList.add('error');
                this.errorMessage = "Este Telefone não é válido";
                document.getElementById('phone-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                this.phoneField.classList.remove('error');
                this.errorCount--;
                document.getElementById('phone-error').innerText = "";
            }

            if (this.errorCount > 0) {
                return false;
            } else {
                return true;
            }
        }
    }, {
        key: 'editForm',
        value: function editForm() {
            var urlParam = window.location;
            var parameter = urlParam.search.substring(1);
            var id = null;
            var button = document.getElementById('send');
            if (parameter != "") {
                var userList = JSON.parse(localStorage.getItem('users'));
                id = parameter.split('=');

                for (var i = 0; i < userList.length; i++) {
                    if (parseInt(id[1]) == userList[i].id) {
                        this.nameField.value = userList[i].name;
                        this.emailField.value = userList[i].email;
                        this.cpfField.value = userList[i].cpf;
                        this.phoneField.value = userList[i].phone;

                        this.nameField.classList.add('has-value');
                        this.emailField.classList.add('has-value');
                        this.cpfField.classList.add('has-value');
                        this.phoneField.classList.add('has-value');

                        button.setAttribute("value", "Alterar");
                        button.classList.add('alter');
                        button.setAttribute('id', 'alter');
                    }
                }
            }
        }
    }]);

    return FormController;
}();

module.exports = FormController;

},{"../helper/CpfValidate.js":5}],4:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FormController = require('./FormController.js');

var _FormController2 = _interopRequireDefault(_FormController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UserController = function () {
    function UserController() {
        _classCallCheck(this, UserController);

        this.id;
        this.name;
        this.email;
        this.cpf;
        this.phone;
    }

    _createClass(UserController, [{
        key: 'set',
        value: function set(name, email, cpf, phone) {
            var arrUser = [];
            var newUser = {};
            var id = 1;
            var validateFields = new _FormController2.default();

            if (localStorage.getItem('users') != null) {
                arrUser = JSON.parse(localStorage.getItem('users'));
            }
            if (localStorage.getItem("lastId") != null) {
                id = parseInt(localStorage.getItem("lastId")) + 1;
            }

            this.id = id++;
            this.name = name;
            this.email = email;
            this.cpf = cpf;
            this.phone = phone;

            newUser = {
                "id": this.id,
                "name": this.name,
                "cpf": this.cpf,
                "phone": this.phone,
                "email": this.email
            };

            if (validateFields.validateFields()) {
                arrUser.push(newUser);
                localStorage.setItem('users', JSON.stringify(arrUser));
                localStorage.setItem('lastId', this.id);
            }
        }
    }, {
        key: 'get',
        value: function get() {
            var template = "";
            var userList = JSON.parse(localStorage.getItem('users'));
            var tempUserList = JSON.parse(localStorage.getItem('tempUsers'));
            var userListEl = document.getElementById('list-user');
            if (userListEl != null && userList != null) {
                userListEl.innerHTML = '';

                userList.forEach(function (el) {
                    var listItem = document.createElement('li');
                    listItem.classList.add('list-user-item');
                    listItem.setAttribute('id', el.id);
                    template = '<div class="user-name-content">\n                                        <span class="list-text" id="user-name">' + el.name + ' - ' + el.cpf + '</span>\n                                    </div>\n                                    <div class="user-full-content">\n                                        <div class="user-info">\n                                            <span class="list-text" id="user-email"><strong>Email:</strong> ' + el.email + '</span>\n                                            <span class="list-text" id="user-phone"><strong>Tel:</strong> ' + el.phone + '</span>\n                                        </div>\n                                        <div class="user-action">\n                                            <button type="button" class="action-btn edit icon-pencil" data-id=' + el.id + ' id="edit"></button>\n                                            <button type="button" class="action-btn delete icon-cancel-circle" data-id=' + el.id + '></button>\n                                        </div>\n                                    </div>';
                    listItem.innerHTML = template;
                    userListEl.appendChild(listItem);
                });
            }
            if (userListEl != null && tempUserList != null && userList != null) {
                if (userList == null || userList.length == 0) {
                    userListEl.innerHTML = '';
                    tempUserList.forEach(function (el) {
                        var listItem = document.createElement('li');
                        listItem.classList.add('list-user-item');
                        listItem.setAttribute('id', el.id);
                        template = '<div class="user-name-content">\n                                            <span class="list-text" id="user-name">' + el.name + ' - ' + el.cpf + '</span>\n                                        </div>\n                                        <div class="user-full-content">\n                                            <span class="list-text" id="user-email">Email: ' + el.email + '</span>\n                                            <span class="list-text" id="user-phone">Tel: ' + el.phone + '</span>\n                                        </div>';
                        listItem.innerHTML = template;
                        userListEl.appendChild(listItem);
                    });
                }
            }
        }
    }, {
        key: 'promiseGet',
        value: function promiseGet() {
            var userList = JSON.parse(localStorage.getItem('users'));
            var url = "https://private-21e8de-rafaellucio.apiary-mock.com/users";

            if (userList == null) {
                fetch(url, { headers: { "Content-Type": "application/json; charset=utf-8" } }).then(function (res) {
                    return res.json();
                }).then(function (response) {
                    localStorage.setItem('tempUsers', JSON.stringify(response));
                }).catch(function (err) {
                    console.log("sorry, there are no results for your search");
                });
            }
        }
    }, {
        key: 'delete',
        value: function _delete(itemId) {
            var userList = JSON.parse(localStorage.getItem('users'));
            for (var i = 0; i < userList.length; i++) {
                if (parseInt(itemId) == userList[i].id) {
                    userList.splice(i, 1);
                }
            }
            localStorage.setItem('users', JSON.stringify(userList));
        }
    }, {
        key: 'edit',
        value: function edit(itemId, name, email, cpf, phone) {
            var userList = JSON.parse(localStorage.getItem('users'));
            for (var i = 0; i < userList.length; i++) {
                if (parseInt(itemId) == userList[i].id) {
                    userList[i] = {
                        "id": userList[i].id,
                        "name": name,
                        "cpf": cpf,
                        "phone": phone,
                        "email": email
                    };
                }
            }

            localStorage.setItem('users', JSON.stringify(userList));
        }
    }]);

    return UserController;
}();

module.exports = UserController;

},{"./FormController.js":3}],5:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Created by Tome Vilela
// tome.vilela@gmail.com
var ValidateCpf = function () {
    function ValidateCpf() {
        _classCallCheck(this, ValidateCpf);
    }

    _createClass(ValidateCpf, [{
        key: 'validate',
        value: function validate(cpf) {
            var sum = 0;
            var remainder = void 0;

            cpf = cpf.replace('.', '').replace('.', '').replace('-', '').trim();

            var allEqual = true;
            for (var i = 0; i < cpf.length - 1; i++) {
                if (cpf[i] != cpf[i + 1]) allEqual = false;
            }
            if (allEqual) return false;

            for (var i = 1; i <= 9; i++) {
                sum = sum + parseInt(cpf.substring(i - 1, i)) * (11 - i);
            }remainder = sum * 10 % 11;

            if (remainder == 10 || remainder == 11) remainder = 0;
            if (remainder != parseInt(cpf.substring(9, 10))) return false;

            sum = 0;
            for (var i = 1; i <= 10; i++) {
                sum = sum + parseInt(cpf.substring(i - 1, i)) * (12 - i);
            }remainder = sum * 10 % 11;

            if (remainder == 10 || remainder == 11) remainder = 0;
            if (remainder != parseInt(cpf.substring(10, 11))) return false;

            return true;
        }
    }]);

    return ValidateCpf;
}();

module.exports = ValidateCpf;

},{}],6:[function(require,module,exports){
"use strict";

var _UserController = require("./controller/UserController.js");

var _UserController2 = _interopRequireDefault(_UserController);

var _EventController = require("./controller/EventController.js");

var _EventController2 = _interopRequireDefault(_EventController);

var _FormController = require("./controller/FormController.js");

var _FormController2 = _interopRequireDefault(_FormController);

var _FormAnimation = require("./components/FormAnimation.js");

var _FormAnimation2 = _interopRequireDefault(_FormAnimation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

document.addEventListener("DOMContentLoaded", function () {
    init();
});

var init = function init() {
    var form = new _FormAnimation2.default();
    var eventHandler = new _EventController2.default();
    var formFill = new _FormController2.default();
    var user = new _UserController2.default();

    var urlParam = window.location;
    var parameter = urlParam.search.substring(1);

    var inputs = document.querySelectorAll('.material-input');
    var button = document.getElementById('send');

    form.animateForm();
    eventHandler.deleteClick();
    eventHandler.editClick();
    eventHandler.buttonClick();
    eventHandler.alterClick();
    eventHandler.maskInputs();
    formFill.editForm();

    for (var i = 0; i < inputs.length; i++) {
        inputs[i].addEventListener("blur", function () {
            if (formFill.validateFillFields()) {
                button.classList.remove('disabled');
                if (formFill.validateFields()) {
                    form.loadButtonAnimate();
                }
            }
        });
        if (formFill.validateFillFields()) {
            button.classList.remove('disabled');
            if (formFill.validateFields()) {
                form.loadButtonAnimate();
            }
        }
    }

    user.get();
    user.promiseGet();
};

},{"./components/FormAnimation.js":1,"./controller/EventController.js":2,"./controller/FormController.js":3,"./controller/UserController.js":4}]},{},[6])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvc2NyaXB0cy9jb21wb25lbnRzL0Zvcm1BbmltYXRpb24uanMiLCJzcmMvc2NyaXB0cy9jb250cm9sbGVyL0V2ZW50Q29udHJvbGxlci5qcyIsInNyYy9zY3JpcHRzL2NvbnRyb2xsZXIvRm9ybUNvbnRyb2xsZXIuanMiLCJzcmMvc2NyaXB0cy9jb250cm9sbGVyL1VzZXJDb250cm9sbGVyLmpzIiwic3JjL3NjcmlwdHMvaGVscGVyL0NwZlZhbGlkYXRlLmpzIiwic3JjL3NjcmlwdHMvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztJQ0FNLGM7Ozs7Ozs7c0NBQ1c7QUFDVCxnQkFBSSxTQUFTLFNBQVMsZ0JBQVQsQ0FBMEIsaUJBQTFCLENBQWI7O0FBRFMsdUNBRUEsS0FGQTtBQUdMLHVCQUFPLEtBQVAsRUFBYyxnQkFBZCxDQUErQixRQUEvQixFQUF5QyxZQUFJO0FBQ3pDLHdCQUFJLE9BQU8sS0FBUCxFQUFjLEtBQWQsSUFBdUIsRUFBM0IsRUFBK0I7QUFDM0IsK0JBQU8sS0FBUCxFQUFjLFNBQWQsQ0FBd0IsR0FBeEIsQ0FBNEIsV0FBNUI7QUFDSCxxQkFGRCxNQUVPO0FBQ0gsK0JBQU8sS0FBUCxFQUFjLFNBQWQsQ0FBd0IsTUFBeEIsQ0FBK0IsV0FBL0I7QUFDSDtBQUNKLGlCQU5EOztBQVFBLG9CQUFJLE9BQU8sS0FBUCxFQUFjLEtBQWQsSUFBdUIsRUFBM0IsRUFBOEI7QUFDMUIsMkJBQU8sS0FBUCxFQUFjLFNBQWQsQ0FBd0IsR0FBeEIsQ0FBNEIsV0FBNUI7QUFDSCxpQkFGRCxNQUVLO0FBQ0QsMkJBQU8sS0FBUCxFQUFjLFNBQWQsQ0FBd0IsTUFBeEIsQ0FBK0IsV0FBL0I7QUFDSDtBQWZJOztBQUVULGlCQUFLLElBQUksUUFBUSxDQUFqQixFQUFvQixRQUFRLE9BQU8sTUFBbkMsRUFBMkMsT0FBM0MsRUFBb0Q7QUFBQSxzQkFBM0Ms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QTBCLGlCQUExQixDQUFiO0FBQ0EsUUFBSSxTQUFTLFNBQVMsY0FBVCxDQUF3QixNQUF4QixDQUFiOztBQUVBLFNBQUssV0FBTDtBQUNBLGlCQUFhLFdBQWI7QUFDQSxpQkFBYSxTQUFiO0FBQ0EsaUJBQWEsV0FBYjtBQUNBLGlCQUFhLFVBQWI7QUFDQSxpQkFBYSxVQUFiO0FBQ0EsYUFBUyxRQUFUOztBQUVBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxPQUFPLE1BQTNCLEVBQW1DLEdBQW5DLEVBQXdDO0FBQ3BDLGVBQU8sQ0FBUCxFQUFVLGdCQUFWLENBQTJCLE1BQTNCLEVBQW1DLFlBQU07QUFDckMsZ0JBQUksU0FBUyxrQkFBVCxFQUFKLEVBQW1DO0FBQy9CLHVCQUFPLFNBQVAsQ0FBaUIsTUFBakIsQ0FBd0IsVUFBeEI7QUFDQSxvQkFBRyxTQUFTLGNBQVQsRUFBSCxFQUE2QjtBQUN6Qix5QkFBSyxpQkFBTDtBQUNIO0FBQ0o7QUFDSixTQVBEO0FBUUEsWUFBSSxTQUFTLGtCQUFULEVBQUosRUFBbUM7QUFDL0IsbUJBQU8sU0FBUCxDQUFpQixNQUFqQixDQUF3QixVQUF4QjtBQUNBLGdCQUFJLFNBQVMsY0FBVCxFQUFKLEVBQStCO0FBQzNCLHFCQUFLLGlCQUFMO0FBQ0g7QUFDSjtBQUNKOztBQUdELFNBQUssR0FBTDtBQUNBLFNBQUssVUFBTDtBQUNILENBeENEIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9cmV0dXJuIGV9KSgpIiwiY2xhc3MgRm9ybUNvbnRyb2xsZXJ7XHJcbiAgICBhbmltYXRlRm9ybSgpe1xyXG4gICAgICAgIGxldCBmaWVsZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubWF0ZXJpYWwtaW5wdXQnKTtcclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZmllbGRzLmxlbmd0aDsgaW5kZXgrKykgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmaWVsZHNbaW5kZXhdLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpPT57XHJcbiAgICAgICAgICAgICAgICBpZiAoZmllbGRzW2luZGV4XS52YWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdoYXMtdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzW2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChmaWVsZHNbaW5kZXhdLnZhbHVlICE9IFwiXCIpe1xyXG4gICAgICAgICAgICAgICAgZmllbGRzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdoYXMtdmFsdWUnKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBmaWVsZHNbaW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy12YWx1ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBsb2FkQnV0dG9uQW5pbWF0ZSgpe1xyXG4gICAgICAgIGxldCB1cmxQYXJhbSA9IHdpbmRvdy5sb2NhdGlvbjtcclxuICAgICAgICBsZXQgcGFyYW1ldGVyID0gdXJsUGFyYW0uc2VhcmNoLnN1YnN0cmluZygxKTtcclxuICAgICAgICBsZXQgYnV0dG9uID0gbnVsbDsgICAgICAgIFxyXG4gICAgICAgIGlmIChwYXJhbWV0ZXIgPT0gXCJcIikge1xyXG4gICAgICAgICAgICBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VuZCcpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWx0ZXInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGxvYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkZXInKTtcclxuICAgICAgICBsZXQgdmFsdWUgPSBidXR0b24uZ2V0QXR0cmlidXRlKCd2YWx1ZScpXHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgndmFsdWUnLCAnJyk7XHJcbiAgICAgICAgICAgIGxvYWRlci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgbG9hZGVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCIvbGlzdHVzZXIuaHRtbFwiXHJcbiAgICAgICAgICAgIH0sIDE1MDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1Db250cm9sbGVyOyIsImltcG9ydCB1c2VyQ29udHJvbGxlciBmcm9tICcuL1VzZXJDb250cm9sbGVyLmpzJztcclxuXHJcbmNsYXNzIEV2ZW50SGFuZGxlcntcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy51c2VyID0gbmV3IHVzZXJDb250cm9sbGVyKCk7XHJcbiAgICAgICAgdGhpcy5uYW1lRmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZScpO1xyXG4gICAgICAgIHRoaXMuZW1haWxGaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbWFpbCcpO1xyXG4gICAgICAgIHRoaXMuY3BmRmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3BmJyk7XHJcbiAgICAgICAgdGhpcy5waG9uZUZpZWxkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bob25lJyk7XHJcbiAgICB9XHJcblxyXG4gICAgYnV0dG9uQ2xpY2soKXtcclxuICAgICAgICBsZXQgdXJsUGFyYW0gPSB3aW5kb3cubG9jYXRpb247XHJcbiAgICAgICAgbGV0IHBhcmFtZXRlciA9IHVybFBhcmFtLnNlYXJjaC5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgbGV0IGJ1dHRvbiAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VuZCcpO1xyXG4gICAgICAgIGlmIChidXR0b24gIT0gbnVsbCAmJiBwYXJhbWV0ZXIgPT0gXCJcIil7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKT0+eyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5jbGFzc0xpc3QudmFsdWUuaW5kZXhPZignZGlzYWJsZWQnKSA9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXNlci5zZXQodGhpcy5uYW1lRmllbGQudmFsdWUsIHRoaXMuZW1haWxGaWVsZC52YWx1ZSwgdGhpcy5jcGZGaWVsZC52YWx1ZSwgdGhpcy5waG9uZUZpZWxkLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZUNsaWNrKCl7XHJcbiAgICAgICAgbGV0IGRlbGV0ZUJ0biAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGlzdC11c2VyJyk7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRFbCAgPSBudWxsO1xyXG4gICAgICAgIGxldCBsaXN0SXRlbSAgID0gbnVsbDtcclxuICAgICAgICBpZiAoZGVsZXRlQnRuICE9IG51bGwpe1xyXG4gICAgICAgICAgICBkZWxldGVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0ICYmIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyggJ2RlbGV0ZScgKSApIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RWwgPSBlLnRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0SXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGN1cnJlbnRFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSkucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51c2VyLmRlbGV0ZShjdXJyZW50RWwuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlZGl0Q2xpY2soKXtcclxuICAgICAgICBsZXQgZWRpdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5saXN0LXVzZXInKTtcclxuICAgICAgICBsZXQgY3VycmVudEVsID0gbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoZWRpdEJ0biAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVkaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0ICYmIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZWRpdCcpKXtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RWwgPSBlLnRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gYC8/ZWRpdFVzZXI9JHtjdXJyZW50RWwuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyl9YFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWx0ZXJDbGljaygpIHtcclxuICAgICAgICBsZXQgc2F2ZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0nKTtcclxuICAgICAgICBsZXQgdXJsUGFyYW0gPSB3aW5kb3cubG9jYXRpb247XHJcbiAgICAgICAgbGV0IHBhcmFtZXRlciA9IHVybFBhcmFtLnNlYXJjaC5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgbGV0IGlkID0gcGFyYW1ldGVyLnNwbGl0KCc9Jyk7XHJcblxyXG4gICAgICAgIGlmIChzYXZlQnRuICE9IG51bGwpIHtcclxuICAgICAgICAgICAgc2F2ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgJiYgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhbHRlcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51c2VyLmVkaXQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkWzFdLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lRmllbGQudmFsdWUsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtYWlsRmllbGQudmFsdWUsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNwZkZpZWxkLnZhbHVlLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waG9uZUZpZWxkLnZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG1hc2tJbnB1dHMoKSB7XHJcbiAgICAgICAgbGV0IGNwZkZpZWxkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NwZicpO1xyXG4gICAgICAgIGxldCBwaG9uZUZpZWxkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bob25lJyk7XHJcblxyXG4gICAgICAgIGlmIChwaG9uZUZpZWxkICE9IG51bGwgJiYgY3BmRmllbGQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBwaG9uZUZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgKGUpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChwaG9uZUZpZWxkLnZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGhvbmVGaWVsZC52YWx1ZSA9IFwiKFwiICsgcGhvbmVGaWVsZC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG9uZUZpZWxkLnZhbHVlID0gcGhvbmVGaWVsZC52YWx1ZSArIFwiKSBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG9uZUZpZWxkLnZhbHVlID0gcGhvbmVGaWVsZC52YWx1ZSArIFwiLVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhazsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob25lRmllbGQudmFsdWUgPSBwaG9uZUZpZWxkLnZhbHVlLnN1YnN0cmluZygwLCA5KSArIHBob25lRmllbGQudmFsdWUuY2hhckF0KDEwKSArICctJyArIHBob25lRmllbGQudmFsdWUuc3Vic3RyaW5nKDExKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGUuY2hhckNvZGUgPiA0NyAmJiBlLmNoYXJDb2RlIDwgNTgpIHsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7IFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjcGZGaWVsZC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGNwZkZpZWxkLnZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3BmRmllbGQudmFsdWUgPSBjcGZGaWVsZC52YWx1ZSArIFwiLlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNwZkZpZWxkLnZhbHVlID0gY3BmRmllbGQudmFsdWUgKyBcIi5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3BmRmllbGQudmFsdWUgPSBjcGZGaWVsZC52YWx1ZSArIFwiLVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhazsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEhhbmRsZXI7IiwiaW1wb3J0IGNwZlZhbGlkYXRlIGZyb20gJy4uL2hlbHBlci9DcGZWYWxpZGF0ZS5qcyc7XHJcblxyXG5jbGFzcyBGb3JtQ29udHJvbGxlcntcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5uYW1lRmllbGQgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZScpO1xyXG4gICAgICAgIHRoaXMuZW1haWxGaWVsZCAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VtYWlsJyk7XHJcbiAgICAgICAgdGhpcy5jcGZGaWVsZCAgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3BmJyk7XHJcbiAgICAgICAgdGhpcy5waG9uZUZpZWxkICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGhvbmUnKTtcclxuICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5lcnJvckNvdW50ICAgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRlRmlsbEZpZWxkcygpe1xyXG4gICAgICAgIGxldCBpbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubWF0ZXJpYWwtaW5wdXQnKTtcclxuICAgICAgICBsZXQgY291bnQgPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaW5wdXRzW2ldLnZhbHVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb3VudCA9PSBpbnB1dHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRlRmllbGRzKCl7XHJcbiAgICAgICAgY29uc3QgbWFpbFJlZ2V4ID0gL15bYS16QS1aMC05LiEjJCUmJyorLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvO1xyXG4gICAgICAgIGxldCBjcGZUZXN0ID0gbmV3IGNwZlZhbGlkYXRlKCk7XHJcbiAgICAgICAgaWYgKHRoaXMubmFtZUZpZWxkLnZhbHVlLmxlbmd0aCA8IDMpIHtcclxuICAgICAgICAgICAgdGhpcy5uYW1lRmllbGQuY2xhc3NMaXN0LmFkZCgnZXJyb3InKTtcclxuICAgICAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSBcIkNhbXBvIGRldmUgY29udGVyIDMgY2FyYWN0ZXJlcyBvdSBtYWlzXCI7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYW1lLWVycm9yJykuaW5uZXJUZXh0ID0gdGhpcy5lcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JDb3VudCsrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZUZpZWxkLmNsYXNzTGlzdC5yZW1vdmUoJ2Vycm9yJyk7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JDb3VudC0tO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZS1lcnJvcicpLmlubmVyVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjcGZUZXN0LnZhbGlkYXRlKHRoaXMuY3BmRmllbGQudmFsdWUpID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3BmRmllbGQuY2xhc3NMaXN0LmFkZCgnZXJyb3InKTtcclxuICAgICAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSBcIkVzdGUgQ1BGIG7Do28gw6kgdsOhbGlkb1wiO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3BmLWVycm9yJykuaW5uZXJUZXh0ID0gdGhpcy5lcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JDb3VudCsrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3BmRmllbGQuY2xhc3NMaXN0LnJlbW92ZSgnZXJyb3InKTtcclxuICAgICAgICAgICAgdGhpcy5lcnJvckNvdW50LS07ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjcGYtZXJyb3InKS5pbm5lclRleHQgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuZW1haWxGaWVsZC52YWx1ZS5tYXRjaChtYWlsUmVnZXgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW1haWxGaWVsZC5jbGFzc0xpc3QuYWRkKCdlcnJvcicpO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IFwiRXN0ZSBFbWFpbCBuw6NvIMOpIHbDoWxpZG9cIjtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VtYWlsLWVycm9yJykuaW5uZXJUZXh0ID0gdGhpcy5lcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JDb3VudCsrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW1haWxGaWVsZC5jbGFzc0xpc3QucmVtb3ZlKCdlcnJvcicpO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yQ291bnQtLTsgICAgICAgICAgICBcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VtYWlsLWVycm9yJykuaW5uZXJUZXh0ID0gXCJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucGhvbmVGaWVsZC52YWx1ZSA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGhvbmVGaWVsZC5jbGFzc0xpc3QuYWRkKCdlcnJvcicpO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IFwiRXN0ZSBUZWxlZm9uZSBuw6NvIMOpIHbDoWxpZG9cIjtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bob25lLWVycm9yJykuaW5uZXJUZXh0ID0gdGhpcy5lcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JDb3VudCsrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGhvbmVGaWVsZC5jbGFzc0xpc3QucmVtb3ZlKCdlcnJvcicpO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yQ291bnQtLTsgICAgICAgICAgICBcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bob25lLWVycm9yJykuaW5uZXJUZXh0ID0gXCJcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmVycm9yQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGVkaXRGb3JtKCkge1xyXG4gICAgICAgIGxldCB1cmxQYXJhbSA9IHdpbmRvdy5sb2NhdGlvbjtcclxuICAgICAgICBsZXQgcGFyYW1ldGVyID0gdXJsUGFyYW0uc2VhcmNoLnN1YnN0cmluZygxKTtcclxuICAgICAgICBsZXQgaWQgPSBudWxsO1xyXG4gICAgICAgIGxldCBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VuZCcpO1xyXG4gICAgICAgIGlmIChwYXJhbWV0ZXIgIT0gXCJcIikge1xyXG4gICAgICAgICAgICBjb25zdCB1c2VyTGlzdCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJzJykpO1xyXG4gICAgICAgICAgICBpZCA9IHBhcmFtZXRlci5zcGxpdCgnPScpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1c2VyTGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KGlkWzFdKSA9PSB1c2VyTGlzdFtpXS5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZUZpZWxkLnZhbHVlID0gdXNlckxpc3RbaV0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtYWlsRmllbGQudmFsdWUgPSB1c2VyTGlzdFtpXS5lbWFpbDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNwZkZpZWxkLnZhbHVlID0gdXNlckxpc3RbaV0uY3BmO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGhvbmVGaWVsZC52YWx1ZSA9IHVzZXJMaXN0W2ldLnBob25lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWVGaWVsZC5jbGFzc0xpc3QuYWRkKCdoYXMtdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtYWlsRmllbGQuY2xhc3NMaXN0LmFkZCgnaGFzLXZhbHVlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcGZGaWVsZC5jbGFzc0xpc3QuYWRkKCdoYXMtdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBob25lRmllbGQuY2xhc3NMaXN0LmFkZCgnaGFzLXZhbHVlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcIkFsdGVyYXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2FsdGVyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnaWQnLCAnYWx0ZXInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gIFxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1Db250cm9sbGVyOyIsImltcG9ydCB2YWxpZGF0aW9uQ29udHJvbGxlciBmcm9tIFwiLi9Gb3JtQ29udHJvbGxlci5qc1wiO1xyXG5cclxuXHJcbmNsYXNzIFVzZXJDb250cm9sbGVye1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLmlkO1xyXG4gICAgICAgIHRoaXMubmFtZTtcclxuICAgICAgICB0aGlzLmVtYWlsO1xyXG4gICAgICAgIHRoaXMuY3BmO1xyXG4gICAgICAgIHRoaXMucGhvbmU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0KG5hbWUsIGVtYWlsLCBjcGYsIHBob25lKXtcclxuICAgICAgICBsZXQgYXJyVXNlciA9IFtdO1xyXG4gICAgICAgIGxldCBuZXdVc2VyID0ge307XHJcbiAgICAgICAgbGV0IGlkID0gMTtcclxuICAgICAgICBsZXQgdmFsaWRhdGVGaWVsZHMgPSBuZXcgdmFsaWRhdGlvbkNvbnRyb2xsZXIoKTtcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJzJykgIT0gbnVsbCl7XHJcbiAgICAgICAgICAgIGFyclVzZXIgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VycycpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwibGFzdElkXCIpICE9IG51bGwpIHtcclxuICAgICAgICAgICAgaWQgPSBwYXJzZUludChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImxhc3RJZFwiKSkgKyAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pZCAgICA9IGlkKys7XHJcbiAgICAgICAgdGhpcy5uYW1lICA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5lbWFpbCA9IGVtYWlsO1xyXG4gICAgICAgIHRoaXMuY3BmICAgPSBjcGY7XHJcbiAgICAgICAgdGhpcy5waG9uZSA9IHBob25lO1xyXG5cclxuICAgICAgICBuZXdVc2VyID0ge1xyXG4gICAgICAgICAgICBcImlkXCIgICA6IHRoaXMuaWQsIFxyXG4gICAgICAgICAgICBcIm5hbWVcIiA6IHRoaXMubmFtZSwgXHJcbiAgICAgICAgICAgIFwiY3BmXCIgIDogdGhpcy5jcGYsIFxyXG4gICAgICAgICAgICBcInBob25lXCI6IHRoaXMucGhvbmUsIFxyXG4gICAgICAgICAgICBcImVtYWlsXCI6IHRoaXMuZW1haWwgXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHZhbGlkYXRlRmllbGRzLnZhbGlkYXRlRmllbGRzKCkpIHtcclxuICAgICAgICAgICAgYXJyVXNlci5wdXNoKG5ld1VzZXIpO1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcnMnLCBKU09OLnN0cmluZ2lmeShhcnJVc2VyKSk7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsYXN0SWQnLCB0aGlzLmlkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0KCl7XHJcbiAgICAgICAgbGV0IHRlbXBsYXRlID0gXCJcIjtcclxuICAgICAgICBjb25zdCB1c2VyTGlzdCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJzJykpO1xyXG4gICAgICAgIGNvbnN0IHRlbXBVc2VyTGlzdCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RlbXBVc2VycycpKTtcclxuICAgICAgICBjb25zdCB1c2VyTGlzdEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpc3QtdXNlcicpO1xyXG4gICAgICAgIGlmICh1c2VyTGlzdEVsICE9IG51bGwgJiYgdXNlckxpc3QgIT0gbnVsbCl7XHJcbiAgICAgICAgICAgIHVzZXJMaXN0RWwuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgICAgICAgICB1c2VyTGlzdC5mb3JFYWNoKChlbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgICAgICAgICAgICAgIGxpc3RJdGVtLmNsYXNzTGlzdC5hZGQoJ2xpc3QtdXNlci1pdGVtJyk7XHJcbiAgICAgICAgICAgICAgICBsaXN0SXRlbS5zZXRBdHRyaWJ1dGUoJ2lkJywgZWwuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IGA8ZGl2IGNsYXNzPVwidXNlci1uYW1lLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGlzdC10ZXh0XCIgaWQ9XCJ1c2VyLW5hbWVcIj4ke2VsLm5hbWV9IC0gJHtlbC5jcGZ9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVzZXItZnVsbC1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidXNlci1pbmZvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsaXN0LXRleHRcIiBpZD1cInVzZXItZW1haWxcIj48c3Ryb25nPkVtYWlsOjwvc3Ryb25nPiAke2VsLmVtYWlsfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxpc3QtdGV4dFwiIGlkPVwidXNlci1waG9uZVwiPjxzdHJvbmc+VGVsOjwvc3Ryb25nPiAke2VsLnBob25lfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVzZXItYWN0aW9uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJhY3Rpb24tYnRuIGVkaXQgaWNvbi1wZW5jaWxcIiBkYXRhLWlkPSR7ZWwuaWR9IGlkPVwiZWRpdFwiPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYWN0aW9uLWJ0biBkZWxldGUgaWNvbi1jYW5jZWwtY2lyY2xlXCIgZGF0YS1pZD0ke2VsLmlkfT48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gO1xyXG4gICAgICAgICAgICAgICAgbGlzdEl0ZW0uaW5uZXJIVE1MID0gdGVtcGxhdGU7XHJcbiAgICAgICAgICAgICAgICB1c2VyTGlzdEVsLmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBcclxuICAgICAgICBpZiAodXNlckxpc3RFbCAhPSBudWxsICYmIHRlbXBVc2VyTGlzdCAhPSBudWxsICYmIHVzZXJMaXN0ICE9IG51bGwpe1xyXG4gICAgICAgICAgICBpZiAodXNlckxpc3QgPT0gbnVsbCB8fCB1c2VyTGlzdC5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdXNlckxpc3RFbC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgICAgIHRlbXBVc2VyTGlzdC5mb3JFYWNoKChlbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdEl0ZW0uY2xhc3NMaXN0LmFkZCgnbGlzdC11c2VyLWl0ZW0nKTtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0SXRlbS5zZXRBdHRyaWJ1dGUoJ2lkJywgZWwuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gYDxkaXYgY2xhc3M9XCJ1c2VyLW5hbWUtY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGlzdC10ZXh0XCIgaWQ9XCJ1c2VyLW5hbWVcIj4ke2VsLm5hbWV9IC0gJHtlbC5jcGZ9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidXNlci1mdWxsLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxpc3QtdGV4dFwiIGlkPVwidXNlci1lbWFpbFwiPkVtYWlsOiAke2VsLmVtYWlsfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxpc3QtdGV4dFwiIGlkPVwidXNlci1waG9uZVwiPlRlbDogJHtlbC5waG9uZX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RJdGVtLmlubmVySFRNTCA9IHRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJMaXN0RWwuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfSkgOyAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwcm9taXNlR2V0KCl7XHJcbiAgICAgICAgY29uc3QgdXNlckxpc3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VycycpKTtcclxuICAgICAgICBjb25zdCB1cmwgPSBcImh0dHBzOi8vcHJpdmF0ZS0yMWU4ZGUtcmFmYWVsbHVjaW8uYXBpYXJ5LW1vY2suY29tL3VzZXJzXCI7XHJcblxyXG4gICAgICAgIGlmICh1c2VyTGlzdCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGZldGNoKHVybCwgeyBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiIH0gfSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0ZW1wVXNlcnMnLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZSkpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHsgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic29ycnksIHRoZXJlIGFyZSBubyByZXN1bHRzIGZvciB5b3VyIHNlYXJjaFwiKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlKGl0ZW1JZCl7XHJcbiAgICAgICAgY29uc3QgdXNlckxpc3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VycycpKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVzZXJMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmKHBhcnNlSW50KGl0ZW1JZCkgPT0gdXNlckxpc3RbaV0uaWQpe1xyXG4gICAgICAgICAgICAgICAgdXNlckxpc3Quc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICB9ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VycycsIEpTT04uc3RyaW5naWZ5KHVzZXJMaXN0KSk7XHJcbiAgICB9XHJcblxyXG4gICAgZWRpdChpdGVtSWQsIG5hbWUsIGVtYWlsLCBjcGYsIHBob25lKXtcclxuICAgICAgICBjb25zdCB1c2VyTGlzdCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJzJykpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXNlckxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHBhcnNlSW50KGl0ZW1JZCkgPT0gdXNlckxpc3RbaV0uaWQpIHtcclxuICAgICAgICAgICAgICAgIHVzZXJMaXN0W2ldID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiaWRcIjogdXNlckxpc3RbaV0uaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjcGZcIjogY3BmLFxyXG4gICAgICAgICAgICAgICAgICAgIFwicGhvbmVcIjogcGhvbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJlbWFpbFwiOiBlbWFpbCBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxyXG4gICAgICAgIH0gIFxyXG4gICAgICAgIFxyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VycycsIEpTT04uc3RyaW5naWZ5KHVzZXJMaXN0KSk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFVzZXJDb250cm9sbGVyOyIsIi8vIENyZWF0ZWQgYnkgVG9tZSBWaWxlbGFcclxuLy8gdG9tZS52aWxlbGFAZ21haWwuY29tXHJcbmNsYXNzIFZhbGlkYXRlQ3Bme1xyXG4gICAgdmFsaWRhdGUoY3BmKXtcclxuICAgICAgICBsZXQgc3VtID0gMDtcclxuICAgICAgICBsZXQgcmVtYWluZGVyO1xyXG5cclxuICAgICAgICBjcGYgPSBjcGYucmVwbGFjZSgnLicsICcnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgnLicsICcnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgnLScsICcnKVxyXG4gICAgICAgICAgICAudHJpbSgpO1xyXG5cclxuICAgICAgICBsZXQgYWxsRXF1YWwgPSB0cnVlO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3BmLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoY3BmW2ldICE9IGNwZltpICsgMV0pXHJcbiAgICAgICAgICAgICAgICBhbGxFcXVhbCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYWxsRXF1YWwpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gOTsgaSsrKVxyXG4gICAgICAgICAgICBzdW0gPSBzdW0gKyBwYXJzZUludChjcGYuc3Vic3RyaW5nKGkgLSAxLCBpKSkgKiAoMTEgLSBpKTtcclxuICAgICAgICByZW1haW5kZXIgPSAoc3VtICogMTApICUgMTE7XHJcblxyXG4gICAgICAgIGlmICgocmVtYWluZGVyID09IDEwKSB8fCAocmVtYWluZGVyID09IDExKSlcclxuICAgICAgICAgICAgcmVtYWluZGVyID0gMDtcclxuICAgICAgICBpZiAocmVtYWluZGVyICE9IHBhcnNlSW50KGNwZi5zdWJzdHJpbmcoOSwgMTApKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICBzdW0gPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IDEwOyBpKyspXHJcbiAgICAgICAgICAgIHN1bSA9IHN1bSArIHBhcnNlSW50KGNwZi5zdWJzdHJpbmcoaSAtIDEsIGkpKSAqICgxMiAtIGkpOyByZW1haW5kZXIgPSAoc3VtICogMTApICUgMTE7XHJcblxyXG4gICAgICAgIGlmICgocmVtYWluZGVyID09IDEwKSB8fCAocmVtYWluZGVyID09IDExKSlcclxuICAgICAgICAgICAgcmVtYWluZGVyID0gMDtcclxuICAgICAgICBpZiAocmVtYWluZGVyICE9IHBhcnNlSW50KGNwZi5zdWJzdHJpbmcoMTAsIDExKSkpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVmFsaWRhdGVDcGY7XHJcblxyXG4iLCJpbXBvcnQgdXNlckNvbnRyb2xsZXIgZnJvbSBcIi4vY29udHJvbGxlci9Vc2VyQ29udHJvbGxlci5qc1wiXHJcbmltcG9ydCBldmVudENvbnRyb2xsZXIgZnJvbSBcIi4vY29udHJvbGxlci9FdmVudENvbnRyb2xsZXIuanNcIlxyXG5pbXBvcnQgZm9ybUNvbnRyb2xsZXIgZnJvbSBcIi4vY29udHJvbGxlci9Gb3JtQ29udHJvbGxlci5qc1wiXHJcbmltcG9ydCBmb3JtQW5pbWF0aW9uIGZyb20gXCIuL2NvbXBvbmVudHMvRm9ybUFuaW1hdGlvbi5qc1wiXHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XHJcbiAgICBpbml0KCk7XHJcbn0pO1xyXG5cclxuY29uc3QgaW5pdCA9ICgpID0+e1xyXG4gICAgY29uc3QgZm9ybSA9IG5ldyBmb3JtQW5pbWF0aW9uKCk7XHJcbiAgICBjb25zdCBldmVudEhhbmRsZXIgPSBuZXcgZXZlbnRDb250cm9sbGVyKCk7XHJcbiAgICBjb25zdCBmb3JtRmlsbCA9IG5ldyBmb3JtQ29udHJvbGxlcigpO1xyXG4gICAgY29uc3QgdXNlciA9IG5ldyB1c2VyQ29udHJvbGxlcigpO1xyXG5cclxuICAgIGxldCB1cmxQYXJhbSA9IHdpbmRvdy5sb2NhdGlvbjtcclxuICAgIGxldCBwYXJhbWV0ZXIgPSB1cmxQYXJhbS5zZWFyY2guc3Vic3RyaW5nKDEpO1xyXG4gICAgXHJcbiAgICBsZXQgaW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1hdGVyaWFsLWlucHV0Jyk7XHJcbiAgICBsZXQgYnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlbmQnKTtcclxuICAgIFxyXG4gICAgZm9ybS5hbmltYXRlRm9ybSgpOyAgICAgICAgICBcclxuICAgIGV2ZW50SGFuZGxlci5kZWxldGVDbGljaygpO1xyXG4gICAgZXZlbnRIYW5kbGVyLmVkaXRDbGljaygpO1xyXG4gICAgZXZlbnRIYW5kbGVyLmJ1dHRvbkNsaWNrKCk7XHJcbiAgICBldmVudEhhbmRsZXIuYWx0ZXJDbGljaygpO1xyXG4gICAgZXZlbnRIYW5kbGVyLm1hc2tJbnB1dHMoKTtcclxuICAgIGZvcm1GaWxsLmVkaXRGb3JtKCk7XHJcbiAgICBcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaW5wdXRzW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGZvcm1GaWxsLnZhbGlkYXRlRmlsbEZpZWxkcygpKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgIGlmKGZvcm1GaWxsLnZhbGlkYXRlRmllbGRzKCkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm0ubG9hZEJ1dHRvbkFuaW1hdGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9KVxyXG4gICAgICAgIGlmIChmb3JtRmlsbC52YWxpZGF0ZUZpbGxGaWVsZHMoKSkge1xyXG4gICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgaWYgKGZvcm1GaWxsLnZhbGlkYXRlRmllbGRzKCkpIHtcclxuICAgICAgICAgICAgICAgIGZvcm0ubG9hZEJ1dHRvbkFuaW1hdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gXHJcbiAgICB9ICAgXHJcbiAgICBcclxuXHJcbiAgICB1c2VyLmdldCgpO1xyXG4gICAgdXNlci5wcm9taXNlR2V0KCk7XHJcbn0iXSwicHJlRXhpc3RpbmdDb21tZW50IjoiLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSnpjbU12YzJOeWFYQjBjeTlqYjIxd2IyNWxiblJ6TDBadmNtMUJibWx0WVhScGIyNHVhbk1pTENKemNtTXZjMk55YVhCMGN5OWpiMjUwY205c2JHVnlMMFYyWlc1MFEyOXVkSEp2Ykd4bGNpNXFjeUlzSW5OeVl5OXpZM0pwY0hSekwyTnZiblJ5YjJ4c1pYSXZSbTl5YlVOdmJuUnliMnhzWlhJdWFuTWlMQ0p6Y21NdmMyTnlhWEIwY3k5amIyNTBjbTlzYkdWeUwxVnpaWEpEYjI1MGNtOXNiR1Z5TG1weklpd2ljM0pqTDNOamNtbHdkSE12YUdWc2NHVnlMME53WmxaaGJHbGtZWFJsTG1weklpd2ljM0pqTDNOamNtbHdkSE12YldGcGJpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVRzN096czdPenRKUTBGTkxHTTdPenM3T3pzN2MwTkJRMWM3UVVGRFZDeG5Ra0ZCU1N4VFFVRlRMRk5CUVZNc1owSkJRVlFzUTBGQk1FSXNhVUpCUVRGQ0xFTkJRV0k3TzBGQlJGTXNkVU5CUlVFc1MwRkdRVHRCUVVkTUxIVkNRVUZQTEV0QlFWQXNSVUZCWXl4blFrRkJaQ3hEUVVFclFpeFJRVUV2UWl4RlFVRjVReXhaUVVGSk8wRkJRM3BETEhkQ1FVRkpMRTlCUVU4c1MwRkJVQ3hGUVVGakxFdEJRV1FzU1VGQmRVSXNSVUZCTTBJc1JVRkJLMEk3UVVGRE0wSXNLMEpCUVU4c1MwRkJVQ3hGUVVGakxGTkJRV1FzUTBGQmQwSXNSMEZCZUVJc1EwRkJORUlzVjBGQk5VSTdRVUZEU0N4eFFrRkdSQ3hOUVVWUE8wRkJRMGdzSzBKQlFVOHNTMEZCVUN4RlFVRmpMRk5CUVdRc1EwRkJkMElzVFVGQmVFSXNRMEZCSzBJc1YwRkJMMEk3UVVGRFNEdEJRVU5LTEdsQ1FVNUVPenRCUVZGQkxHOUNRVUZKTEU5QlFVOHNTMEZCVUN4RlFVRmpMRXRCUVdRc1NVRkJkVUlzUlVGQk0wSXNSVUZCT0VJN1FVRkRNVUlzTWtKQlFVOHNTMEZCVUN4RlFVRmpMRk5CUVdRc1EwRkJkMElzUjBGQmVFSXNRMEZCTkVJc1YwRkJOVUk3UVVGRFNDeHBRa0ZHUkN4TlFVVkxPMEZCUTBRc01rSkJRVThzUzBGQlVDeEZRVUZqTEZOQlFXUXNRMEZCZDBJc1RVRkJlRUlzUTBGQkswSXNWMEZCTDBJN1FVRkRTRHRCUVdaSk96dEJRVVZVTEdsQ1FVRkxMRWxCUVVrc1VVRkJVU3hEUVVGcVFpeEZRVUZ2UWl4UlFVRlJMRTlCUVU4c1RVRkJia01zUlVGQk1rTXNUMEZCTTBNc1JVRkJiMFE3UVVGQlFTeHpRa0ZCTTBNc1MwRkJNa003UVVGamJrUTdRVUZEU2pzN096UkRRVVZyUWp0QlFVTm1MR2RDUVVGSkxGZEJRVmNzVDBGQlR5eFJRVUYwUWp0QlFVTkJMR2RDUVVGSkxGbEJRVmtzVTBGQlV5eE5RVUZVTEVOQlFXZENMRk5CUVdoQ0xFTkJRVEJDTEVOQlFURkNMRU5CUVdoQ08wRkJRMEVzWjBKQlFVa3NVMEZCVXl4SlFVRmlPMEZCUTBFc1owSkJRVWtzWVVGQllTeEZRVUZxUWl4RlFVRnhRanRCUVVOcVFpeDVRa0ZCVXl4VFFVRlRMR05CUVZRc1EwRkJkMElzVFVGQmVFSXNRMEZCVkR0QlFVTklMR0ZCUmtRc1RVRkZTenRCUVVORUxIbENRVUZUTEZOQlFWTXNZMEZCVkN4RFFVRjNRaXhQUVVGNFFpeERRVUZVTzBGQlEwZzdRVUZEUkN4blFrRkJTU3hUUVVGVExGTkJRVk1zWTBGQlZDeERRVUYzUWl4UlFVRjRRaXhEUVVGaU8wRkJRMEVzWjBKQlFVa3NVVUZCVVN4UFFVRlBMRmxCUVZBc1EwRkJiMElzVDBGQmNFSXNRMEZCV2p0QlFVTkJMRzFDUVVGUExHZENRVUZRTEVOQlFYZENMRTlCUVhoQ0xFVkJRV2xETEZWQlFVTXNRMEZCUkN4RlFVRlBPMEZCUTNCRExIVkNRVUZQTEZsQlFWQXNRMEZCYjBJc1QwRkJjRUlzUlVGQk5rSXNSVUZCTjBJN1FVRkRRU3gxUWtGQlR5eExRVUZRTEVOQlFXRXNUMEZCWWl4SFFVRjFRaXhQUVVGMlFqdEJRVU5CTERKQ1FVRlhMRmxCUVUwN1FVRkRZaXd5UWtGQlR5eFpRVUZRTEVOQlFXOUNMRTlCUVhCQ0xFVkJRVFpDTEV0QlFUZENPMEZCUTBFc01rSkJRVThzUzBGQlVDeERRVUZoTEU5QlFXSXNSMEZCZFVJc1RVRkJka0k3UVVGRFFTd3lRa0ZCVHl4UlFVRlFMRU5CUVdkQ0xFbEJRV2hDTEVkQlFYVkNMR2RDUVVGMlFqdEJRVU5JTEdsQ1FVcEVMRVZCU1Vjc1NVRktTRHRCUVV0SUxHRkJVa1E3UVVGVFNEczdPenM3TzBGQlIwd3NUMEZCVHl4UFFVRlFMRWRCUVdsQ0xHTkJRV3BDT3pzN096czdPMEZETTBOQk96czdPenM3T3p0SlFVVk5MRms3UVVGRFJpdzBRa0ZCWVR0QlFVRkJPenRCUVVOVUxHRkJRVXNzU1VGQlRDeEhRVUZaTERoQ1FVRmFPMEZCUTBFc1lVRkJTeXhUUVVGTUxFZEJRV2xDTEZOQlFWTXNZMEZCVkN4RFFVRjNRaXhOUVVGNFFpeERRVUZxUWp0QlFVTkJMR0ZCUVVzc1ZVRkJUQ3hIUVVGclFpeFRRVUZUTEdOQlFWUXNRMEZCZDBJc1QwRkJlRUlzUTBGQmJFSTdRVUZEUVN4aFFVRkxMRkZCUVV3c1IwRkJaMElzVTBGQlV5eGpRVUZVTEVOQlFYZENMRXRCUVhoQ0xFTkJRV2hDTzBGQlEwRXNZVUZCU3l4VlFVRk1MRWRCUVd0Q0xGTkJRVk1zWTBGQlZDeERRVUYzUWl4UFFVRjRRaXhEUVVGc1FqdEJRVU5JT3pzN08zTkRRVVZaTzBGQlFVRTdPMEZCUTFRc1owSkJRVWtzVjBGQlZ5eFBRVUZQTEZGQlFYUkNPMEZCUTBFc1owSkJRVWtzV1VGQldTeFRRVUZUTEUxQlFWUXNRMEZCWjBJc1UwRkJhRUlzUTBGQk1FSXNRMEZCTVVJc1EwRkJhRUk3UVVGRFFTeG5Ra0ZCU1N4VFFVRlZMRk5CUVZNc1kwRkJWQ3hEUVVGM1FpeE5RVUY0UWl4RFFVRmtPMEZCUTBFc1owSkJRVWtzVlVGQlZTeEpRVUZXTEVsQlFXdENMR0ZCUVdFc1JVRkJia01zUlVGQmMwTTdRVUZEYkVNc2RVSkJRVThzWjBKQlFWQXNRMEZCZDBJc1QwRkJlRUlzUlVGQmFVTXNWVUZCUXl4RFFVRkVMRVZCUVVzN1FVRkRiRU1zYzBKQlFVVXNZMEZCUmp0QlFVTkJMSE5DUVVGRkxHVkJRVVk3TzBGQlJVRXNkMEpCUVVrc1QwRkJUeXhUUVVGUUxFTkJRV2xDTEV0QlFXcENMRU5CUVhWQ0xFOUJRWFpDTEVOQlFTdENMRlZCUVM5Q0xFdEJRVGhETEVOQlFVTXNRMEZCYmtRc1JVRkJjMFE3UVVGRGJFUXNPRUpCUVVzc1NVRkJUQ3hEUVVGVkxFZEJRVllzUTBGQll5eE5RVUZMTEZOQlFVd3NRMEZCWlN4TFFVRTNRaXhGUVVGdlF5eE5RVUZMTEZWQlFVd3NRMEZCWjBJc1MwRkJjRVFzUlVGQk1rUXNUVUZCU3l4UlFVRk1MRU5CUVdNc1MwRkJla1VzUlVGQlowWXNUVUZCU3l4VlFVRk1MRU5CUVdkQ0xFdEJRV2hITzBGQlEwZzdRVUZEU2l4cFFrRlFSRHRCUVZGSU8wRkJRMG83T3p0elEwRkZXVHRCUVVGQk96dEJRVU5VTEdkQ1FVRkpMRmxCUVdFc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEZsQlFYWkNMRU5CUVdwQ08wRkJRMEVzWjBKQlFVa3NXVUZCWVN4SlFVRnFRanRCUVVOQkxHZENRVUZKTEZkQlFXRXNTVUZCYWtJN1FVRkRRU3huUWtGQlNTeGhRVUZoTEVsQlFXcENMRVZCUVhOQ08wRkJRMnhDTERCQ1FVRlZMR2RDUVVGV0xFTkJRVEpDTEU5QlFUTkNMRVZCUVc5RExGVkJRVU1zUTBGQlJDeEZRVUZQTzBGQlEzWkRMSE5DUVVGRkxHTkJRVVk3UVVGRFFTeDNRa0ZCU1N4RlFVRkZMRTFCUVVZc1NVRkJXU3hGUVVGRkxFMUJRVVlzUTBGQlV5eFRRVUZVTEVOQlFXMUNMRkZCUVc1Q0xFTkJRVFpDTEZGQlFUZENMRU5CUVdoQ0xFVkJRVEJFTzBGQlEzUkVMRzlEUVVGWkxFVkJRVVVzVFVGQlpEdEJRVU5CTEcxRFFVRlhMRk5CUVZNc1kwRkJWQ3hEUVVGM1FpeFZRVUZWTEZsQlFWWXNRMEZCZFVJc1UwRkJka0lzUTBGQmVFSXNSVUZCTWtRc1RVRkJNMFFzUlVGQldEdEJRVU5CTEN0Q1FVRkxMRWxCUVV3c1EwRkJWU3hOUVVGV0xFTkJRV2xDTEZWQlFWVXNXVUZCVml4RFFVRjFRaXhUUVVGMlFpeERRVUZxUWp0QlFVTklPMEZCUTBvc2FVSkJVRVE3UVVGUlNEdEJRVU5LT3pzN2IwTkJSVlU3UVVGRFVDeG5Ra0ZCU1N4VlFVRlZMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeFpRVUYyUWl4RFFVRmtPMEZCUTBFc1owSkJRVWtzV1VGQldTeEpRVUZvUWpzN1FVRkZRU3huUWtGQlNTeFhRVUZYTEVsQlFXWXNSVUZCY1VJN1FVRkRha0lzZDBKQlFWRXNaMEpCUVZJc1EwRkJlVUlzVDBGQmVrSXNSVUZCYTBNc1ZVRkJReXhEUVVGRUxFVkJRVTg3UVVGRGNrTXNjMEpCUVVVc1kwRkJSanRCUVVOQkxIZENRVUZKTEVWQlFVVXNUVUZCUml4SlFVRlpMRVZCUVVVc1RVRkJSaXhEUVVGVExGTkJRVlFzUTBGQmJVSXNVVUZCYmtJc1EwRkJORUlzVFVGQk5VSXNRMEZCYUVJc1JVRkJiMFE3UVVGRGFFUXNiME5CUVZrc1JVRkJSU3hOUVVGa08wRkJRMEVzYVVOQlFWTXNVVUZCVkN4RFFVRnJRaXhKUVVGc1FpeHRRa0ZCZFVNc1ZVRkJWU3haUVVGV0xFTkJRWFZDTEZOQlFYWkNMRU5CUVhaRE8wRkJRMGc3UVVGRFNpeHBRa0ZPUkR0QlFVOUlPMEZCUTBvN096dHhRMEZGV1R0QlFVRkJPenRCUVVOVUxHZENRVUZKTEZWQlFWVXNVMEZCVXl4aFFVRlVMRU5CUVhWQ0xFMUJRWFpDTEVOQlFXUTdRVUZEUVN4blFrRkJTU3hYUVVGWExFOUJRVThzVVVGQmRFSTdRVUZEUVN4blFrRkJTU3haUVVGWkxGTkJRVk1zVFVGQlZDeERRVUZuUWl4VFFVRm9RaXhEUVVFd1FpeERRVUV4UWl4RFFVRm9RanRCUVVOQkxHZENRVUZKTEV0QlFVc3NWVUZCVlN4TFFVRldMRU5CUVdkQ0xFZEJRV2hDTEVOQlFWUTdPMEZCUlVFc1owSkJRVWtzVjBGQlZ5eEpRVUZtTEVWQlFYRkNPMEZCUTJwQ0xIZENRVUZSTEdkQ1FVRlNMRU5CUVhsQ0xFOUJRWHBDTEVWQlFXdERMRlZCUVVNc1EwRkJSQ3hGUVVGUE8wRkJRM0pETEhOQ1FVRkZMR05CUVVZN1FVRkRRU3gzUWtGQlNTeEZRVUZGTEUxQlFVWXNTVUZCV1N4RlFVRkZMRTFCUVVZc1EwRkJVeXhUUVVGVUxFTkJRVzFDTEZGQlFXNUNMRU5CUVRSQ0xFOUJRVFZDTEVOQlFXaENMRVZCUVhORU8wRkJRMnhFTEN0Q1FVRkxMRWxCUVV3c1EwRkJWU3hKUVVGV0xFTkJRMGtzUjBGQlJ5eERRVUZJTEVOQlJFb3NSVUZGU1N4UFFVRkxMRk5CUVV3c1EwRkJaU3hMUVVadVFpeEZRVWRKTEU5QlFVc3NWVUZCVEN4RFFVRm5RaXhMUVVod1FpeEZRVWxKTEU5QlFVc3NVVUZCVEN4RFFVRmpMRXRCU214Q0xFVkJTMGtzVDBGQlN5eFZRVUZNTEVOQlFXZENMRXRCVEhCQ08wRkJVVWc3UVVGRFNpeHBRa0ZhUkR0QlFXRklPMEZCUTBvN096dHhRMEZEV1R0QlFVTlVMR2RDUVVGSkxGZEJRVmNzVTBGQlV5eGpRVUZVTEVOQlFYZENMRXRCUVhoQ0xFTkJRV1k3UVVGRFFTeG5Ra0ZCU1N4aFFVRmhMRk5CUVZNc1kwRkJWQ3hEUVVGM1FpeFBRVUY0UWl4RFFVRnFRanM3UVVGRlFTeG5Ra0ZCU1N4alFVRmpMRWxCUVdRc1NVRkJjMElzV1VGQldTeEpRVUYwUXl4RlFVRTBRenRCUVVONFF5d3lRa0ZCVnl4blFrRkJXQ3hEUVVFMFFpeFZRVUUxUWl4RlFVRjNReXhWUVVGRExFTkJRVVFzUlVGQlR6dEJRVU16UXl3MFFrRkJVU3hYUVVGWExFdEJRVmdzUTBGQmFVSXNUVUZCZWtJN1FVRkRTU3cyUWtGQlN5eERRVUZNTzBGQlEwa3NkVU5CUVZjc1MwRkJXQ3hIUVVGdFFpeE5RVUZOTEZkQlFWY3NTMEZCY0VNN1FVRkRRVHRCUVVOS0xEWkNRVUZMTEVOQlFVdzdRVUZEU1N4MVEwRkJWeXhMUVVGWUxFZEJRVzFDTEZkQlFWY3NTMEZCV0N4SFFVRnRRaXhKUVVGMFF6dEJRVU5CTzBGQlEwb3NOa0pCUVVzc1EwRkJURHRCUVVOSkxIVkRRVUZYTEV0QlFWZ3NSMEZCYlVJc1YwRkJWeXhMUVVGWUxFZEJRVzFDTEVkQlFYUkRPMEZCUTBFN1FVRkRTaXcyUWtGQlN5eEZRVUZNTzBGQlEwa3NkVU5CUVZjc1MwRkJXQ3hIUVVGdFFpeFhRVUZYTEV0QlFWZ3NRMEZCYVVJc1UwRkJha0lzUTBGQk1rSXNRMEZCTTBJc1JVRkJPRUlzUTBGQk9VSXNTVUZCYlVNc1YwRkJWeXhMUVVGWUxFTkJRV2xDTEUxQlFXcENMRU5CUVhkQ0xFVkJRWGhDTEVOQlFXNURMRWRCUVdsRkxFZEJRV3BGTEVkQlFYVkZMRmRCUVZjc1MwRkJXQ3hEUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhGUVVFelFpeERRVUV4Ump0QlFVTkJPMEZCV2xJN08wRkJaVUVzZDBKQlFVa3NSVUZCUlN4UlFVRkdMRWRCUVdFc1JVRkJZaXhKUVVGdFFpeEZRVUZGTEZGQlFVWXNSMEZCWVN4RlFVRndReXhGUVVGM1F6dEJRVU53UXl3clFrRkJUeXhKUVVGUU8wRkJRMGdzY1VKQlJrUXNUVUZGU3p0QlFVTkVMQ3RDUVVGUExFdEJRVkE3UVVGRFNEdEJRVWxLTEdsQ1FYaENSRHM3UVVFd1FrRXNlVUpCUVZNc1owSkJRVlFzUTBGQk1FSXNWVUZCTVVJc1JVRkJjME1zVlVGQlF5eERRVUZFTEVWQlFVODdRVUZEZWtNc05FSkJRVkVzVTBGQlV5eExRVUZVTEVOQlFXVXNUVUZCZGtJN1FVRkRTU3cyUWtGQlN5eERRVUZNTzBGQlEwa3NjVU5CUVZNc1MwRkJWQ3hIUVVGcFFpeFRRVUZUTEV0QlFWUXNSMEZCYVVJc1IwRkJiRU03UVVGRFFUdEJRVU5LTERaQ1FVRkxMRU5CUVV3N1FVRkRTU3h4UTBGQlV5eExRVUZVTEVkQlFXbENMRk5CUVZNc1MwRkJWQ3hIUVVGcFFpeEhRVUZzUXp0QlFVTkJPMEZCUTBvc05rSkJRVXNzUlVGQlREdEJRVU5KTEhGRFFVRlRMRXRCUVZRc1IwRkJhVUlzVTBGQlV5eExRVUZVTEVkQlFXbENMRWRCUVd4RE8wRkJRMEU3UVVGRFNqdEJRVU5KTzBGQldGSTdRVUZoU0N4cFFrRmtSRHRCUVdWSU8wRkJRMG83T3pzN096dEJRVWRNTEU5QlFVOHNUMEZCVUN4SFFVRnBRaXhaUVVGcVFqczdPenM3T3p0QlEyeEpRVHM3T3pzN096czdTVUZGVFN4ak8wRkJRMFlzT0VKQlFXRTdRVUZCUVRzN1FVRkRWQ3hoUVVGTExGTkJRVXdzUjBGQmIwSXNVMEZCVXl4alFVRlVMRU5CUVhkQ0xFMUJRWGhDTEVOQlFYQkNPMEZCUTBFc1lVRkJTeXhWUVVGTUxFZEJRVzlDTEZOQlFWTXNZMEZCVkN4RFFVRjNRaXhQUVVGNFFpeERRVUZ3UWp0QlFVTkJMR0ZCUVVzc1VVRkJUQ3hIUVVGdlFpeFRRVUZUTEdOQlFWUXNRMEZCZDBJc1MwRkJlRUlzUTBGQmNFSTdRVUZEUVN4aFFVRkxMRlZCUVV3c1IwRkJiMElzVTBGQlV5eGpRVUZVTEVOQlFYZENMRTlCUVhoQ0xFTkJRWEJDTzBGQlEwRXNZVUZCU3l4WlFVRk1MRWRCUVc5Q0xFbEJRWEJDTzBGQlEwRXNZVUZCU3l4VlFVRk1MRWRCUVc5Q0xFTkJRWEJDTzBGQlEwZzdPenM3TmtOQlJXMUNPMEZCUTJoQ0xHZENRVUZKTEZOQlFWTXNVMEZCVXl4blFrRkJWQ3hEUVVFd1FpeHBRa0ZCTVVJc1EwRkJZanRCUVVOQkxHZENRVUZKTEZGQlFWRXNRMEZCV2pzN1FVRkZRU3hwUWtGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhKUVVGSkxFOUJRVThzVFVGQk0wSXNSVUZCYlVNc1IwRkJia01zUlVGQmQwTTdRVUZEY0VNc2IwSkJRVWtzVDBGQlR5eERRVUZRTEVWQlFWVXNTMEZCVml4RFFVRm5RaXhOUVVGb1FpeEhRVUY1UWl4RFFVRTNRaXhGUVVGblF6dEJRVU0xUWp0QlFVTklPMEZCUTBvN08wRkJSVVFzWjBKQlFVa3NVMEZCVXl4UFFVRlBMRTFCUVhCQ0xFVkJRVFJDTzBGQlEzaENMSFZDUVVGUExFbEJRVkE3UVVGRFNDeGhRVVpFTEUxQlJVczdRVUZEUkN4MVFrRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFNqczdPM2xEUVVWbE8wRkJRMW9zWjBKQlFVMHNXVUZCV1N4elNVRkJiRUk3UVVGRFFTeG5Ra0ZCU1N4VlFVRlZMREpDUVVGa08wRkJRMEVzWjBKQlFVa3NTMEZCU3l4VFFVRk1MRU5CUVdVc1MwRkJaaXhEUVVGeFFpeE5RVUZ5UWl4SFFVRTRRaXhEUVVGc1F5eEZRVUZ4UXp0QlFVTnFReXh4UWtGQlN5eFRRVUZNTEVOQlFXVXNVMEZCWml4RFFVRjVRaXhIUVVGNlFpeERRVUUyUWl4UFFVRTNRanRCUVVOQkxIRkNRVUZMTEZsQlFVd3NSMEZCYjBJc2QwTkJRWEJDTzBGQlEwRXNlVUpCUVZNc1kwRkJWQ3hEUVVGM1FpeFpRVUY0UWl4RlFVRnpReXhUUVVGMFF5eEhRVUZyUkN4TFFVRkxMRmxCUVhaRU8wRkJRMEVzY1VKQlFVc3NWVUZCVER0QlFVTklMR0ZCVEVRc1RVRkxUenRCUVVOSUxIRkNRVUZMTEZOQlFVd3NRMEZCWlN4VFFVRm1MRU5CUVhsQ0xFMUJRWHBDTEVOQlFXZERMRTlCUVdoRE8wRkJRMEVzY1VKQlFVc3NWVUZCVER0QlFVTkJMSGxDUVVGVExHTkJRVlFzUTBGQmQwSXNXVUZCZUVJc1JVRkJjME1zVTBGQmRFTXNSMEZCYTBRc1JVRkJiRVE3UVVGRFNEdEJRVU5FTEdkQ1FVRkpMRkZCUVZFc1VVRkJVaXhEUVVGcFFpeExRVUZMTEZGQlFVd3NRMEZCWXl4TFFVRXZRaXhMUVVGNVF5eExRVUUzUXl4RlFVRnZSRHRCUVVOb1JDeHhRa0ZCU3l4UlFVRk1MRU5CUVdNc1UwRkJaQ3hEUVVGM1FpeEhRVUY0UWl4RFFVRTBRaXhQUVVFMVFqdEJRVU5CTEhGQ1FVRkxMRmxCUVV3c1IwRkJiMElzZFVKQlFYQkNPMEZCUTBFc2VVSkJRVk1zWTBGQlZDeERRVUYzUWl4WFFVRjRRaXhGUVVGeFF5eFRRVUZ5UXl4SFFVRnBSQ3hMUVVGTExGbEJRWFJFTzBGQlEwRXNjVUpCUVVzc1ZVRkJURHRCUVVOSUxHRkJURVFzVFVGTFR6dEJRVU5JTEhGQ1FVRkxMRkZCUVV3c1EwRkJZeXhUUVVGa0xFTkJRWGRDTEUxQlFYaENMRU5CUVN0Q0xFOUJRUzlDTzBGQlEwRXNjVUpCUVVzc1ZVRkJURHRCUVVOQkxIbENRVUZUTEdOQlFWUXNRMEZCZDBJc1YwRkJlRUlzUlVGQmNVTXNVMEZCY2tNc1IwRkJhVVFzUlVGQmFrUTdRVUZEU0R0QlFVTkVMR2RDUVVGSkxFTkJRVU1zUzBGQlN5eFZRVUZNTEVOQlFXZENMRXRCUVdoQ0xFTkJRWE5DTEV0QlFYUkNMRU5CUVRSQ0xGTkJRVFZDTEVOQlFVd3NSVUZCTmtNN1FVRkRla01zY1VKQlFVc3NWVUZCVEN4RFFVRm5RaXhUUVVGb1FpeERRVUV3UWl4SFFVRXhRaXhEUVVFNFFpeFBRVUU1UWp0QlFVTkJMSEZDUVVGTExGbEJRVXdzUjBGQmIwSXNlVUpCUVhCQ08wRkJRMEVzZVVKQlFWTXNZMEZCVkN4RFFVRjNRaXhoUVVGNFFpeEZRVUYxUXl4VFFVRjJReXhIUVVGdFJDeExRVUZMTEZsQlFYaEVPMEZCUTBFc2NVSkJRVXNzVlVGQlREdEJRVU5JTEdGQlRFUXNUVUZMVHp0QlFVTklMSEZDUVVGTExGVkJRVXdzUTBGQlowSXNVMEZCYUVJc1EwRkJNRUlzVFVGQk1VSXNRMEZCYVVNc1QwRkJha003UVVGRFFTeHhRa0ZCU3l4VlFVRk1PMEZCUTBFc2VVSkJRVk1zWTBGQlZDeERRVUYzUWl4aFFVRjRRaXhGUVVGMVF5eFRRVUYyUXl4SFFVRnRSQ3hGUVVGdVJEdEJRVU5JTzBGQlEwUXNaMEpCUVVrc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEV0QlFXaENMRWxCUVhsQ0xFVkJRVGRDTEVWQlFXbERPMEZCUXpkQ0xIRkNRVUZMTEZWQlFVd3NRMEZCWjBJc1UwRkJhRUlzUTBGQk1FSXNSMEZCTVVJc1EwRkJPRUlzVDBGQk9VSTdRVUZEUVN4eFFrRkJTeXhaUVVGTUxFZEJRVzlDTERSQ1FVRndRanRCUVVOQkxIbENRVUZUTEdOQlFWUXNRMEZCZDBJc1lVRkJlRUlzUlVGQmRVTXNVMEZCZGtNc1IwRkJiVVFzUzBGQlN5eFpRVUY0UkR0QlFVTkJMSEZDUVVGTExGVkJRVXc3UVVGRFNDeGhRVXhFTEUxQlMwODdRVUZEU0N4eFFrRkJTeXhWUVVGTUxFTkJRV2RDTEZOQlFXaENMRU5CUVRCQ0xFMUJRVEZDTEVOQlFXbERMRTlCUVdwRE8wRkJRMEVzY1VKQlFVc3NWVUZCVER0QlFVTkJMSGxDUVVGVExHTkJRVlFzUTBGQmQwSXNZVUZCZUVJc1JVRkJkVU1zVTBGQmRrTXNSMEZCYlVRc1JVRkJia1E3UVVGRFNEczdRVUZGUkN4blFrRkJTU3hMUVVGTExGVkJRVXdzUjBGQmEwSXNRMEZCZEVJc1JVRkJlVUk3UVVGRGNrSXNkVUpCUVU4c1MwRkJVRHRCUVVOSUxHRkJSa1FzVFVGRlR6dEJRVU5JTEhWQ1FVRlBMRWxCUVZBN1FVRkRTRHRCUVVOS096czdiVU5CUlZVN1FVRkRVQ3huUWtGQlNTeFhRVUZYTEU5QlFVOHNVVUZCZEVJN1FVRkRRU3huUWtGQlNTeFpRVUZaTEZOQlFWTXNUVUZCVkN4RFFVRm5RaXhUUVVGb1FpeERRVUV3UWl4RFFVRXhRaXhEUVVGb1FqdEJRVU5CTEdkQ1FVRkpMRXRCUVVzc1NVRkJWRHRCUVVOQkxHZENRVUZKTEZOQlFWTXNVMEZCVXl4alFVRlVMRU5CUVhkQ0xFMUJRWGhDTEVOQlFXSTdRVUZEUVN4blFrRkJTU3hoUVVGaExFVkJRV3BDTEVWQlFYRkNPMEZCUTJwQ0xHOUNRVUZOTEZkQlFWY3NTMEZCU3l4TFFVRk1MRU5CUVZjc1lVRkJZU3hQUVVGaUxFTkJRWEZDTEU5QlFYSkNMRU5CUVZnc1EwRkJha0k3UVVGRFFTeHhRa0ZCU3l4VlFVRlZMRXRCUVZZc1EwRkJaMElzUjBGQmFFSXNRMEZCVERzN1FVRkZRU3h4UWtGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhKUVVGSkxGTkJRVk1zVFVGQk4wSXNSVUZCY1VNc1IwRkJja01zUlVGQk1FTTdRVUZEZEVNc2QwSkJRVWtzVTBGQlV5eEhRVUZITEVOQlFVZ3NRMEZCVkN4TFFVRnRRaXhUUVVGVExFTkJRVlFzUlVGQldTeEZRVUZ1UXl4RlFVRjFRenRCUVVOdVF5dzJRa0ZCU3l4VFFVRk1MRU5CUVdVc1MwRkJaaXhIUVVGMVFpeFRRVUZUTEVOQlFWUXNSVUZCV1N4SlFVRnVRenRCUVVOQkxEWkNRVUZMTEZWQlFVd3NRMEZCWjBJc1MwRkJhRUlzUjBGQmQwSXNVMEZCVXl4RFFVRlVMRVZCUVZrc1MwRkJjRU03UVVGRFFTdzJRa0ZCU3l4UlFVRk1MRU5CUVdNc1MwRkJaQ3hIUVVGelFpeFRRVUZUTEVOQlFWUXNSVUZCV1N4SFFVRnNRenRCUVVOQkxEWkNRVUZMTEZWQlFVd3NRMEZCWjBJc1MwRkJhRUlzUjBGQmQwSXNVMEZCVXl4RFFVRlVMRVZCUVZrc1MwRkJjRU03TzBGQlJVRXNOa0pCUVVzc1UwRkJUQ3hEUVVGbExGTkJRV1lzUTBGQmVVSXNSMEZCZWtJc1EwRkJOa0lzVjBGQk4wSTdRVUZEUVN3MlFrRkJTeXhWUVVGTUxFTkJRV2RDTEZOQlFXaENMRU5CUVRCQ0xFZEJRVEZDTEVOQlFUaENMRmRCUVRsQ08wRkJRMEVzTmtKQlFVc3NVVUZCVEN4RFFVRmpMRk5CUVdRc1EwRkJkMElzUjBGQmVFSXNRMEZCTkVJc1YwRkJOVUk3UVVGRFFTdzJRa0ZCU3l4VlFVRk1MRU5CUVdkQ0xGTkJRV2hDTEVOQlFUQkNMRWRCUVRGQ0xFTkJRVGhDTEZkQlFUbENPenRCUVVWQkxDdENRVUZQTEZsQlFWQXNRMEZCYjBJc1QwRkJjRUlzUlVGQk5rSXNVMEZCTjBJN1FVRkRRU3dyUWtGQlR5eFRRVUZRTEVOQlFXbENMRWRCUVdwQ0xFTkJRWEZDTEU5QlFYSkNPMEZCUTBFc0swSkJRVThzV1VGQlVDeERRVUZ2UWl4SlFVRndRaXhGUVVFd1FpeFBRVUV4UWp0QlFVTklPMEZCUlVvN1FVRkRTanRCUVVWS096czdPenM3UVVGSlRDeFBRVUZQTEU5QlFWQXNSMEZCYVVJc1kwRkJha0k3T3pzN096czdRVU5xU0VFN096czdPenM3TzBsQlIwMHNZenRCUVVOR0xEaENRVUZoTzBGQlFVRTdPMEZCUTFRc1lVRkJTeXhGUVVGTU8wRkJRMEVzWVVGQlN5eEpRVUZNTzBGQlEwRXNZVUZCU3l4TFFVRk1PMEZCUTBFc1lVRkJTeXhIUVVGTU8wRkJRMEVzWVVGQlN5eExRVUZNTzBGQlEwZzdPenM3TkVKQlJVY3NTU3hGUVVGTkxFc3NSVUZCVHl4SExFVkJRVXNzU3l4RlFVRk5PMEZCUTNoQ0xHZENRVUZKTEZWQlFWVXNSVUZCWkR0QlFVTkJMR2RDUVVGSkxGVkJRVlVzUlVGQlpEdEJRVU5CTEdkQ1FVRkpMRXRCUVVzc1EwRkJWRHRCUVVOQkxHZENRVUZKTEdsQ1FVRnBRaXc0UWtGQmNrSTdPMEZCUjBFc1owSkJRVWtzWVVGQllTeFBRVUZpTEVOQlFYRkNMRTlCUVhKQ0xFdEJRV2xETEVsQlFYSkRMRVZCUVRCRE8wRkJRM1JETERCQ1FVRlZMRXRCUVVzc1MwRkJUQ3hEUVVGWExHRkJRV0VzVDBGQllpeERRVUZ4UWl4UFFVRnlRaXhEUVVGWUxFTkJRVlk3UVVGRFNEdEJRVU5FTEdkQ1FVRkpMR0ZCUVdFc1QwRkJZaXhEUVVGeFFpeFJRVUZ5UWl4TFFVRnJReXhKUVVGMFF5eEZRVUUwUXp0QlFVTjRReXh4UWtGQlN5eFRRVUZUTEdGQlFXRXNUMEZCWWl4RFFVRnhRaXhSUVVGeVFpeERRVUZVTEVsQlFUSkRMRU5CUVdoRU8wRkJRMGc3TzBGQlJVUXNhVUpCUVVzc1JVRkJUQ3hIUVVGaExFbEJRV0k3UVVGRFFTeHBRa0ZCU3l4SlFVRk1MRWRCUVdFc1NVRkJZanRCUVVOQkxHbENRVUZMTEV0QlFVd3NSMEZCWVN4TFFVRmlPMEZCUTBFc2FVSkJRVXNzUjBGQlRDeEhRVUZoTEVkQlFXSTdRVUZEUVN4cFFrRkJTeXhMUVVGTUxFZEJRV0VzUzBGQllqczdRVUZGUVN4elFrRkJWVHRCUVVOT0xITkNRVUZUTEV0QlFVc3NSVUZFVWp0QlFVVk9MSGRDUVVGVExFdEJRVXNzU1VGR1VqdEJRVWRPTEhWQ1FVRlRMRXRCUVVzc1IwRklVanRCUVVsT0xIbENRVUZUTEV0QlFVc3NTMEZLVWp0QlFVdE9MSGxDUVVGVExFdEJRVXM3UVVGTVVpeGhRVUZXT3p0QlFWRkJMR2RDUVVGSkxHVkJRV1VzWTBGQlppeEZRVUZLTEVWQlFYRkRPMEZCUTJwRExIZENRVUZSTEVsQlFWSXNRMEZCWVN4UFFVRmlPMEZCUTBFc05rSkJRV0VzVDBGQllpeERRVUZ4UWl4UFFVRnlRaXhGUVVFNFFpeExRVUZMTEZOQlFVd3NRMEZCWlN4UFFVRm1MRU5CUVRsQ08wRkJRMEVzTmtKQlFXRXNUMEZCWWl4RFFVRnhRaXhSUVVGeVFpeEZRVUVyUWl4TFFVRkxMRVZCUVhCRE8wRkJRMGc3UVVGRFNqczdPemhDUVVWSk8wRkJRMFFzWjBKQlFVa3NWMEZCVnl4RlFVRm1PMEZCUTBFc1owSkJRVTBzVjBGQlZ5eExRVUZMTEV0QlFVd3NRMEZCVnl4aFFVRmhMRTlCUVdJc1EwRkJjVUlzVDBGQmNrSXNRMEZCV0N4RFFVRnFRanRCUVVOQkxHZENRVUZOTEdWQlFXVXNTMEZCU3l4TFFVRk1MRU5CUVZjc1lVRkJZU3hQUVVGaUxFTkJRWEZDTEZkQlFYSkNMRU5CUVZnc1EwRkJja0k3UVVGRFFTeG5Ra0ZCVFN4aFFVRmhMRk5CUVZNc1kwRkJWQ3hEUVVGM1FpeFhRVUY0UWl4RFFVRnVRanRCUVVOQkxHZENRVUZKTEdOQlFXTXNTVUZCWkN4SlFVRnpRaXhaUVVGWkxFbEJRWFJETEVWQlFUSkRPMEZCUTNaRExESkNRVUZYTEZOQlFWZ3NSMEZCZFVJc1JVRkJka0k3TzBGQlJVRXNlVUpCUVZNc1QwRkJWQ3hEUVVGcFFpeFZRVUZETEVWQlFVUXNSVUZCVVR0QlFVTnlRaXgzUWtGQlNTeFhRVUZYTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhKUVVGMlFpeERRVUZtTzBGQlEwRXNOa0pCUVZNc1UwRkJWQ3hEUVVGdFFpeEhRVUZ1UWl4RFFVRjFRaXhuUWtGQmRrSTdRVUZEUVN3MlFrRkJVeXhaUVVGVUxFTkJRWE5DTEVsQlFYUkNMRVZCUVRSQ0xFZEJRVWNzUlVGQkwwSTdRVUZEVVN4dlNrRkRlVVFzUjBGQlJ5eEpRVVExUkN4WFFVTnpSU3hIUVVGSExFZEJSSHBGTEN0VFFVdHpSaXhIUVVGSExFdEJUSHBHTERKSVFVMXZSaXhIUVVGSExFdEJUblpHTEd0UVFWTjNSaXhIUVVGSExFVkJWRE5HTEhGS1FWVnBSeXhIUVVGSExFVkJWbkJITzBGQllWSXNOa0pCUVZNc1UwRkJWQ3hIUVVGeFFpeFJRVUZ5UWp0QlFVTkJMQ3RDUVVGWExGZEJRVmdzUTBGQmRVSXNVVUZCZGtJN1FVRkRTQ3hwUWtGdVFrUTdRVUZ2UWtnN1FVRkRSQ3huUWtGQlNTeGpRVUZqTEVsQlFXUXNTVUZCYzBJc1owSkJRV2RDTEVsQlFYUkRMRWxCUVRoRExGbEJRVmtzU1VGQk9VUXNSVUZCYlVVN1FVRkRMMFFzYjBKQlFVa3NXVUZCV1N4SlFVRmFMRWxCUVc5Q0xGTkJRVk1zVFVGQlZDeEpRVUZ0UWl4RFFVRXpReXhGUVVFNFF6dEJRVU14UXl3clFrRkJWeXhUUVVGWUxFZEJRWFZDTEVWQlFYWkNPMEZCUTBFc2FVTkJRV0VzVDBGQllpeERRVUZ4UWl4VlFVRkRMRVZCUVVRc1JVRkJVVHRCUVVONlFpdzBRa0ZCU1N4WFFVRlhMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeEpRVUYyUWl4RFFVRm1PMEZCUTBFc2FVTkJRVk1zVTBGQlZDeERRVUZ0UWl4SFFVRnVRaXhEUVVGMVFpeG5Ra0ZCZGtJN1FVRkRRU3hwUTBGQlV5eFpRVUZVTEVOQlFYTkNMRWxCUVhSQ0xFVkJRVFJDTEVkQlFVY3NSVUZCTDBJN1FVRkRRU3cwU2tGRGFVVXNSMEZCUnl4SlFVUndSU3hYUVVNNFJTeEhRVUZITEVkQlJHcEdMSEZQUVVsNVJTeEhRVUZITEV0QlNqVkZMREJIUVV0MVJTeEhRVUZITEV0QlRERkZPMEZCVDBFc2FVTkJRVk1zVTBGQlZDeEhRVUZ4UWl4UlFVRnlRanRCUVVOQkxHMURRVUZYTEZkQlFWZ3NRMEZCZFVJc1VVRkJka0k3UVVGRFNDeHhRa0ZpUkR0QlFXVklPMEZCUTBvN1FVRkhTanM3TzNGRFFVVlhPMEZCUTFJc1owSkJRVTBzVjBGQlZ5eExRVUZMTEV0QlFVd3NRMEZCVnl4aFFVRmhMRTlCUVdJc1EwRkJjVUlzVDBGQmNrSXNRMEZCV0N4RFFVRnFRanRCUVVOQkxHZENRVUZOTEUxQlFVMHNNRVJCUVZvN08wRkJSVUVzWjBKQlFVa3NXVUZCV1N4SlFVRm9RaXhGUVVGelFqdEJRVU5zUWl4elFrRkJUU3hIUVVGT0xFVkJRVmNzUlVGQlJTeFRRVUZUTEVWQlFVVXNaMEpCUVdkQ0xHbERRVUZzUWl4RlFVRllMRVZCUVZnc1JVRkRReXhKUVVSRUxFTkJRMDA3UVVGQlFTd3lRa0ZCVHl4SlFVRkpMRWxCUVVvc1JVRkJVRHRCUVVGQkxHbENRVVJPTEVWQlJVTXNTVUZHUkN4RFFVVk5MRzlDUVVGWk8wRkJRMlFzYVVOQlFXRXNUMEZCWWl4RFFVRnhRaXhYUVVGeVFpeEZRVUZyUXl4TFFVRkxMRk5CUVV3c1EwRkJaU3hSUVVGbUxFTkJRV3hETzBGQlEwZ3NhVUpCU2tRc1JVRkxReXhMUVV4RUxFTkJTMDhzWlVGQlR6dEJRVU5XTERSQ1FVRlJMRWRCUVZJc1EwRkJXU3cyUTBGQldqdEJRVU5JTEdsQ1FWQkVPMEZCVVVnN1FVRkRTanM3TzJkRFFVVk5MRTBzUlVGQlR6dEJRVU5XTEdkQ1FVRk5MRmRCUVZjc1MwRkJTeXhMUVVGTUxFTkJRVmNzWVVGQllTeFBRVUZpTEVOQlFYRkNMRTlCUVhKQ0xFTkJRVmdzUTBGQmFrSTdRVUZEUVN4cFFrRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRk5CUVZNc1RVRkJOMElzUlVGQmNVTXNSMEZCY2tNc1JVRkJNRU03UVVGRGRFTXNiMEpCUVVjc1UwRkJVeXhOUVVGVUxFdEJRVzlDTEZOQlFWTXNRMEZCVkN4RlFVRlpMRVZCUVc1RExFVkJRWE5ETzBGQlEyeERMRFpDUVVGVExFMUJRVlFzUTBGQlowSXNRMEZCYUVJc1JVRkJiVUlzUTBGQmJrSTdRVUZEU0R0QlFVTktPMEZCUTBRc2VVSkJRV0VzVDBGQllpeERRVUZ4UWl4UFFVRnlRaXhGUVVFNFFpeExRVUZMTEZOQlFVd3NRMEZCWlN4UlFVRm1MRU5CUVRsQ08wRkJRMGc3T3pzMlFrRkZTU3hOTEVWQlFWRXNTU3hGUVVGTkxFc3NSVUZCVHl4SExFVkJRVXNzU3l4RlFVRk5PMEZCUTJwRExHZENRVUZOTEZkQlFWY3NTMEZCU3l4TFFVRk1MRU5CUVZjc1lVRkJZU3hQUVVGaUxFTkJRWEZDTEU5QlFYSkNMRU5CUVZnc1EwRkJha0k3UVVGRFFTeHBRa0ZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEZOQlFWTXNUVUZCTjBJc1JVRkJjVU1zUjBGQmNrTXNSVUZCTUVNN1FVRkRkRU1zYjBKQlFVa3NVMEZCVXl4TlFVRlVMRXRCUVc5Q0xGTkJRVk1zUTBGQlZDeEZRVUZaTEVWQlFYQkRMRVZCUVhkRE8wRkJRM0JETERaQ1FVRlRMRU5CUVZRc1NVRkJZenRCUVVOV0xEaENRVUZOTEZOQlFWTXNRMEZCVkN4RlFVRlpMRVZCUkZJN1FVRkZWaXhuUTBGQlVTeEpRVVpGTzBGQlIxWXNLMEpCUVU4c1IwRklSenRCUVVsV0xHbERRVUZUTEV0QlNrTTdRVUZMVml4cFEwRkJVenRCUVV4RExIRkNRVUZrTzBGQlQwZzdRVUZEU2pzN1FVRkZSQ3g1UWtGQllTeFBRVUZpTEVOQlFYRkNMRTlCUVhKQ0xFVkJRVGhDTEV0QlFVc3NVMEZCVEN4RFFVRmxMRkZCUVdZc1EwRkJPVUk3UVVGRFNEczdPenM3TzBGQlNVd3NUMEZCVHl4UFFVRlFMRWRCUVdsQ0xHTkJRV3BDT3pzN096czdPenM3UVVOcVNrRTdRVUZEUVR0SlFVTk5MRmM3T3pzN096czdhVU5CUTA4c1J5eEZRVUZKTzBGQlExUXNaMEpCUVVrc1RVRkJUU3hEUVVGV08wRkJRMEVzWjBKQlFVa3NhMEpCUVVvN08wRkJSVUVzYTBKQlFVMHNTVUZCU1N4UFFVRktMRU5CUVZrc1IwRkJXaXhGUVVGcFFpeEZRVUZxUWl4RlFVTkVMRTlCUkVNc1EwRkRUeXhIUVVSUUxFVkJRMWtzUlVGRVdpeEZRVVZFTEU5QlJrTXNRMEZGVHl4SFFVWlFMRVZCUlZrc1JVRkdXaXhGUVVkRUxFbEJTRU1zUlVGQlRqczdRVUZMUVN4blFrRkJTU3hYUVVGWExFbEJRV1k3UVVGRFFTeHBRa0ZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEVsQlFVa3NUVUZCU2l4SFFVRmhMRU5CUVdwRExFVkJRVzlETEVkQlFYQkRMRVZCUVhsRE8wRkJRM0pETEc5Q1FVRkpMRWxCUVVrc1EwRkJTaXhMUVVGVkxFbEJRVWtzU1VGQlNTeERRVUZTTEVOQlFXUXNSVUZEU1N4WFFVRlhMRXRCUVZnN1FVRkRVRHRCUVVORUxHZENRVUZKTEZGQlFVb3NSVUZEU1N4UFFVRlBMRXRCUVZBN08wRkJSVW9zYVVKQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzUzBGQlN5eERRVUZ5UWl4RlFVRjNRaXhIUVVGNFFqdEJRVU5KTEhOQ1FVRk5MRTFCUVUwc1UwRkJVeXhKUVVGSkxGTkJRVW9zUTBGQll5eEpRVUZKTEVOQlFXeENMRVZCUVhGQ0xFTkJRWEpDTEVOQlFWUXNTMEZCY1VNc1MwRkJTeXhEUVVFeFF5eERRVUZhTzBGQlJFb3NZVUZGUVN4WlFVRmhMRTFCUVUwc1JVRkJVQ3hIUVVGaExFVkJRWHBDT3p0QlFVVkJMR2RDUVVGTExHRkJRV0VzUlVGQlpDeEpRVUZ6UWl4aFFVRmhMRVZCUVhaRExFVkJRMGtzV1VGQldTeERRVUZhTzBGQlEwb3NaMEpCUVVrc1lVRkJZU3hUUVVGVExFbEJRVWtzVTBGQlNpeERRVUZqTEVOQlFXUXNSVUZCYVVJc1JVRkJha0lzUTBGQlZDeERRVUZxUWl4RlFVTkpMRTlCUVU4c1MwRkJVRHM3UVVGRlNpeHJRa0ZCVFN4RFFVRk9PMEZCUTBFc2FVSkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1MwRkJTeXhGUVVGeVFpeEZRVUY1UWl4SFFVRjZRanRCUVVOSkxITkNRVUZOTEUxQlFVMHNVMEZCVXl4SlFVRkpMRk5CUVVvc1EwRkJZeXhKUVVGSkxFTkJRV3hDTEVWQlFYRkNMRU5CUVhKQ0xFTkJRVlFzUzBGQmNVTXNTMEZCU3l4RFFVRXhReXhEUVVGYU8wRkJSRW9zWVVGRE9FUXNXVUZCWVN4TlFVRk5MRVZCUVZBc1IwRkJZU3hGUVVGNlFqczdRVUZGT1VRc1owSkJRVXNzWVVGQllTeEZRVUZrTEVsQlFYTkNMR0ZCUVdFc1JVRkJka01zUlVGRFNTeFpRVUZaTEVOQlFWbzdRVUZEU2l4blFrRkJTU3hoUVVGaExGTkJRVk1zU1VGQlNTeFRRVUZLTEVOQlFXTXNSVUZCWkN4RlFVRnJRaXhGUVVGc1FpeERRVUZVTEVOQlFXcENMRVZCUTBrc1QwRkJUeXhMUVVGUU96dEJRVVZLTEcxQ1FVRlBMRWxCUVZBN1FVRkRTRHM3T3pzN08wRkJSMHdzVDBGQlR5eFBRVUZRTEVkQlFXbENMRmRCUVdwQ096czdPenRCUXpGRFFUczdPenRCUVVOQk96czdPMEZCUTBFN096czdRVUZEUVRzN096czdPMEZCUlVFc1UwRkJVeXhuUWtGQlZDeERRVUV3UWl4clFrRkJNVUlzUlVGQk9FTXNXVUZCVFR0QlFVTm9SRHRCUVVOSUxFTkJSa1E3TzBGQlNVRXNTVUZCVFN4UFFVRlBMRk5CUVZBc1NVRkJUeXhIUVVGTE8wRkJRMlFzVVVGQlRTeFBRVUZQTERaQ1FVRmlPMEZCUTBFc1VVRkJUU3hsUVVGbExDdENRVUZ5UWp0QlFVTkJMRkZCUVUwc1YwRkJWeXc0UWtGQmFrSTdRVUZEUVN4UlFVRk5MRTlCUVU4c09FSkJRV0k3TzBGQlJVRXNVVUZCU1N4WFFVRlhMRTlCUVU4c1VVRkJkRUk3UVVGRFFTeFJRVUZKTEZsQlFWa3NVMEZCVXl4TlFVRlVMRU5CUVdkQ0xGTkJRV2hDTEVOQlFUQkNMRU5CUVRGQ0xFTkJRV2hDT3p0QlFVVkJMRkZCUVVrc1UwRkJVeXhUUVVGVExHZENRVUZVTEVOQlFUQkNMR2xDUVVFeFFpeERRVUZpTzBGQlEwRXNVVUZCU1N4VFFVRlRMRk5CUVZNc1kwRkJWQ3hEUVVGM1FpeE5RVUY0UWl4RFFVRmlPenRCUVVWQkxGTkJRVXNzVjBGQlREdEJRVU5CTEdsQ1FVRmhMRmRCUVdJN1FVRkRRU3hwUWtGQllTeFRRVUZpTzBGQlEwRXNhVUpCUVdFc1YwRkJZanRCUVVOQkxHbENRVUZoTEZWQlFXSTdRVUZEUVN4cFFrRkJZU3hWUVVGaU8wRkJRMEVzWVVGQlV5eFJRVUZVT3p0QlFVVkJMRk5CUVVzc1NVRkJTU3hKUVVGSkxFTkJRV0lzUlVGQlowSXNTVUZCU1N4UFFVRlBMRTFCUVROQ0xFVkJRVzFETEVkQlFXNURMRVZCUVhkRE8wRkJRM0JETEdWQlFVOHNRMEZCVUN4RlFVRlZMR2RDUVVGV0xFTkJRVEpDTEUxQlFUTkNMRVZCUVcxRExGbEJRVTA3UVVGRGNrTXNaMEpCUVVrc1UwRkJVeXhyUWtGQlZDeEZRVUZLTEVWQlFXMURPMEZCUXk5Q0xIVkNRVUZQTEZOQlFWQXNRMEZCYVVJc1RVRkJha0lzUTBGQmQwSXNWVUZCZUVJN1FVRkRRU3h2UWtGQlJ5eFRRVUZUTEdOQlFWUXNSVUZCU0N4RlFVRTJRanRCUVVONlFpeDVRa0ZCU3l4cFFrRkJURHRCUVVOSU8wRkJRMG83UVVGRFNpeFRRVkJFTzBGQlVVRXNXVUZCU1N4VFFVRlRMR3RDUVVGVUxFVkJRVW9zUlVGQmJVTTdRVUZETDBJc2JVSkJRVThzVTBGQlVDeERRVUZwUWl4TlFVRnFRaXhEUVVGM1FpeFZRVUY0UWp0QlFVTkJMR2RDUVVGSkxGTkJRVk1zWTBGQlZDeEZRVUZLTEVWQlFTdENPMEZCUXpOQ0xIRkNRVUZMTEdsQ1FVRk1PMEZCUTBnN1FVRkRTanRCUVVOS096dEJRVWRFTEZOQlFVc3NSMEZCVER0QlFVTkJMRk5CUVVzc1ZVRkJURHRCUVVOSUxFTkJlRU5FSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW9ablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJsS0hRc2JpeHlLWHRtZFc1amRHbHZiaUJ6S0c4c2RTbDdhV1lvSVc1YmIxMHBlMmxtS0NGMFcyOWRLWHQyWVhJZ1lUMTBlWEJsYjJZZ2NtVnhkV2x5WlQwOVhDSm1kVzVqZEdsdmJsd2lKaVp5WlhGMWFYSmxPMmxtS0NGMUppWmhLWEpsZEhWeWJpQmhLRzhzSVRBcE8ybG1LR2twY21WMGRYSnVJR2tvYnl3aE1DazdkbUZ5SUdZOWJtVjNJRVZ5Y205eUtGd2lRMkZ1Ym05MElHWnBibVFnYlc5a2RXeGxJQ2RjSWl0dksxd2lKMXdpS1R0MGFISnZkeUJtTG1OdlpHVTlYQ0pOVDBSVlRFVmZUazlVWDBaUFZVNUVYQ0lzWm4xMllYSWdiRDF1VzI5ZFBYdGxlSEJ2Y25Sek9udDlmVHQwVzI5ZFd6QmRMbU5oYkd3b2JDNWxlSEJ2Y25SekxHWjFibU4wYVc5dUtHVXBlM1poY2lCdVBYUmJiMTFiTVYxYlpWMDdjbVYwZFhKdUlITW9iajl1T21VcGZTeHNMR3d1Wlhod2IzSjBjeXhsTEhRc2JpeHlLWDF5WlhSMWNtNGdibHR2WFM1bGVIQnZjblJ6ZlhaaGNpQnBQWFI1Y0dWdlppQnlaWEYxYVhKbFBUMWNJbVoxYm1OMGFXOXVYQ0ltSm5KbGNYVnBjbVU3Wm05eUtIWmhjaUJ2UFRBN2J6eHlMbXhsYm1kMGFEdHZLeXNwY3loeVcyOWRLVHR5WlhSMWNtNGdjMzF5WlhSMWNtNGdaWDBwS0NraUxDSmpiR0Z6Y3lCR2IzSnRRMjl1ZEhKdmJHeGxjbnRjY2x4dUlDQWdJR0Z1YVcxaGRHVkdiM0p0S0NsN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUdacFpXeGtjeUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnk1dFlYUmxjbWxoYkMxcGJuQjFkQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHbHVaR1Y0SUQwZ01Ec2dhVzVrWlhnZ1BDQm1hV1ZzWkhNdWJHVnVaM1JvT3lCcGJtUmxlQ3NyS1NCN0lDQWdJQ0FnSUNBZ0lDQWdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBaV3hrYzF0cGJtUmxlRjB1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJoaGJtZGxKeXdnS0NrOVBudGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWFXVnNaSE5iYVc1a1pYaGRMblpoYkhWbElDRTlJRndpWENJcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXVnNaSE5iYVc1a1pYaGRMbU5zWVhOelRHbHpkQzVoWkdRb0oyaGhjeTEyWVd4MVpTY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV1ZzWkhOYmFXNWtaWGhkTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvSjJoaGN5MTJZV3gxWlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1pwWld4a2MxdHBibVJsZUYwdWRtRnNkV1VnSVQwZ1hDSmNJaWw3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXVnNaSE5iYVc1a1pYaGRMbU5zWVhOelRHbHpkQzVoWkdRb0oyaGhjeTEyWVd4MVpTY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlaV3h6Wlh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBaV3hrYzF0cGJtUmxlRjB1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2duYUdGekxYWmhiSFZsSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQmNjbHh1SUNBZ0lHeHZZV1JDZFhSMGIyNUJibWx0WVhSbEtDbDdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElIVnliRkJoY21GdElEMGdkMmx1Wkc5M0xteHZZMkYwYVc5dU8xeHlYRzRnSUNBZ0lDQWdJR3hsZENCd1lYSmhiV1YwWlhJZ1BTQjFjbXhRWVhKaGJTNXpaV0Z5WTJndWMzVmljM1J5YVc1bktERXBPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQmlkWFIwYjI0Z1BTQnVkV3hzT3lBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSEJoY21GdFpYUmxjaUE5UFNCY0lsd2lLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0oxZEhSdmJpQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZHpaVzVrSnlrN1hISmNiaUFnSUNBZ0lDQWdmV1ZzYzJWN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdKMWRIUnZiaUE5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2RoYkhSbGNpY3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnNaWFFnYkc5aFpHVnlJRDBnWkc5amRXMWxiblF1WjJWMFJXeGxiV1Z1ZEVKNVNXUW9KMnh2WVdSbGNpY3BPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQjJZV3gxWlNBOUlHSjFkSFJ2Ymk1blpYUkJkSFJ5YVdKMWRHVW9KM1poYkhWbEp5bGNjbHh1SUNBZ0lDQWdJQ0JpZFhSMGIyNHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQW9aU2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaWRYUjBiMjR1YzJWMFFYUjBjbWxpZFhSbEtDZDJZV3gxWlNjc0lDY25LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiRzloWkdWeUxuTjBlV3hsTG1ScGMzQnNZWGtnUFNCY0ltSnNiMk5yWENJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luVjBkRzl1TG5ObGRFRjBkSEpwWW5WMFpTZ25kbUZzZFdVbkxDQjJZV3gxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNiMkZrWlhJdWMzUjViR1V1WkdsemNHeGhlU0E5SUZ3aWJtOXVaVndpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG14dlkyRjBhVzl1TG1oeVpXWWdQU0JjSWk5c2FYTjBkWE5sY2k1b2RHMXNYQ0pjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnTVRVd01DazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOVhISmNibjFjY2x4dVhISmNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdSbTl5YlVOdmJuUnliMnhzWlhJN0lpd2lhVzF3YjNKMElIVnpaWEpEYjI1MGNtOXNiR1Z5SUdaeWIyMGdKeTR2VlhObGNrTnZiblJ5YjJ4c1pYSXVhbk1uTzF4eVhHNWNjbHh1WTJ4aGMzTWdSWFpsYm5SSVlXNWtiR1Z5ZTF4eVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tYdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuVnpaWElnUFNCdVpYY2dkWE5sY2tOdmJuUnliMnhzWlhJb0tUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtNWhiV1ZHYVdWc1pDQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZHVZVzFsSnlrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJXRnBiRVpwWld4a0lEMGdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oyVnRZV2xzSnlrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1amNHWkdhV1ZzWkNBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0NkamNHWW5LVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbkJvYjI1bFJtbGxiR1FnUFNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duY0dodmJtVW5LVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCaWRYUjBiMjVEYkdsamF5Z3BlMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQjFjbXhRWVhKaGJTQTlJSGRwYm1SdmR5NXNiMk5oZEdsdmJqdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2NHRnlZVzFsZEdWeUlEMGdkWEpzVUdGeVlXMHVjMlZoY21Ob0xuTjFZbk4wY21sdVp5Z3hLVHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdZblYwZEc5dUlDQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZHpaVzVrSnlrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0dKMWRIUnZiaUFoUFNCdWRXeHNJQ1ltSUhCaGNtRnRaWFJsY2lBOVBTQmNJbHdpS1h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWW5WMGRHOXVMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMk5zYVdOckp5d2dLR1VwUFQ1N0lDQWdJQ0FnSUNBZ0lDQWdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbExuTjBiM0JRY205d1lXZGhkR2x2YmlncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1luVjBkRzl1TG1Oc1lYTnpUR2x6ZEM1MllXeDFaUzVwYm1SbGVFOW1LQ2RrYVhOaFlteGxaQ2NwSUQwOUlDMHhLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MWMyVnlMbk5sZENoMGFHbHpMbTVoYldWR2FXVnNaQzUyWVd4MVpTd2dkR2hwY3k1bGJXRnBiRVpwWld4a0xuWmhiSFZsTENCMGFHbHpMbU53WmtacFpXeGtMblpoYkhWbExDQjBhR2x6TG5Cb2IyNWxSbWxsYkdRdWRtRnNkV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1pHVnNaWFJsUTJ4cFkyc29LWHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdaR1ZzWlhSbFFuUnVJQ0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KeTVzYVhOMExYVnpaWEluS1R0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnWTNWeWNtVnVkRVZzSUNBOUlHNTFiR3c3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR3hwYzNSSmRHVnRJQ0FnUFNCdWRXeHNPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGtaV3hsZEdWQ2RHNGdJVDBnYm5Wc2JDbDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlVKMGJpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lDaGxLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pTNTBZWEpuWlhRZ0ppWWdaUzUwWVhKblpYUXVZMnhoYzNOTWFYTjBMbU52Ym5SaGFXNXpLQ0FuWkdWc1pYUmxKeUFwSUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJGYkNBOUlHVXVkR0Z5WjJWME8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4cGMzUkpkR1Z0SUQwZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvWTNWeWNtVnVkRVZzTG1kbGRFRjBkSEpwWW5WMFpTZ25aR0YwWVMxcFpDY3BLUzV5WlcxdmRtVW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5WelpYSXVaR1ZzWlhSbEtHTjFjbkpsYm5SRmJDNW5aWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRhV1FuS1NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR1ZrYVhSRGJHbGpheWdwZTF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JsWkdsMFFuUnVJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25MbXhwYzNRdGRYTmxjaWNwTzF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JqZFhKeVpXNTBSV3dnUFNCdWRXeHNPMXh5WEc0Z0lDQWdJQ0FnSUZ4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsWkdsMFFuUnVJQ0U5SUc1MWJHd3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaV1JwZEVKMGJpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lDaGxLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pTNTBZWEpuWlhRZ0ppWWdaUzUwWVhKblpYUXVZMnhoYzNOTWFYTjBMbU52Ym5SaGFXNXpLQ2RsWkdsMEp5a3BlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjFjbkpsYm5SRmJDQTlJR1V1ZEdGeVoyVjBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExteHZZMkYwYVc5dUxtaHlaV1lnUFNCZ0x6OWxaR2wwVlhObGNqMGtlMk4xY25KbGJuUkZiQzVuWlhSQmRIUnlhV0oxZEdVb0oyUmhkR0V0YVdRbktYMWdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JoYkhSbGNrTnNhV05yS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJR3hsZENCellYWmxRblJ1SUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduWm05eWJTY3BPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQjFjbXhRWVhKaGJTQTlJSGRwYm1SdmR5NXNiMk5oZEdsdmJqdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2NHRnlZVzFsZEdWeUlEMGdkWEpzVUdGeVlXMHVjMlZoY21Ob0xuTjFZbk4wY21sdVp5Z3hLVHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdhV1FnUFNCd1lYSmhiV1YwWlhJdWMzQnNhWFFvSnowbktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSE5oZG1WQ2RHNGdJVDBnYm5Wc2JDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpZWFpsUW5SdUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z0tHVXBJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobExuUmhjbWRsZENBbUppQmxMblJoY21kbGRDNWpiR0Z6YzB4cGMzUXVZMjl1ZEdGcGJuTW9KMkZzZEdWeUp5a3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5WelpYSXVaV1JwZENoY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUmJNVjBzSUZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTVoYldWR2FXVnNaQzUyWVd4MVpTd2dYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXMWhhV3hHYVdWc1pDNTJZV3gxWlN3Z1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTNCbVJtbGxiR1F1ZG1Gc2RXVXNJRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQm9iMjVsUm1sbGJHUXVkbUZzZFdWY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2JXRnphMGx1Y0hWMGN5Z3BJSHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdZM0JtUm1sbGJHUWdQU0JrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDZ25ZM0JtSnlrN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUhCb2IyNWxSbWxsYkdRZ1BTQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnbmNHaHZibVVuS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIQm9iMjVsUm1sbGJHUWdJVDBnYm5Wc2JDQW1KaUJqY0daR2FXVnNaQ0FoUFNCdWRXeHNLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEJvYjI1bFJtbGxiR1F1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduYTJWNWNISmxjM01uTENBb1pTa2dQVDRnZXlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tIQm9iMjVsUm1sbGJHUXVkbUZzZFdVdWJHVnVaM1JvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXhPbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YUc5dVpVWnBaV3hrTG5aaGJIVmxJRDBnWENJb1hDSWdLeUJ3YUc5dVpVWnBaV3hrTG5aaGJIVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRE02WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCb2IyNWxSbWxsYkdRdWRtRnNkV1VnUFNCd2FHOXVaVVpwWld4a0xuWmhiSFZsSUNzZ1hDSXBJRndpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURrNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQm9iMjVsUm1sbGJHUXVkbUZzZFdVZ1BTQndhRzl1WlVacFpXeGtMblpoYkhWbElDc2dYQ0l0WENJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXhORHBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dodmJtVkdhV1ZzWkM1MllXeDFaU0E5SUhCb2IyNWxSbWxsYkdRdWRtRnNkV1V1YzNWaWMzUnlhVzVuS0RBc0lEa3BJQ3NnY0dodmJtVkdhV1ZzWkM1MllXeDFaUzVqYUdGeVFYUW9NVEFwSUNzZ0p5MG5JQ3NnY0dodmJtVkdhV1ZzWkM1MllXeDFaUzV6ZFdKemRISnBibWNvTVRFcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aUzVqYUdGeVEyOWtaU0ErSURRM0lDWW1JR1V1WTJoaGNrTnZaR1VnUENBMU9Da2dleUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVpXeHpaWHNnWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dVhISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTndaa1pwWld4a0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oydGxlWEJ5WlhOekp5d2dLR1VwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDQW9ZM0JtUm1sbGJHUXVkbUZzZFdVdWJHVnVaM1JvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXpPbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqY0daR2FXVnNaQzUyWVd4MVpTQTlJR053WmtacFpXeGtMblpoYkhWbElDc2dYQ0l1WENJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ056cGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM0JtUm1sbGJHUXVkbUZzZFdVZ1BTQmpjR1pHYVdWc1pDNTJZV3gxWlNBcklGd2lMbHdpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenNnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJREV4T2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamNHWkdhV1ZzWkM1MllXeDFaU0E5SUdOd1prWnBaV3hrTG5aaGJIVmxJQ3NnWENJdFhDSTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck95QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOUlGeHlYRzU5WEhKY2JseHlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRVYyWlc1MFNHRnVaR3hsY2pzaUxDSnBiWEJ2Y25RZ1kzQm1WbUZzYVdSaGRHVWdabkp2YlNBbkxpNHZhR1ZzY0dWeUwwTndabFpoYkdsa1lYUmxMbXB6Snp0Y2NseHVYSEpjYm1Oc1lYTnpJRVp2Y20xRGIyNTBjbTlzYkdWeWUxeHlYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LWHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbTVoYldWR2FXVnNaQ0FnSUNBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0NkdVlXMWxKeWs3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYldGcGJFWnBaV3hrSUNBZ1BTQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnblpXMWhhV3duS1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1Od1prWnBaV3hrSUNBZ0lDQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZGpjR1luS1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5Cb2IyNWxSbWxsYkdRZ0lDQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZHdhRzl1WlNjcE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0pOWlhOellXZGxJRDBnYm5Wc2JEdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtVnljbTl5UTI5MWJuUWdJQ0E5SURBN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdkbUZzYVdSaGRHVkdhV3hzUm1sbGJHUnpLQ2w3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR2x1Y0hWMGN5QTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTV0WVhSbGNtbGhiQzFwYm5CMWRDY3BPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQmpiM1Z1ZENBOUlEQTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dhVzV3ZFhSekxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGJuQjFkSE5iYVYwdWRtRnNkV1V1YkdWdVozUm9JRDRnTUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjkxYm5Rckt6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQWdJQ0FnSUNBZ0lDQWdJRnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHTnZkVzUwSUQwOUlHbHVjSFYwY3k1c1pXNW5kR2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdmV1ZzYzJWN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2RtRnNhV1JoZEdWR2FXVnNaSE1vS1h0Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdFlXbHNVbVZuWlhnZ1BTQXZYbHRoTFhwQkxWb3dMVGt1SVNNa0pTWW5LaXN2UFQ5ZVgyQjdmSDErTFYwclFGdGhMWHBCTFZvd0xUbGRLRDg2VzJFdGVrRXRXakF0T1MxZGV6QXNOakY5VzJFdGVrRXRXakF0T1YwcFB5Zy9PbHhjTGx0aExYcEJMVm93TFRsZEtEODZXMkV0ZWtFdFdqQXRPUzFkZXpBc05qRjlXMkV0ZWtFdFdqQXRPVjBwUHlrcUpDODdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHTndabFJsYzNRZ1BTQnVaWGNnWTNCbVZtRnNhV1JoZEdVb0tUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV1WVcxbFJtbGxiR1F1ZG1Gc2RXVXViR1Z1WjNSb0lEd2dNeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtNWhiV1ZHYVdWc1pDNWpiR0Z6YzB4cGMzUXVZV1JrS0NkbGNuSnZjaWNwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnljbTl5VFdWemMyRm5aU0E5SUZ3aVEyRnRjRzhnWkdWMlpTQmpiMjUwWlhJZ015QmpZWEpoWTNSbGNtVnpJRzkxSUcxaGFYTmNJanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oyNWhiV1V0WlhKeWIzSW5LUzVwYm01bGNsUmxlSFFnUFNCMGFHbHpMbVZ5Y205eVRXVnpjMkZuWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxjbkp2Y2tOdmRXNTBLeXM3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXVZVzFsUm1sbGJHUXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25aWEp5YjNJbktUc2dJQ0FnSUNBZ0lDQWdJQ0JjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGNuSnZja052ZFc1MExTMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0NkdVlXMWxMV1Z5Y205eUp5a3VhVzV1WlhKVVpYaDBJRDBnWENKY0lqdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR053WmxSbGMzUXVkbUZzYVdSaGRHVW9kR2hwY3k1amNHWkdhV1ZzWkM1MllXeDFaU2tnUFQwZ1ptRnNjMlVwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpjR1pHYVdWc1pDNWpiR0Z6YzB4cGMzUXVZV1JrS0NkbGNuSnZjaWNwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnljbTl5VFdWemMyRm5aU0E5SUZ3aVJYTjBaU0JEVUVZZ2JzT2pieUREcVNCMnc2RnNhV1J2WENJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2RqY0dZdFpYSnliM0luS1M1cGJtNWxjbFJsZUhRZ1BTQjBhR2x6TG1WeWNtOXlUV1Z6YzJGblpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNrTnZkVzUwS3lzN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqY0daR2FXVnNaQzVqYkdGemMweHBjM1F1Y21WdGIzWmxLQ2RsY25KdmNpY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXlRMjkxYm5RdExUc2dJQ0FnSUNBZ0lDQWdJQ0JjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oyTndaaTFsY25KdmNpY3BMbWx1Ym1WeVZHVjRkQ0E5SUZ3aVhDSTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWxiV0ZwYkVacFpXeGtMblpoYkhWbExtMWhkR05vS0cxaGFXeFNaV2RsZUNrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYldGcGJFWnBaV3hrTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMlZ5Y205eUp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlhKeWIzSk5aWE56WVdkbElEMGdYQ0pGYzNSbElFVnRZV2xzSUc3RG8yOGd3NmtnZHNPaGJHbGtiMXdpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDZ25aVzFoYVd3dFpYSnliM0luS1M1cGJtNWxjbFJsZUhRZ1BTQjBhR2x6TG1WeWNtOXlUV1Z6YzJGblpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNrTnZkVzUwS3lzN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYldGcGJFWnBaV3hrTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvSjJWeWNtOXlKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0pEYjNWdWRDMHRPeUFnSUNBZ0lDQWdJQ0FnSUZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDZ25aVzFoYVd3dFpYSnliM0luS1M1cGJtNWxjbFJsZUhRZ1BTQmNJbHdpTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV3YUc5dVpVWnBaV3hrTG5aaGJIVmxJRDA5SUZ3aVhDSXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2FHOXVaVVpwWld4a0xtTnNZWE56VEdsemRDNWhaR1FvSjJWeWNtOXlKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0pOWlhOellXZGxJRDBnWENKRmMzUmxJRlJsYkdWbWIyNWxJRzdEbzI4Z3c2a2dkc09oYkdsa2Ixd2lPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnbmNHaHZibVV0WlhKeWIzSW5LUzVwYm01bGNsUmxlSFFnUFNCMGFHbHpMbVZ5Y205eVRXVnpjMkZuWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxjbkp2Y2tOdmRXNTBLeXM3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdhRzl1WlVacFpXeGtMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9KMlZ5Y205eUp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlhKeWIzSkRiM1Z1ZEMwdE95QWdJQ0FnSUNBZ0lDQWdJRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnbmNHaHZibVV0WlhKeWIzSW5LUzVwYm01bGNsUmxlSFFnUFNCY0lsd2lPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WlhKeWIzSkRiM1Z1ZENBK0lEQXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQWdJRnh5WEc0Z0lDQWdaV1JwZEVadmNtMG9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJSFZ5YkZCaGNtRnRJRDBnZDJsdVpHOTNMbXh2WTJGMGFXOXVPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQndZWEpoYldWMFpYSWdQU0IxY214UVlYSmhiUzV6WldGeVkyZ3VjM1ZpYzNSeWFXNW5LREVwTzF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JwWkNBOUlHNTFiR3c3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR0oxZEhSdmJpQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZHpaVzVrSnlrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hCaGNtRnRaWFJsY2lBaFBTQmNJbHdpS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFZ6WlhKTWFYTjBJRDBnU2xOUFRpNXdZWEp6WlNoc2IyTmhiRk4wYjNKaFoyVXVaMlYwU1hSbGJTZ25kWE5sY25NbktTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtJRDBnY0dGeVlXMWxkR1Z5TG5Od2JHbDBLQ2M5SnlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSFZ6WlhKTWFYTjBMbXhsYm1kMGFEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dGeWMyVkpiblFvYVdSYk1WMHBJRDA5SUhWelpYSk1hWE4wVzJsZExtbGtLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dVlXMWxSbWxsYkdRdWRtRnNkV1VnUFNCMWMyVnlUR2x6ZEZ0cFhTNXVZVzFsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXMWhhV3hHYVdWc1pDNTJZV3gxWlNBOUlIVnpaWEpNYVhOMFcybGRMbVZ0WVdsc08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0JtUm1sbGJHUXVkbUZzZFdVZ1BTQjFjMlZ5VEdsemRGdHBYUzVqY0dZN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdhRzl1WlVacFpXeGtMblpoYkhWbElEMGdkWE5sY2t4cGMzUmJhVjB1Y0dodmJtVTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJtRnRaVVpwWld4a0xtTnNZWE56VEdsemRDNWhaR1FvSjJoaGN5MTJZV3gxWlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzFoYVd4R2FXVnNaQzVqYkdGemMweHBjM1F1WVdSa0tDZG9ZWE10ZG1Gc2RXVW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Od1prWnBaV3hrTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMmhoY3kxMllXeDFaU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHaHZibVZHYVdWc1pDNWpiR0Z6YzB4cGMzUXVZV1JrS0Nkb1lYTXRkbUZzZFdVbktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZblYwZEc5dUxuTmxkRUYwZEhKcFluVjBaU2hjSW5aaGJIVmxYQ0lzSUZ3aVFXeDBaWEpoY2x3aUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWRYUjBiMjR1WTJ4aGMzTk1hWE4wTG1Ga1pDZ25ZV3gwWlhJbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWRYUjBiMjR1YzJWMFFYUjBjbWxpZFhSbEtDZHBaQ2NzSUNkaGJIUmxjaWNwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjlYSEpjYmlBZ1hISmNibjFjY2x4dVhISmNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdSbTl5YlVOdmJuUnliMnhzWlhJN0lpd2lhVzF3YjNKMElIWmhiR2xrWVhScGIyNURiMjUwY205c2JHVnlJR1p5YjIwZ1hDSXVMMFp2Y20xRGIyNTBjbTlzYkdWeUxtcHpYQ0k3WEhKY2JseHlYRzVjY2x4dVkyeGhjM01nVlhObGNrTnZiblJ5YjJ4c1pYSjdYSEpjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YVdRN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1dVlXMWxPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaVzFoYVd3N1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1amNHWTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdhRzl1WlR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnpaWFFvYm1GdFpTd2daVzFoYVd3c0lHTndaaXdnY0dodmJtVXBlMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQmhjbkpWYzJWeUlEMGdXMTA3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJRzVsZDFWelpYSWdQU0I3ZlR0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnYVdRZ1BTQXhPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQjJZV3hwWkdGMFpVWnBaV3hrY3lBOUlHNWxkeUIyWVd4cFpHRjBhVzl1UTI5dWRISnZiR3hsY2lncE8xeHlYRzRnSUNBZ0lDQWdJRnh5WEc0Z0lDQWdJQ0FnSUZ4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hzYjJOaGJGTjBiM0poWjJVdVoyVjBTWFJsYlNnbmRYTmxjbk1uS1NBaFBTQnVkV3hzS1h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWVhKeVZYTmxjaUE5SUVwVFQwNHVjR0Z5YzJVb2JHOWpZV3hUZEc5eVlXZGxMbWRsZEVsMFpXMG9KM1Z6WlhKekp5a3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnBaaUFvYkc5allXeFRkRzl5WVdkbExtZGxkRWwwWlcwb1hDSnNZWE4wU1dSY0lpa2dJVDBnYm5Wc2JDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaQ0E5SUhCaGNuTmxTVzUwS0d4dlkyRnNVM1J2Y21GblpTNW5aWFJKZEdWdEtGd2liR0Z6ZEVsa1hDSXBLU0FySURFN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1sa0lDQWdJRDBnYVdRckt6dGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtNWhiV1VnSUQwZ2JtRnRaVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ0WVdsc0lEMGdaVzFoYVd3N1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1amNHWWdJQ0E5SUdOd1pqdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuQm9iMjVsSUQwZ2NHaHZibVU3WEhKY2JseHlYRzRnSUNBZ0lDQWdJRzVsZDFWelpYSWdQU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRndpYVdSY0lpQWdJRG9nZEdocGN5NXBaQ3dnWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRndpYm1GdFpWd2lJRG9nZEdocGN5NXVZVzFsTENCY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWENKamNHWmNJaUFnT2lCMGFHbHpMbU53Wml3Z1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aWNHaHZibVZjSWpvZ2RHaHBjeTV3YUc5dVpTd2dYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2laVzFoYVd4Y0lqb2dkR2hwY3k1bGJXRnBiQ0JjY2x4dUlDQWdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9kbUZzYVdSaGRHVkdhV1ZzWkhNdWRtRnNhV1JoZEdWR2FXVnNaSE1vS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNuSlZjMlZ5TG5CMWMyZ29ibVYzVlhObGNpazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZZMkZzVTNSdmNtRm5aUzV6WlhSSmRHVnRLQ2QxYzJWeWN5Y3NJRXBUVDA0dWMzUnlhVzVuYVdaNUtHRnljbFZ6WlhJcEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHOWpZV3hUZEc5eVlXZGxMbk5sZEVsMFpXMG9KMnhoYzNSSlpDY3NJSFJvYVhNdWFXUXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQm5aWFFvS1h0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnZEdWdGNHeGhkR1VnUFNCY0lsd2lPMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFZ6WlhKTWFYTjBJRDBnU2xOUFRpNXdZWEp6WlNoc2IyTmhiRk4wYjNKaFoyVXVaMlYwU1hSbGJTZ25kWE5sY25NbktTazdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkR1Z0Y0ZWelpYSk1hWE4wSUQwZ1NsTlBUaTV3WVhKelpTaHNiMk5oYkZOMGIzSmhaMlV1WjJWMFNYUmxiU2duZEdWdGNGVnpaWEp6SnlrcE8xeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnpaWEpNYVhOMFJXd2dQU0JrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDZ25iR2x6ZEMxMWMyVnlKeWs3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSFZ6WlhKTWFYTjBSV3dnSVQwZ2JuVnNiQ0FtSmlCMWMyVnlUR2x6ZENBaFBTQnVkV3hzS1h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZFhObGNreHBjM1JGYkM1cGJtNWxja2hVVFV3Z1BTQW5KenRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhWelpYSk1hWE4wTG1admNrVmhZMmdvS0dWc0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiR2x6ZEVsMFpXMGdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZHNhU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHbHpkRWwwWlcwdVkyeGhjM05NYVhOMExtRmtaQ2duYkdsemRDMTFjMlZ5TFdsMFpXMG5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4cGMzUkpkR1Z0TG5ObGRFRjBkSEpwWW5WMFpTZ25hV1FuTENCbGJDNXBaQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGJYQnNZWFJsSUQwZ1lEeGthWFlnWTJ4aGMzTTlYQ0oxYzJWeUxXNWhiV1V0WTI5dWRHVnVkRndpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOd1lXNGdZMnhoYzNNOVhDSnNhWE4wTFhSbGVIUmNJaUJwWkQxY0luVnpaWEl0Ym1GdFpWd2lQaVI3Wld3dWJtRnRaWDBnTFNBa2UyVnNMbU53Wm4wOEwzTndZVzQrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpQVndpZFhObGNpMW1kV3hzTFdOdmJuUmxiblJjSWo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSjFjMlZ5TFdsdVptOWNJajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGMzQmhiaUJqYkdGemN6MWNJbXhwYzNRdGRHVjRkRndpSUdsa1BWd2lkWE5sY2kxbGJXRnBiRndpUGp4emRISnZibWMrUlcxaGFXdzZQQzl6ZEhKdmJtYytJQ1I3Wld3dVpXMWhhV3g5UEM5emNHRnVQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4emNHRnVJR05zWVhOelBWd2liR2x6ZEMxMFpYaDBYQ0lnYVdROVhDSjFjMlZ5TFhCb2IyNWxYQ0krUEhOMGNtOXVaejVVWld3NlBDOXpkSEp2Ym1jK0lDUjdaV3d1Y0dodmJtVjlQQzl6Y0dGdVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aWRYTmxjaTFoWTNScGIyNWNJajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFluVjBkRzl1SUhSNWNHVTlYQ0ppZFhSMGIyNWNJaUJqYkdGemN6MWNJbUZqZEdsdmJpMWlkRzRnWldScGRDQnBZMjl1TFhCbGJtTnBiRndpSUdSaGRHRXRhV1E5Skh0bGJDNXBaSDBnYVdROVhDSmxaR2wwWENJK1BDOWlkWFIwYjI0K1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR0oxZEhSdmJpQjBlWEJsUFZ3aVluVjBkRzl1WENJZ1kyeGhjM005WENKaFkzUnBiMjR0WW5SdUlHUmxiR1YwWlNCcFkyOXVMV05oYm1ObGJDMWphWEpqYkdWY0lpQmtZWFJoTFdsa1BTUjdaV3d1YVdSOVBqd3ZZblYwZEc5dVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUG1BN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNhWE4wU1hSbGJTNXBibTVsY2toVVRVd2dQU0IwWlcxd2JHRjBaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWelpYSk1hWE4wUld3dVlYQndaVzVrUTJocGJHUW9iR2x6ZEVsMFpXMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNCOUlGeHlYRzRnSUNBZ0lDQWdJR2xtSUNoMWMyVnlUR2x6ZEVWc0lDRTlJRzUxYkd3Z0ppWWdkR1Z0Y0ZWelpYSk1hWE4wSUNFOUlHNTFiR3dnSmlZZ2RYTmxja3hwYzNRZ0lUMGdiblZzYkNsN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDFjMlZ5VEdsemRDQTlQU0J1ZFd4c0lIeDhJSFZ6WlhKTWFYTjBMbXhsYm1kMGFDQTlQU0F3S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjMlZ5VEdsemRFVnNMbWx1Ym1WeVNGUk5UQ0E5SUNjbk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Z0Y0ZWelpYSk1hWE4wTG1admNrVmhZMmdvS0dWc0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUd4cGMzUkpkR1Z0SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duYkdrbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FYTjBTWFJsYlM1amJHRnpjMHhwYzNRdVlXUmtLQ2RzYVhOMExYVnpaWEl0YVhSbGJTY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHBjM1JKZEdWdExuTmxkRUYwZEhKcFluVjBaU2duYVdRbkxDQmxiQzVwWkNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdWdGNHeGhkR1VnUFNCZ1BHUnBkaUJqYkdGemN6MWNJblZ6WlhJdGJtRnRaUzFqYjI1MFpXNTBYQ0krWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BITndZVzRnWTJ4aGMzTTlYQ0pzYVhOMExYUmxlSFJjSWlCcFpEMWNJblZ6WlhJdGJtRnRaVndpUGlSN1pXd3VibUZ0WlgwZ0xTQWtlMlZzTG1Od1puMDhMM053WVc0K1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM005WENKMWMyVnlMV1oxYkd3dFkyOXVkR1Z1ZEZ3aVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh6Y0dGdUlHTnNZWE56UFZ3aWJHbHpkQzEwWlhoMFhDSWdhV1E5WENKMWMyVnlMV1Z0WVdsc1hDSStSVzFoYVd3NklDUjdaV3d1WlcxaGFXeDlQQzl6Y0dGdVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh6Y0dGdUlHTnNZWE56UFZ3aWJHbHpkQzEwWlhoMFhDSWdhV1E5WENKMWMyVnlMWEJvYjI1bFhDSStWR1ZzT2lBa2UyVnNMbkJvYjI1bGZUd3ZjM0JoYmo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbUE3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR2x6ZEVsMFpXMHVhVzV1WlhKSVZFMU1JRDBnZEdWdGNHeGhkR1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sY2t4cGMzUkZiQzVoY0hCbGJtUkRhR2xzWkNoc2FYTjBTWFJsYlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLU0E3SUNBZ0lDQWdJQ0FnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lGeHlYRzRnSUNBZ0lDQWdJRnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhCeWIyMXBjMlZIWlhRb0tYdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQjFjMlZ5VEdsemRDQTlJRXBUVDA0dWNHRnljMlVvYkc5allXeFRkRzl5WVdkbExtZGxkRWwwWlcwb0ozVnpaWEp6SnlrcE8xeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnliQ0E5SUZ3aWFIUjBjSE02THk5d2NtbDJZWFJsTFRJeFpUaGtaUzF5WVdaaFpXeHNkV05wYnk1aGNHbGhjbmt0Ylc5amF5NWpiMjB2ZFhObGNuTmNJanRjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0hWelpYSk1hWE4wSUQwOUlHNTFiR3dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWm1WMFkyZ29kWEpzTENCN0lHaGxZV1JsY25NNklIc2dYQ0pEYjI1MFpXNTBMVlI1Y0dWY0lqb2dYQ0poY0hCc2FXTmhkR2x2Ymk5cWMyOXVPeUJqYUdGeWMyVjBQWFYwWmkwNFhDSWdmU0I5S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F1ZEdobGJpaHlaWE1nUFQ0Z2NtVnpMbXB6YjI0b0tTbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0xuUm9aVzRvY21WemNHOXVjMlVnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiRzlqWVd4VGRHOXlZV2RsTG5ObGRFbDBaVzBvSjNSbGJYQlZjMlZ5Y3ljc0lFcFRUMDR1YzNSeWFXNW5hV1o1S0hKbGMzQnZibk5sS1NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUM1allYUmphQ2hsY25JZ1BUNGdleUFnSUNBZ0lDQWdJQ0FnSUNBZ0lGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvWENKemIzSnllU3dnZEdobGNtVWdZWEpsSUc1dklISmxjM1ZzZEhNZ1ptOXlJSGx2ZFhJZ2MyVmhjbU5vWENJcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCa1pXeGxkR1VvYVhSbGJVbGtLWHRjY2x4dUlDQWdJQ0FnSUNCamIyNXpkQ0IxYzJWeVRHbHpkQ0E5SUVwVFQwNHVjR0Z5YzJVb2JHOWpZV3hUZEc5eVlXZGxMbWRsZEVsMFpXMG9KM1Z6WlhKekp5a3BPMXh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RYTmxja3hwYzNRdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvY0dGeWMyVkpiblFvYVhSbGJVbGtLU0E5UFNCMWMyVnlUR2x6ZEZ0cFhTNXBaQ2w3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVnlUR2x6ZEM1emNHeHBZMlVvYVN3Z01TazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdJQ0FnSUNBZ0lDQWdJQ0JjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdiRzlqWVd4VGRHOXlZV2RsTG5ObGRFbDBaVzBvSjNWelpYSnpKeXdnU2xOUFRpNXpkSEpwYm1kcFpua29kWE5sY2t4cGMzUXBLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCbFpHbDBLR2wwWlcxSlpDd2dibUZ0WlN3Z1pXMWhhV3dzSUdOd1ppd2djR2h2Ym1VcGUxeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnpaWEpNYVhOMElEMGdTbE5QVGk1d1lYSnpaU2hzYjJOaGJGTjBiM0poWjJVdVoyVjBTWFJsYlNnbmRYTmxjbk1uS1NrN1hISmNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0IxYzJWeVRHbHpkQzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR0Z5YzJWSmJuUW9hWFJsYlVsa0tTQTlQU0IxYzJWeVRHbHpkRnRwWFM1cFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObGNreHBjM1JiYVYwZ1BTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hDSnBaRndpT2lCMWMyVnlUR2x6ZEZ0cFhTNXBaQ3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJbTVoYldWY0lqb2dibUZ0WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSW1Od1psd2lPaUJqY0dZc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKd2FHOXVaVndpT2lCd2FHOXVaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJbVZ0WVdsc1hDSTZJR1Z0WVdsc0lGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJQ0FnSUNBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ2ZTQWdYSEpjYmlBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ2JHOWpZV3hUZEc5eVlXZGxMbk5sZEVsMFpXMG9KM1Z6WlhKekp5d2dTbE5QVGk1emRISnBibWRwWm5rb2RYTmxja3hwYzNRcEtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JuMWNjbHh1WEhKY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ZYTmxja052Ym5SeWIyeHNaWEk3SWl3aUx5OGdRM0psWVhSbFpDQmllU0JVYjIxbElGWnBiR1ZzWVZ4eVhHNHZMeUIwYjIxbExuWnBiR1ZzWVVCbmJXRnBiQzVqYjIxY2NseHVZMnhoYzNNZ1ZtRnNhV1JoZEdWRGNHWjdYSEpjYmlBZ0lDQjJZV3hwWkdGMFpTaGpjR1lwZTF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0J6ZFcwZ1BTQXdPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQnlaVzFoYVc1a1pYSTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHTndaaUE5SUdOd1ppNXlaWEJzWVdObEtDY3VKeXdnSnljcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUM1eVpYQnNZV05sS0NjdUp5d2dKeWNwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQ2N0Snl3Z0p5Y3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDNTBjbWx0S0NrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUd4bGRDQmhiR3hGY1hWaGJDQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JqY0dZdWJHVnVaM1JvSUMwZ01Uc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpjR1piYVYwZ0lUMGdZM0JtVzJrZ0t5QXhYU2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGc2JFVnhkV0ZzSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR2xtSUNoaGJHeEZjWFZoYkNsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNVHNnYVNBOFBTQTVPeUJwS3lzcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOMWJTQTlJSE4xYlNBcklIQmhjbk5sU1c1MEtHTndaaTV6ZFdKemRISnBibWNvYVNBdElERXNJR2twS1NBcUlDZ3hNU0F0SUdrcE8xeHlYRzRnSUNBZ0lDQWdJSEpsYldGcGJtUmxjaUE5SUNoemRXMGdLaUF4TUNrZ0pTQXhNVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0NoeVpXMWhhVzVrWlhJZ1BUMGdNVEFwSUh4OElDaHlaVzFoYVc1a1pYSWdQVDBnTVRFcEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXMWhhVzVrWlhJZ1BTQXdPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaVzFoYVc1a1pYSWdJVDBnY0dGeWMyVkpiblFvWTNCbUxuTjFZbk4wY21sdVp5ZzVMQ0F4TUNrcEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lITjFiU0E5SURBN1hISmNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURFN0lHa2dQRDBnTVRBN0lHa3JLeWxjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjM1Z0SUQwZ2MzVnRJQ3NnY0dGeWMyVkpiblFvWTNCbUxuTjFZbk4wY21sdVp5aHBJQzBnTVN3Z2FTa3BJQ29nS0RFeUlDMGdhU2s3SUhKbGJXRnBibVJsY2lBOUlDaHpkVzBnS2lBeE1Da2dKU0F4TVR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDaHlaVzFoYVc1a1pYSWdQVDBnTVRBcElIeDhJQ2h5WlcxaGFXNWtaWElnUFQwZ01URXBLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaVzFoYVc1a1pYSWdQU0F3TzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h5WlcxaGFXNWtaWElnSVQwZ2NHRnljMlZKYm5Rb1kzQm1Mbk4xWW5OMGNtbHVaeWd4TUN3Z01URXBLU2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2NseHVJQ0FnSUgxY2NseHVmVnh5WEc1Y2NseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQldZV3hwWkdGMFpVTndaanRjY2x4dVhISmNiaUlzSW1sdGNHOXlkQ0IxYzJWeVEyOXVkSEp2Ykd4bGNpQm1jbTl0SUZ3aUxpOWpiMjUwY205c2JHVnlMMVZ6WlhKRGIyNTBjbTlzYkdWeUxtcHpYQ0pjY2x4dWFXMXdiM0owSUdWMlpXNTBRMjl1ZEhKdmJHeGxjaUJtY205dElGd2lMaTlqYjI1MGNtOXNiR1Z5TDBWMlpXNTBRMjl1ZEhKdmJHeGxjaTVxYzF3aVhISmNibWx0Y0c5eWRDQm1iM0p0UTI5dWRISnZiR3hsY2lCbWNtOXRJRndpTGk5amIyNTBjbTlzYkdWeUwwWnZjbTFEYjI1MGNtOXNiR1Z5TG1welhDSmNjbHh1YVcxd2IzSjBJR1p2Y20xQmJtbHRZWFJwYjI0Z1puSnZiU0JjSWk0dlkyOXRjRzl1Wlc1MGN5OUdiM0p0UVc1cGJXRjBhVzl1TG1welhDSmNjbHh1WEhKY2JtUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSkVUMDFEYjI1MFpXNTBURzloWkdWa1hDSXNJQ2dwSUQwK0lIdGNjbHh1SUNBZ0lHbHVhWFFvS1R0Y2NseHVmU2s3WEhKY2JseHlYRzVqYjI1emRDQnBibWwwSUQwZ0tDa2dQVDU3WEhKY2JpQWdJQ0JqYjI1emRDQm1iM0p0SUQwZ2JtVjNJR1p2Y20xQmJtbHRZWFJwYjI0b0tUdGNjbHh1SUNBZ0lHTnZibk4wSUdWMlpXNTBTR0Z1Wkd4bGNpQTlJRzVsZHlCbGRtVnVkRU52Ym5SeWIyeHNaWElvS1R0Y2NseHVJQ0FnSUdOdmJuTjBJR1p2Y20xR2FXeHNJRDBnYm1WM0lHWnZjbTFEYjI1MGNtOXNiR1Z5S0NrN1hISmNiaUFnSUNCamIyNXpkQ0IxYzJWeUlEMGdibVYzSUhWelpYSkRiMjUwY205c2JHVnlLQ2s3WEhKY2JseHlYRzRnSUNBZ2JHVjBJSFZ5YkZCaGNtRnRJRDBnZDJsdVpHOTNMbXh2WTJGMGFXOXVPMXh5WEc0Z0lDQWdiR1YwSUhCaGNtRnRaWFJsY2lBOUlIVnliRkJoY21GdExuTmxZWEpqYUM1emRXSnpkSEpwYm1jb01TazdYSEpjYmlBZ0lDQmNjbHh1SUNBZ0lHeGxkQ0JwYm5CMWRITWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLQ2N1YldGMFpYSnBZV3d0YVc1d2RYUW5LVHRjY2x4dUlDQWdJR3hsZENCaWRYUjBiMjRnUFNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duYzJWdVpDY3BPMXh5WEc0Z0lDQWdYSEpjYmlBZ0lDQm1iM0p0TG1GdWFXMWhkR1ZHYjNKdEtDazdJQ0FnSUNBZ0lDQWdJRnh5WEc0Z0lDQWdaWFpsYm5SSVlXNWtiR1Z5TG1SbGJHVjBaVU5zYVdOcktDazdYSEpjYmlBZ0lDQmxkbVZ1ZEVoaGJtUnNaWEl1WldScGRFTnNhV05yS0NrN1hISmNiaUFnSUNCbGRtVnVkRWhoYm1Sc1pYSXVZblYwZEc5dVEyeHBZMnNvS1R0Y2NseHVJQ0FnSUdWMlpXNTBTR0Z1Wkd4bGNpNWhiSFJsY2tOc2FXTnJLQ2s3WEhKY2JpQWdJQ0JsZG1WdWRFaGhibVJzWlhJdWJXRnphMGx1Y0hWMGN5Z3BPMXh5WEc0Z0lDQWdabTl5YlVacGJHd3VaV1JwZEVadmNtMG9LVHRjY2x4dUlDQWdJRnh5WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JwYm5CMWRITXViR1Z1WjNSb095QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBibkIxZEhOYmFWMHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpaGNJbUpzZFhKY0lpd2dLQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9abTl5YlVacGJHd3VkbUZzYVdSaGRHVkdhV3hzUm1sbGJHUnpLQ2twSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSjFkSFJ2Ymk1amJHRnpjMHhwYzNRdWNtVnRiM1psS0Nka2FYTmhZbXhsWkNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lvWm05eWJVWnBiR3d1ZG1Gc2FXUmhkR1ZHYVdWc1pITW9LU2w3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5YlM1c2IyRmtRblYwZEc5dVFXNXBiV0YwWlNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJRnh5WEc0Z0lDQWdJQ0FnSUgwcFhISmNiaUFnSUNBZ0lDQWdhV1lnS0dadmNtMUdhV3hzTG5aaGJHbGtZWFJsUm1sc2JFWnBaV3hrY3lncEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHSjFkSFJ2Ymk1amJHRnpjMHhwYzNRdWNtVnRiM1psS0Nka2FYTmhZbXhsWkNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9abTl5YlVacGJHd3VkbUZzYVdSaGRHVkdhV1ZzWkhNb0tTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eWJTNXNiMkZrUW5WMGRHOXVRVzVwYldGMFpTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlNCY2NseHVJQ0FnSUgwZ0lDQmNjbHh1SUNBZ0lGeHlYRzVjY2x4dUlDQWdJSFZ6WlhJdVoyVjBLQ2s3WEhKY2JpQWdJQ0IxYzJWeUxuQnliMjFwYzJWSFpYUW9LVHRjY2x4dWZTSmRmUT09In0=
