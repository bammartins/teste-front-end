(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormController = function () {
    function FormController() {
        _classCallCheck(this, FormController);
    }

    _createClass(FormController, [{
        key: 'animateForm',
        value: function animateForm() {
            var fields = document.querySelectorAll('.material-input');

            var _loop = function _loop(index) {
                fields[index].addEventListener('change', function () {
                    if (fields[index].value != "") {
                        fields[index].classList.add('has-value');
                    } else {
                        fields[index].classList.remove('has-value');
                    }
                });

                if (fields[index].value != "") {
                    fields[index].classList.add('has-value');
                } else {
                    fields[index].classList.remove('has-value');
                }
            };

            for (var index = 0; index < fields.length; index++) {
                _loop(index);
            }
        }
    }, {
        key: 'loadButtonAnimate',
        value: function loadButtonAnimate() {
            var button = document.getElementById('send');
            var loader = document.getElementById('loader');
            button.addEventListener('click', function (e) {
                button.setAttribute('value', '');
                loader.style.display = "block";
                setTimeout(function () {
                    button.setAttribute('value', 'Cadastrar');
                    loader.style.display = "none";
                }, 3000);
            });
        }
    }]);

    return FormController;
}();

module.exports = FormController;

},{}],2:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UserController = require('./UserController.js');

var _UserController2 = _interopRequireDefault(_UserController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventHandler = function () {
    function EventHandler() {
        _classCallCheck(this, EventHandler);

        this.user = new _UserController2.default();
    }

    _createClass(EventHandler, [{
        key: 'buttonClick',
        value: function buttonClick() {
            var _this = this;

            var button = document.getElementById('send');
            button.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                var nameField = document.getElementById('name').value;
                var emailField = document.getElementById('email').value;
                var cpfField = document.getElementById('cpf').value;
                var phoneField = document.getElementById('phone').value;

                _this.user.set(nameField, emailField, cpfField, phoneField);
            });
        }
    }]);

    return EventHandler;
}();

module.exports = EventHandler;

},{"./UserController.js":4}],3:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _CpfValidate = require('../helper/CpfValidate.js');

var _CpfValidate2 = _interopRequireDefault(_CpfValidate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormController = function () {
    function FormController() {
        _classCallCheck(this, FormController);

        this.nameField = document.getElementById('name');
        this.emailField = document.getElementById('email');
        this.cpfField = document.getElementById('cpf');
        this.phoneField = document.getElementById('phone');
        this.errorMessage = null;
        this.errorCount = 0;
    }

    _createClass(FormController, [{
        key: 'validateFillFields',
        value: function validateFillFields() {
            var inputs = document.querySelectorAll('.material-input');
            var count = 0;

            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].value.length > 0) {
                    count++;
                }
            }

            if (count == inputs.length) {
                return true;
            } else {
                return false;
            }
        }
    }, {
        key: 'validateFields',
        value: function validateFields() {
            var mailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
            var cpfTest = new _CpfValidate2.default();
            if (this.nameField.value.length < 3) {
                this.errorMessage = "Campo deve conter 3 caracteres ou mais";
                document.getElementById('name-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                document.getElementById('name-error').innerText = "";
            }
            if (cpfTest.validate(this.cpfField.value) == false) {
                this.errorMessage = "Este CPF não é válido";
                document.getElementById('cpf-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                document.getElementById('cpf-error').innerText = "";
            }
            if (!this.emailField.value.match(mailRegex)) {
                this.errorMessage = "Este Email não é válido";
                document.getElementById('email-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                document.getElementById('email-error').innerText = "";
            }
            if (this.phoneField.value == "") {
                this.errorMessage = "Este Telefone não é válido";
                document.getElementById('phone-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                document.getElementById('phone-error').innerText = "";
            }

            if (this.errorCount > 0) {
                return false;
            } else {
                return true;
            }
        }
    }]);

    return FormController;
}();

module.exports = FormController;

},{"../helper/CpfValidate.js":5}],4:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FormController = require('./FormController.js');

var _FormController2 = _interopRequireDefault(_FormController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UserController = function () {
    function UserController() {
        _classCallCheck(this, UserController);

        this.id;
        this.name;
        this.email;
        this.cpf;
        this.phone;
    }

    _createClass(UserController, [{
        key: 'set',
        value: function set(name, email, cpf, phone) {
            var arrUser = [];
            var newUser = {};
            var id = 1;
            var validateFields = new _FormController2.default();

            if (localStorage.getItem('users') != null) {
                arrUser = JSON.parse(localStorage.getItem('users'));
            }
            if (localStorage.getItem("lastId") != null) {
                id = parseInt(localStorage.getItem("lastId")) + 1;
            }

            this.id = id++;
            this.name = name;
            this.email = email;
            this.cpf = cpf;
            this.phone = phone;

            newUser = {
                "id": this.id,
                "name": this.name,
                "cpf": this.cpf,
                "phone": this.phone,
                "email": this.email
            };

            if (validateFields.validateFields()) {
                arrUser.push(newUser);
                localStorage.setItem('users', JSON.stringify(arrUser));
                localStorage.setItem('lastId', this.id);
            }
        }
    }, {
        key: 'get',
        value: function get() {}
    }, {
        key: 'edit',
        value: function edit() {}
    }, {
        key: 'delete',
        value: function _delete() {}
    }]);

    return UserController;
}();

module.exports = UserController;

},{"./FormController.js":3}],5:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Created by Tome Vilela
// tome.vilela@gmail.com
var ValidateCpf = function () {
    function ValidateCpf() {
        _classCallCheck(this, ValidateCpf);
    }

    _createClass(ValidateCpf, [{
        key: 'validate',
        value: function validate(cpf) {
            var sum = 0;
            var remainder = void 0;

            cpf = cpf.replace('.', '').replace('.', '').replace('-', '').trim();

            var allEqual = true;
            for (var i = 0; i < cpf.length - 1; i++) {
                if (cpf[i] != cpf[i + 1]) allEqual = false;
            }
            if (allEqual) return false;

            for (var i = 1; i <= 9; i++) {
                sum = sum + parseInt(cpf.substring(i - 1, i)) * (11 - i);
            }remainder = sum * 10 % 11;

            if (remainder == 10 || remainder == 11) remainder = 0;
            if (remainder != parseInt(cpf.substring(9, 10))) return false;

            sum = 0;
            for (var i = 1; i <= 10; i++) {
                sum = sum + parseInt(cpf.substring(i - 1, i)) * (12 - i);
            }remainder = sum * 10 % 11;

            if (remainder == 10 || remainder == 11) remainder = 0;
            if (remainder != parseInt(cpf.substring(10, 11))) return false;

            return true;
        }
    }]);

    return ValidateCpf;
}();

module.exports = ValidateCpf;

},{}],6:[function(require,module,exports){
"use strict";

var _UserController = require("./controller/UserController.js");

var _UserController2 = _interopRequireDefault(_UserController);

var _EventController = require("./controller/EventController.js");

var _EventController2 = _interopRequireDefault(_EventController);

var _FormController = require("./controller/FormController.js");

var _FormController2 = _interopRequireDefault(_FormController);

var _FormAnimation = require("./components/FormAnimation.js");

var _FormAnimation2 = _interopRequireDefault(_FormAnimation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

document.addEventListener("DOMContentLoaded", function () {
    var form = new _FormAnimation2.default();
    var eventHandler = new _EventController2.default();
    var formFill = new _FormController2.default();
    var inputs = document.querySelectorAll('.material-input');
    eventHandler.buttonClick();
    form.animateForm();

    for (var i = 0; i < inputs.length; i++) {
        inputs[i].addEventListener("blur", function () {
            if (formFill.validateFillFields()) {
                form.loadButtonAnimate();
            }
        });
    }
});

},{"./components/FormAnimation.js":1,"./controller/EventController.js":2,"./controller/FormController.js":3,"./controller/UserController.js":4}]},{},[6])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvc2NyaXB0cy9jb21wb25lbnRzL0Zvcm1BbmltYXRpb24uanMiLCJzcmMvc2NyaXB0cy9jb250cm9sbGVyL0V2ZW50Q29udHJvbGxlci5qcyIsInNyYy9zY3JpcHRzL2NvbnRyb2xsZXIvRm9ybUNvbnRyb2xsZXIuanMiLCJzcmMvc2NyaXB0cy9jb250cm9sbGVyL1VzZXJDb250cm9sbGVyLmpzIiwic3JjL3NjcmlwdHMvaGVscGVyL0NwZlZhbGlkYXRlLmpzIiwic3JjL3NjcmlwdHMvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztJQ0FNLGM7Ozs7Ozs7c0NBQ1c7QUFDVCxnQkFBSSxTQUFTLFNBQVMsZ0JBQVQsQ0FBMEIsaUJBQTFCLENBQWI7O0FBRFMsdUNBRUEsS0FGQTtBQUdMLHVCQUFPLEtBQVAsRUFBYyxnQkFBZCxDQUErQixRQUEvQixFQUF5QyxZQUFJO0FBQ3pDLHdCQUFJLE9BQU8sS0FBUCxFQUFjLEtBQWQsSUFBdUIsRUFBM0IsRUFBK0I7QUFDM0IsK0JBQU8sS0FBUCxFQUFjLFNBQWQsQ0FBd0IsR0FBeEIsQ0FBNEIsV0FBNUI7QUFDSCxxQkFGRCxNQUVPO0FBQ0gsK0JBQU8sS0FBUCxFQUFjLFNBQWQsQ0FBd0IsTUFBeEIsQ0FBK0IsV0FBL0I7QUFDSDtBQUNKLGlCQU5EOztBQVFBLG9CQUFJLE9BQU8sS0FBUCxFQUFjLEtBQWQsSUFBdUIsRUFBM0IsRUFBOEI7QUFDMUIsMkJBQU8sS0FBUCxFQUFjLFNBQWQsQ0FBd0IsR0FBeEIsQ0FBNEIsV0FBNUI7QUFDSCxpQkFGRCxNQUVLO0FBQ0QsMkJBQU8sS0FBUCxFQUFjLFNBQWQsQ0FBd0IsTUFBeEIsQ0FBK0IsV0FBL0I7QUFDSDtBQWZJOztBQUVULGlCQUFLLElBQUksUUFBUSxDQUFqQixFQUFvQixRQUFRLE9BQU8sTUFBbkMsRUFBMkMsT0FBM0MsRUFBb0Q7QUFBQSxzQkFBM0Ms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Q0FBVCxLQUFxQyxLQUFLLENBQTFDLENBQVo7QUFESixhQUM4RCxZQUFhLE1BQU0sRUFBUCxHQUFhLEVBQXpCOztBQUU5RCxnQkFBSyxhQUFhLEVBQWQsSUFBc0IsYUFBYSxFQUF2QyxFQUNJLFlBQVksQ0FBWjtBQUNKLGdCQUFJLGFBQWEsU0FBUyxJQUFJLFNBQUosQ0FBYyxFQUFkLEVBQWtCLEVBQWxCLENBQVQsQ0FBakIsRUFDSSxPQUFPLEtBQVA7O0FBRUosbUJBQU8sSUFBUDtBQUNIOzs7Ozs7QUFHTCxPQUFPLE9BQVAsR0FBaUIsV0FBakI7Ozs7O0FDMUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxTQUFTLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxZQUFNO0FBQ2hELFFBQU0sT0FBTyw2QkFBYjtBQUNBLFFBQU0sZUFBZSwrQkFBckI7QUFDQSxRQUFNLFdBQVcsOEJBQWpCO0FBQ0EsUUFBSSxTQUFTLFNBQVMsZ0JBQVQsQ0FBMEIsaUJBQTFCLENBQWI7QUFDQSxpQkFBYSxXQUFiO0FBQ0EsU0FBSyxXQUFMOztBQUVBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxPQUFPLE1BQTNCLEVBQW1DLEdBQW5DLEVBQXdDO0FBQ3BDLGVBQU8sQ0FBUCxFQUFVLGdCQUFWLENBQTJCLE1BQTNCLEVBQW1DLFlBQU07QUFDckMsZ0JBQUksU0FBUyxrQkFBVCxFQUFKLEVBQW1DO0FBQy9CLHFCQUFLLGlCQUFMO0FBQ0g7QUFDSixTQUpEO0FBS0g7QUFDSixDQWZEIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9cmV0dXJuIGV9KSgpIiwiY2xhc3MgRm9ybUNvbnRyb2xsZXJ7XHJcbiAgICBhbmltYXRlRm9ybSgpe1xyXG4gICAgICAgIGxldCBmaWVsZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubWF0ZXJpYWwtaW5wdXQnKTtcclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZmllbGRzLmxlbmd0aDsgaW5kZXgrKykgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmaWVsZHNbaW5kZXhdLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpPT57XHJcbiAgICAgICAgICAgICAgICBpZiAoZmllbGRzW2luZGV4XS52YWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdoYXMtdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzW2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChmaWVsZHNbaW5kZXhdLnZhbHVlICE9IFwiXCIpe1xyXG4gICAgICAgICAgICAgICAgZmllbGRzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdoYXMtdmFsdWUnKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBmaWVsZHNbaW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy12YWx1ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBsb2FkQnV0dG9uQW5pbWF0ZSgpe1xyXG4gICAgICAgIGxldCBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VuZCcpO1xyXG4gICAgICAgIGxldCBsb2FkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9hZGVyJyk7XHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgndmFsdWUnLCAnJyk7XHJcbiAgICAgICAgICAgIGxvYWRlci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgJ0NhZGFzdHJhcicpO1xyXG4gICAgICAgICAgICAgICAgbG9hZGVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgfSwgMzAwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRm9ybUNvbnRyb2xsZXI7IiwiaW1wb3J0IHVzZXJDb250cm9sbGVyIGZyb20gJy4vVXNlckNvbnRyb2xsZXIuanMnO1xyXG5cclxuXHJcbmNsYXNzIEV2ZW50SGFuZGxlcntcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy51c2VyID0gbmV3IHVzZXJDb250cm9sbGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYnV0dG9uQ2xpY2soKXtcclxuICAgICAgICBsZXQgYnV0dG9uICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZW5kJyk7XHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpPT57ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgbGV0IG5hbWVGaWVsZCAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZScpLnZhbHVlO1xyXG4gICAgICAgICAgICBsZXQgZW1haWxGaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbWFpbCcpLnZhbHVlO1xyXG4gICAgICAgICAgICBsZXQgY3BmRmllbGQgICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjcGYnKS52YWx1ZTtcclxuICAgICAgICAgICAgbGV0IHBob25lRmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGhvbmUnKS52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXNlci5zZXQobmFtZUZpZWxkLCBlbWFpbEZpZWxkLCBjcGZGaWVsZCwgcGhvbmVGaWVsZCk7XHJcbiAgICAgICAgfSk7ICBcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEhhbmRsZXI7IiwiaW1wb3J0IGNwZlZhbGlkYXRlIGZyb20gJy4uL2hlbHBlci9DcGZWYWxpZGF0ZS5qcyc7XHJcblxyXG5jbGFzcyBGb3JtQ29udHJvbGxlcntcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5uYW1lRmllbGQgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZScpO1xyXG4gICAgICAgIHRoaXMuZW1haWxGaWVsZCAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VtYWlsJyk7XHJcbiAgICAgICAgdGhpcy5jcGZGaWVsZCAgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3BmJyk7XHJcbiAgICAgICAgdGhpcy5waG9uZUZpZWxkICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGhvbmUnKTtcclxuICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5lcnJvckNvdW50ICAgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRlRmlsbEZpZWxkcygpe1xyXG4gICAgICAgIGxldCBpbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubWF0ZXJpYWwtaW5wdXQnKTtcclxuICAgICAgICBsZXQgY291bnQgPSAwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dHNbaV0udmFsdWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvdW50ID09IGlucHV0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFsaWRhdGVGaWVsZHMoKXtcclxuICAgICAgICBjb25zdCBtYWlsUmVnZXggPSAvXlthLXpBLVowLTkuISMkJSYnKisvPT9eX2B7fH1+LV0rQFthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykqJC87XHJcbiAgICAgICAgbGV0IGNwZlRlc3QgPSBuZXcgY3BmVmFsaWRhdGUoKTtcclxuICAgICAgICBpZiAodGhpcy5uYW1lRmllbGQudmFsdWUubGVuZ3RoIDwgMykge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IFwiQ2FtcG8gZGV2ZSBjb250ZXIgMyBjYXJhY3RlcmVzIG91IG1haXNcIjtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hbWUtZXJyb3InKS5pbm5lclRleHQgPSB0aGlzLmVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgdGhpcy5lcnJvckNvdW50Kys7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hbWUtZXJyb3InKS5pbm5lclRleHQgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY3BmVGVzdC52YWxpZGF0ZSh0aGlzLmNwZkZpZWxkLnZhbHVlKSA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IFwiRXN0ZSBDUEYgbsOjbyDDqSB2w6FsaWRvXCI7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjcGYtZXJyb3InKS5pbm5lclRleHQgPSB0aGlzLmVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgdGhpcy5lcnJvckNvdW50Kys7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NwZi1lcnJvcicpLmlubmVyVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5lbWFpbEZpZWxkLnZhbHVlLm1hdGNoKG1haWxSZWdleCkpIHtcclxuICAgICAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSBcIkVzdGUgRW1haWwgbsOjbyDDqSB2w6FsaWRvXCI7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbWFpbC1lcnJvcicpLmlubmVyVGV4dCA9IHRoaXMuZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yQ291bnQrKztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW1haWwtZXJyb3InKS5pbm5lclRleHQgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5waG9uZUZpZWxkLnZhbHVlID09IFwiXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSBcIkVzdGUgVGVsZWZvbmUgbsOjbyDDqSB2w6FsaWRvXCI7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwaG9uZS1lcnJvcicpLmlubmVyVGV4dCA9IHRoaXMuZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yQ291bnQrKztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGhvbmUtZXJyb3InKS5pbm5lclRleHQgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZXJyb3JDb3VudCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGb3JtQ29udHJvbGxlcjsiLCJpbXBvcnQgdmFsaWRhdGlvbkNvbnRyb2xsZXIgZnJvbSBcIi4vRm9ybUNvbnRyb2xsZXIuanNcIjtcclxuXHJcblxyXG5jbGFzcyBVc2VyQ29udHJvbGxlcntcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5pZDtcclxuICAgICAgICB0aGlzLm5hbWU7XHJcbiAgICAgICAgdGhpcy5lbWFpbDtcclxuICAgICAgICB0aGlzLmNwZjtcclxuICAgICAgICB0aGlzLnBob25lO1xyXG4gICAgfVxyXG5cclxuICAgIHNldChuYW1lLCBlbWFpbCwgY3BmLCBwaG9uZSl7XHJcbiAgICAgICAgbGV0IGFyclVzZXIgPSBbXTtcclxuICAgICAgICBsZXQgbmV3VXNlciA9IHt9O1xyXG4gICAgICAgIGxldCBpZCA9IDE7XHJcbiAgICAgICAgbGV0IHZhbGlkYXRlRmllbGRzID0gbmV3IHZhbGlkYXRpb25Db250cm9sbGVyKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VycycpICE9IG51bGwpe1xyXG4gICAgICAgICAgICBhcnJVc2VyID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnMnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImxhc3RJZFwiKSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlkID0gcGFyc2VJbnQobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJsYXN0SWRcIikpICsgMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaWQgICAgPSBpZCsrO1xyXG4gICAgICAgIHRoaXMubmFtZSAgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuZW1haWwgPSBlbWFpbDtcclxuICAgICAgICB0aGlzLmNwZiAgID0gY3BmO1xyXG4gICAgICAgIHRoaXMucGhvbmUgPSBwaG9uZTtcclxuXHJcbiAgICAgICAgbmV3VXNlciA9IHtcclxuICAgICAgICAgICAgXCJpZFwiICAgOnRoaXMuaWQsIFxyXG4gICAgICAgICAgICBcIm5hbWVcIiA6IHRoaXMubmFtZSwgXHJcbiAgICAgICAgICAgIFwiY3BmXCIgIDogdGhpcy5jcGYsIFxyXG4gICAgICAgICAgICBcInBob25lXCI6IHRoaXMucGhvbmUsIFxyXG4gICAgICAgICAgICBcImVtYWlsXCI6IHRoaXMuZW1haWwgXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHZhbGlkYXRlRmllbGRzLnZhbGlkYXRlRmllbGRzKCkpIHtcclxuICAgICAgICAgICAgYXJyVXNlci5wdXNoKG5ld1VzZXIpO1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcnMnLCBKU09OLnN0cmluZ2lmeShhcnJVc2VyKSk7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsYXN0SWQnLCB0aGlzLmlkKTsgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCgpe1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBlZGl0KCl7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZSgpe1xyXG5cclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBVc2VyQ29udHJvbGxlcjsiLCIvLyBDcmVhdGVkIGJ5IFRvbWUgVmlsZWxhXHJcbi8vIHRvbWUudmlsZWxhQGdtYWlsLmNvbVxyXG5jbGFzcyBWYWxpZGF0ZUNwZntcclxuICAgIHZhbGlkYXRlKGNwZil7XHJcbiAgICAgICAgbGV0IHN1bSA9IDA7XHJcbiAgICAgICAgbGV0IHJlbWFpbmRlcjtcclxuXHJcbiAgICAgICAgY3BmID0gY3BmLnJlcGxhY2UoJy4nLCAnJylcclxuICAgICAgICAgICAgLnJlcGxhY2UoJy4nLCAnJylcclxuICAgICAgICAgICAgLnJlcGxhY2UoJy0nLCAnJylcclxuICAgICAgICAgICAgLnRyaW0oKTtcclxuXHJcbiAgICAgICAgbGV0IGFsbEVxdWFsID0gdHJ1ZTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNwZi5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGNwZltpXSAhPSBjcGZbaSArIDFdKVxyXG4gICAgICAgICAgICAgICAgYWxsRXF1YWwgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFsbEVxdWFsKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IDk7IGkrKylcclxuICAgICAgICAgICAgc3VtID0gc3VtICsgcGFyc2VJbnQoY3BmLnN1YnN0cmluZyhpIC0gMSwgaSkpICogKDExIC0gaSk7XHJcbiAgICAgICAgcmVtYWluZGVyID0gKHN1bSAqIDEwKSAlIDExO1xyXG5cclxuICAgICAgICBpZiAoKHJlbWFpbmRlciA9PSAxMCkgfHwgKHJlbWFpbmRlciA9PSAxMSkpXHJcbiAgICAgICAgICAgIHJlbWFpbmRlciA9IDA7XHJcbiAgICAgICAgaWYgKHJlbWFpbmRlciAhPSBwYXJzZUludChjcGYuc3Vic3RyaW5nKDksIDEwKSkpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgc3VtID0gMDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSAxMDsgaSsrKVxyXG4gICAgICAgICAgICBzdW0gPSBzdW0gKyBwYXJzZUludChjcGYuc3Vic3RyaW5nKGkgLSAxLCBpKSkgKiAoMTIgLSBpKTsgcmVtYWluZGVyID0gKHN1bSAqIDEwKSAlIDExO1xyXG5cclxuICAgICAgICBpZiAoKHJlbWFpbmRlciA9PSAxMCkgfHwgKHJlbWFpbmRlciA9PSAxMSkpXHJcbiAgICAgICAgICAgIHJlbWFpbmRlciA9IDA7XHJcbiAgICAgICAgaWYgKHJlbWFpbmRlciAhPSBwYXJzZUludChjcGYuc3Vic3RyaW5nKDEwLCAxMSkpKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFZhbGlkYXRlQ3BmO1xyXG5cclxuIiwiaW1wb3J0IHVzZXJDb250cm9sbGVyIGZyb20gXCIuL2NvbnRyb2xsZXIvVXNlckNvbnRyb2xsZXIuanNcIlxyXG5pbXBvcnQgZXZlbnRDb250cm9sbGVyIGZyb20gXCIuL2NvbnRyb2xsZXIvRXZlbnRDb250cm9sbGVyLmpzXCJcclxuaW1wb3J0IGZvcm1Db250cm9sbGVyIGZyb20gXCIuL2NvbnRyb2xsZXIvRm9ybUNvbnRyb2xsZXIuanNcIlxyXG5pbXBvcnQgZm9ybUFuaW1hdGlvbiBmcm9tIFwiLi9jb21wb25lbnRzL0Zvcm1BbmltYXRpb24uanNcIlxyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xyXG4gICAgY29uc3QgZm9ybSA9IG5ldyBmb3JtQW5pbWF0aW9uKCk7XHJcbiAgICBjb25zdCBldmVudEhhbmRsZXIgPSBuZXcgZXZlbnRDb250cm9sbGVyKCk7XHJcbiAgICBjb25zdCBmb3JtRmlsbCA9IG5ldyBmb3JtQ29udHJvbGxlcigpO1xyXG4gICAgbGV0IGlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tYXRlcmlhbC1pbnB1dCcpO1xyXG4gICAgZXZlbnRIYW5kbGVyLmJ1dHRvbkNsaWNrKCk7IFxyXG4gICAgZm9ybS5hbmltYXRlRm9ybSgpOyAgICAgICAgICBcclxuICAgIFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpbnB1dHNbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZm9ybUZpbGwudmFsaWRhdGVGaWxsRmllbGRzKCkpIHtcclxuICAgICAgICAgICAgICAgIGZvcm0ubG9hZEJ1dHRvbkFuaW1hdGUoKTtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59KTsiXSwicHJlRXhpc3RpbmdDb21tZW50IjoiLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSnpjbU12YzJOeWFYQjBjeTlqYjIxd2IyNWxiblJ6TDBadmNtMUJibWx0WVhScGIyNHVhbk1pTENKemNtTXZjMk55YVhCMGN5OWpiMjUwY205c2JHVnlMMFYyWlc1MFEyOXVkSEp2Ykd4bGNpNXFjeUlzSW5OeVl5OXpZM0pwY0hSekwyTnZiblJ5YjJ4c1pYSXZSbTl5YlVOdmJuUnliMnhzWlhJdWFuTWlMQ0p6Y21NdmMyTnlhWEIwY3k5amIyNTBjbTlzYkdWeUwxVnpaWEpEYjI1MGNtOXNiR1Z5TG1weklpd2ljM0pqTDNOamNtbHdkSE12YUdWc2NHVnlMME53WmxaaGJHbGtZWFJsTG1weklpd2ljM0pqTDNOamNtbHdkSE12YldGcGJpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVRzN096czdPenRKUTBGTkxHTTdPenM3T3pzN2MwTkJRMWM3UVVGRFZDeG5Ra0ZCU1N4VFFVRlRMRk5CUVZNc1owSkJRVlFzUTBGQk1FSXNhVUpCUVRGQ0xFTkJRV0k3TzBGQlJGTXNkVU5CUlVFc1MwRkdRVHRCUVVkTUxIVkNRVUZQTEV0QlFWQXNSVUZCWXl4blFrRkJaQ3hEUVVFclFpeFJRVUV2UWl4RlFVRjVReXhaUVVGSk8wRkJRM3BETEhkQ1FVRkpMRTlCUVU4c1MwRkJVQ3hGUVVGakxFdEJRV1FzU1VGQmRVSXNSVUZCTTBJc1JVRkJLMEk3UVVGRE0wSXNLMEpCUVU4c1MwRkJVQ3hGUVVGakxGTkJRV1FzUTBGQmQwSXNSMEZCZUVJc1EwRkJORUlzVjBGQk5VSTdRVUZEU0N4eFFrRkdSQ3hOUVVWUE8wRkJRMGdzSzBKQlFVOHNTMEZCVUN4RlFVRmpMRk5CUVdRc1EwRkJkMElzVFVGQmVFSXNRMEZCSzBJc1YwRkJMMEk3UVVGRFNEdEJRVU5LTEdsQ1FVNUVPenRCUVZGQkxHOUNRVUZKTEU5QlFVOHNTMEZCVUN4RlFVRmpMRXRCUVdRc1NVRkJkVUlzUlVGQk0wSXNSVUZCT0VJN1FVRkRNVUlzTWtKQlFVOHNTMEZCVUN4RlFVRmpMRk5CUVdRc1EwRkJkMElzUjBGQmVFSXNRMEZCTkVJc1YwRkJOVUk3UVVGRFNDeHBRa0ZHUkN4TlFVVkxPMEZCUTBRc01rSkJRVThzUzBGQlVDeEZRVUZqTEZOQlFXUXNRMEZCZDBJc1RVRkJlRUlzUTBGQkswSXNWMEZCTDBJN1FVRkRTRHRCUVdaSk96dEJRVVZVTEdsQ1FVRkxMRWxCUVVrc1VVRkJVU3hEUVVGcVFpeEZRVUZ2UWl4UlFVRlJMRTlCUVU4c1RVRkJia01zUlVGQk1rTXNUMEZCTTBNc1JVRkJiMFE3UVVGQlFTeHpRa0ZCTTBNc1MwRkJNa003UVVGamJrUTdRVUZEU2pzN096UkRRVVZyUWp0QlFVTm1MR2RDUVVGSkxGTkJRVk1zVTBGQlV5eGpRVUZVTEVOQlFYZENMRTFCUVhoQ0xFTkJRV0k3UVVGRFFTeG5Ra0ZCU1N4VFFVRlRMRk5CUVZNc1kwRkJWQ3hEUVVGM1FpeFJRVUY0UWl4RFFVRmlPMEZCUTBFc2JVSkJRVThzWjBKQlFWQXNRMEZCZDBJc1QwRkJlRUlzUlVGQmFVTXNWVUZCUXl4RFFVRkVMRVZCUVU4N1FVRkRjRU1zZFVKQlFVOHNXVUZCVUN4RFFVRnZRaXhQUVVGd1FpeEZRVUUyUWl4RlFVRTNRanRCUVVOQkxIVkNRVUZQTEV0QlFWQXNRMEZCWVN4UFFVRmlMRWRCUVhWQ0xFOUJRWFpDTzBGQlEwRXNNa0pCUVZjc1dVRkJUVHRCUVVOaUxESkNRVUZQTEZsQlFWQXNRMEZCYjBJc1QwRkJjRUlzUlVGQk5rSXNWMEZCTjBJN1FVRkRRU3d5UWtGQlR5eExRVUZRTEVOQlFXRXNUMEZCWWl4SFFVRjFRaXhOUVVGMlFqdEJRVU5JTEdsQ1FVaEVMRVZCUjBjc1NVRklTRHRCUVVsSUxHRkJVRVE3UVVGUlNEczdPenM3TzBGQlIwd3NUMEZCVHl4UFFVRlFMRWRCUVdsQ0xHTkJRV3BDT3pzN096czdPMEZEYkVOQk96czdPenM3T3p0SlFVZE5MRms3UVVGRFJpdzBRa0ZCWVR0QlFVRkJPenRCUVVOVUxHRkJRVXNzU1VGQlRDeEhRVUZaTERoQ1FVRmFPMEZCUTBnN096czdjME5CUlZrN1FVRkJRVHM3UVVGRFZDeG5Ra0ZCU1N4VFFVRlZMRk5CUVZNc1kwRkJWQ3hEUVVGM1FpeE5RVUY0UWl4RFFVRmtPMEZCUTBFc2JVSkJRVThzWjBKQlFWQXNRMEZCZDBJc1QwRkJlRUlzUlVGQmFVTXNWVUZCUXl4RFFVRkVMRVZCUVVzN1FVRkRiRU1zYTBKQlFVVXNZMEZCUmp0QlFVTkJMR3RDUVVGRkxHVkJRVVk3UVVGRFFTeHZRa0ZCU1N4WlFVRmhMRk5CUVZNc1kwRkJWQ3hEUVVGM1FpeE5RVUY0UWl4RlFVRm5ReXhMUVVGcVJEdEJRVU5CTEc5Q1FVRkpMR0ZCUVdFc1UwRkJVeXhqUVVGVUxFTkJRWGRDTEU5QlFYaENMRVZCUVdsRExFdEJRV3hFTzBGQlEwRXNiMEpCUVVrc1YwRkJZU3hUUVVGVExHTkJRVlFzUTBGQmQwSXNTMEZCZUVJc1JVRkJLMElzUzBGQmFFUTdRVUZEUVN4dlFrRkJTU3hoUVVGaExGTkJRVk1zWTBGQlZDeERRVUYzUWl4UFFVRjRRaXhGUVVGcFF5eExRVUZzUkRzN1FVRkZRU3h6UWtGQlN5eEpRVUZNTEVOQlFWVXNSMEZCVml4RFFVRmpMRk5CUVdRc1JVRkJlVUlzVlVGQmVrSXNSVUZCY1VNc1VVRkJja01zUlVGQkswTXNWVUZCTDBNN1FVRkRTQ3hoUVZSRU8wRkJWVWc3T3pzN096dEJRVWRNTEU5QlFVOHNUMEZCVUN4SFFVRnBRaXhaUVVGcVFqczdPenM3T3p0QlEzWkNRVHM3T3pzN096czdTVUZGVFN4ak8wRkJRMFlzT0VKQlFXRTdRVUZCUVRzN1FVRkRWQ3hoUVVGTExGTkJRVXdzUjBGQmIwSXNVMEZCVXl4alFVRlVMRU5CUVhkQ0xFMUJRWGhDTEVOQlFYQkNPMEZCUTBFc1lVRkJTeXhWUVVGTUxFZEJRVzlDTEZOQlFWTXNZMEZCVkN4RFFVRjNRaXhQUVVGNFFpeERRVUZ3UWp0QlFVTkJMR0ZCUVVzc1VVRkJUQ3hIUVVGdlFpeFRRVUZUTEdOQlFWUXNRMEZCZDBJc1MwRkJlRUlzUTBGQmNFSTdRVUZEUVN4aFFVRkxMRlZCUVV3c1IwRkJiMElzVTBGQlV5eGpRVUZVTEVOQlFYZENMRTlCUVhoQ0xFTkJRWEJDTzBGQlEwRXNZVUZCU3l4WlFVRk1MRWRCUVc5Q0xFbEJRWEJDTzBGQlEwRXNZVUZCU3l4VlFVRk1MRWRCUVc5Q0xFTkJRWEJDTzBGQlEwZzdPenM3TmtOQlJXMUNPMEZCUTJoQ0xHZENRVUZKTEZOQlFWTXNVMEZCVXl4blFrRkJWQ3hEUVVFd1FpeHBRa0ZCTVVJc1EwRkJZanRCUVVOQkxHZENRVUZKTEZGQlFWRXNRMEZCV2pzN1FVRkZRU3hwUWtGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhKUVVGSkxFOUJRVThzVFVGQk0wSXNSVUZCYlVNc1IwRkJia01zUlVGQmQwTTdRVUZEY0VNc2IwSkJRVWtzVDBGQlR5eERRVUZRTEVWQlFWVXNTMEZCVml4RFFVRm5RaXhOUVVGb1FpeEhRVUY1UWl4RFFVRTNRaXhGUVVGblF6dEJRVU0xUWp0QlFVTklPMEZCUTBvN08wRkJSVVFzWjBKQlFVa3NVMEZCVXl4UFFVRlBMRTFCUVhCQ0xFVkJRVFJDTzBGQlEzaENMSFZDUVVGUExFbEJRVkE3UVVGRFNDeGhRVVpFTEUxQlJVczdRVUZEUkN4MVFrRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFNqczdPM2xEUVVWbE8wRkJRMW9zWjBKQlFVMHNXVUZCV1N4elNVRkJiRUk3UVVGRFFTeG5Ra0ZCU1N4VlFVRlZMREpDUVVGa08wRkJRMEVzWjBKQlFVa3NTMEZCU3l4VFFVRk1MRU5CUVdVc1MwRkJaaXhEUVVGeFFpeE5RVUZ5UWl4SFFVRTRRaXhEUVVGc1F5eEZRVUZ4UXp0QlFVTnFReXh4UWtGQlN5eFpRVUZNTEVkQlFXOUNMSGREUVVGd1FqdEJRVU5CTEhsQ1FVRlRMR05CUVZRc1EwRkJkMElzV1VGQmVFSXNSVUZCYzBNc1UwRkJkRU1zUjBGQmEwUXNTMEZCU3l4WlFVRjJSRHRCUVVOQkxIRkNRVUZMTEZWQlFVdzdRVUZEU0N4aFFVcEVMRTFCU1U4N1FVRkRTQ3g1UWtGQlV5eGpRVUZVTEVOQlFYZENMRmxCUVhoQ0xFVkJRWE5ETEZOQlFYUkRMRWRCUVd0RUxFVkJRV3hFTzBGQlEwZzdRVUZEUkN4blFrRkJTU3hSUVVGUkxGRkJRVklzUTBGQmFVSXNTMEZCU3l4UlFVRk1MRU5CUVdNc1MwRkJMMElzUzBGQmVVTXNTMEZCTjBNc1JVRkJiMFE3UVVGRGFFUXNjVUpCUVVzc1dVRkJUQ3hIUVVGdlFpeDFRa0ZCY0VJN1FVRkRRU3g1UWtGQlV5eGpRVUZVTEVOQlFYZENMRmRCUVhoQ0xFVkJRWEZETEZOQlFYSkRMRWRCUVdsRUxFdEJRVXNzV1VGQmRFUTdRVUZEUVN4eFFrRkJTeXhWUVVGTU8wRkJRMGdzWVVGS1JDeE5RVWxQTzBGQlEwZ3NlVUpCUVZNc1kwRkJWQ3hEUVVGM1FpeFhRVUY0UWl4RlFVRnhReXhUUVVGeVF5eEhRVUZwUkN4RlFVRnFSRHRCUVVOSU8wRkJRMFFzWjBKQlFVa3NRMEZCUXl4TFFVRkxMRlZCUVV3c1EwRkJaMElzUzBGQmFFSXNRMEZCYzBJc1MwRkJkRUlzUTBGQk5FSXNVMEZCTlVJc1EwRkJUQ3hGUVVFMlF6dEJRVU42UXl4eFFrRkJTeXhaUVVGTUxFZEJRVzlDTEhsQ1FVRndRanRCUVVOQkxIbENRVUZUTEdOQlFWUXNRMEZCZDBJc1lVRkJlRUlzUlVGQmRVTXNVMEZCZGtNc1IwRkJiVVFzUzBGQlN5eFpRVUY0UkR0QlFVTkJMSEZDUVVGTExGVkJRVXc3UVVGRFNDeGhRVXBFTEUxQlNVODdRVUZEU0N4NVFrRkJVeXhqUVVGVUxFTkJRWGRDTEdGQlFYaENMRVZCUVhWRExGTkJRWFpETEVkQlFXMUVMRVZCUVc1RU8wRkJRMGc3UVVGRFJDeG5Ra0ZCU1N4TFFVRkxMRlZCUVV3c1EwRkJaMElzUzBGQmFFSXNTVUZCZVVJc1JVRkJOMElzUlVGQmFVTTdRVUZETjBJc2NVSkJRVXNzV1VGQlRDeEhRVUZ2UWl3MFFrRkJjRUk3UVVGRFFTeDVRa0ZCVXl4alFVRlVMRU5CUVhkQ0xHRkJRWGhDTEVWQlFYVkRMRk5CUVhaRExFZEJRVzFFTEV0QlFVc3NXVUZCZUVRN1FVRkRRU3h4UWtGQlN5eFZRVUZNTzBGQlEwZ3NZVUZLUkN4TlFVbFBPMEZCUTBnc2VVSkJRVk1zWTBGQlZDeERRVUYzUWl4aFFVRjRRaXhGUVVGMVF5eFRRVUYyUXl4SFFVRnRSQ3hGUVVGdVJEdEJRVU5JT3p0QlFVVkVMR2RDUVVGSkxFdEJRVXNzVlVGQlRDeEhRVUZyUWl4RFFVRjBRaXhGUVVGNVFqdEJRVU55UWl4MVFrRkJUeXhMUVVGUU8wRkJRMGdzWVVGR1JDeE5RVVZQTzBGQlEwZ3NkVUpCUVU4c1NVRkJVRHRCUVVOSU8wRkJRMG83T3pzN096dEJRVWRNTEU5QlFVOHNUMEZCVUN4SFFVRnBRaXhqUVVGcVFqczdPenM3T3p0QlEzSkZRVHM3T3pzN096czdTVUZIVFN4ak8wRkJRMFlzT0VKQlFXRTdRVUZCUVRzN1FVRkRWQ3hoUVVGTExFVkJRVXc3UVVGRFFTeGhRVUZMTEVsQlFVdzdRVUZEUVN4aFFVRkxMRXRCUVV3N1FVRkRRU3hoUVVGTExFZEJRVXc3UVVGRFFTeGhRVUZMTEV0QlFVdzdRVUZEU0RzN096czBRa0ZGUnl4SkxFVkJRVTBzU3l4RlFVRlBMRWNzUlVGQlN5eExMRVZCUVUwN1FVRkRlRUlzWjBKQlFVa3NWVUZCVlN4RlFVRmtPMEZCUTBFc1owSkJRVWtzVlVGQlZTeEZRVUZrTzBGQlEwRXNaMEpCUVVrc1MwRkJTeXhEUVVGVU8wRkJRMEVzWjBKQlFVa3NhVUpCUVdsQ0xEaENRVUZ5UWpzN1FVRkhRU3huUWtGQlNTeGhRVUZoTEU5QlFXSXNRMEZCY1VJc1QwRkJja0lzUzBGQmFVTXNTVUZCY2tNc1JVRkJNRU03UVVGRGRFTXNNRUpCUVZVc1MwRkJTeXhMUVVGTUxFTkJRVmNzWVVGQllTeFBRVUZpTEVOQlFYRkNMRTlCUVhKQ0xFTkJRVmdzUTBGQlZqdEJRVU5JTzBGQlEwUXNaMEpCUVVrc1lVRkJZU3hQUVVGaUxFTkJRWEZDTEZGQlFYSkNMRXRCUVd0RExFbEJRWFJETEVWQlFUUkRPMEZCUTNoRExIRkNRVUZMTEZOQlFWTXNZVUZCWVN4UFFVRmlMRU5CUVhGQ0xGRkJRWEpDTEVOQlFWUXNTVUZCTWtNc1EwRkJhRVE3UVVGRFNEczdRVUZGUkN4cFFrRkJTeXhGUVVGTUxFZEJRV0VzU1VGQllqdEJRVU5CTEdsQ1FVRkxMRWxCUVV3c1IwRkJZU3hKUVVGaU8wRkJRMEVzYVVKQlFVc3NTMEZCVEN4SFFVRmhMRXRCUVdJN1FVRkRRU3hwUWtGQlN5eEhRVUZNTEVkQlFXRXNSMEZCWWp0QlFVTkJMR2xDUVVGTExFdEJRVXdzUjBGQllTeExRVUZpT3p0QlFVVkJMSE5DUVVGVk8wRkJRMDRzYzBKQlFWRXNTMEZCU3l4RlFVUlFPMEZCUlU0c2QwSkJRVk1zUzBGQlN5eEpRVVpTTzBGQlIwNHNkVUpCUVZNc1MwRkJTeXhIUVVoU08wRkJTVTRzZVVKQlFWTXNTMEZCU3l4TFFVcFNPMEZCUzA0c2VVSkJRVk1zUzBGQlN6dEJRVXhTTEdGQlFWWTdPMEZCVVVFc1owSkJRVWtzWlVGQlpTeGpRVUZtTEVWQlFVb3NSVUZCY1VNN1FVRkRha01zZDBKQlFWRXNTVUZCVWl4RFFVRmhMRTlCUVdJN1FVRkRRU3cyUWtGQllTeFBRVUZpTEVOQlFYRkNMRTlCUVhKQ0xFVkJRVGhDTEV0QlFVc3NVMEZCVEN4RFFVRmxMRTlCUVdZc1EwRkJPVUk3UVVGRFFTdzJRa0ZCWVN4UFFVRmlMRU5CUVhGQ0xGRkJRWEpDTEVWQlFTdENMRXRCUVVzc1JVRkJjRU03UVVGRFNEdEJRVU5LT3pzN09FSkJSVWtzUTBGRlNqczdPeXRDUVVWTExFTkJSVXc3T3p0clEwRkZUeXhEUVVWUU96czdPenM3UVVGSFRDeFBRVUZQTEU5QlFWQXNSMEZCYVVJc1kwRkJha0k3T3pzN096czdPenRCUXpWRVFUdEJRVU5CTzBsQlEwMHNWenM3T3pzN096dHBRMEZEVHl4SExFVkJRVWs3UVVGRFZDeG5Ra0ZCU1N4TlFVRk5MRU5CUVZZN1FVRkRRU3huUWtGQlNTeHJRa0ZCU2pzN1FVRkZRU3hyUWtGQlRTeEpRVUZKTEU5QlFVb3NRMEZCV1N4SFFVRmFMRVZCUVdsQ0xFVkJRV3BDTEVWQlEwUXNUMEZFUXl4RFFVTlBMRWRCUkZBc1JVRkRXU3hGUVVSYUxFVkJSVVFzVDBGR1F5eERRVVZQTEVkQlJsQXNSVUZGV1N4RlFVWmFMRVZCUjBRc1NVRklReXhGUVVGT096dEJRVXRCTEdkQ1FVRkpMRmRCUVZjc1NVRkJaanRCUVVOQkxHbENRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzU1VGQlNTeE5RVUZLTEVkQlFXRXNRMEZCYWtNc1JVRkJiME1zUjBGQmNFTXNSVUZCZVVNN1FVRkRja01zYjBKQlFVa3NTVUZCU1N4RFFVRktMRXRCUVZVc1NVRkJTU3hKUVVGSkxFTkJRVklzUTBGQlpDeEZRVU5KTEZkQlFWY3NTMEZCV0R0QlFVTlFPMEZCUTBRc1owSkJRVWtzVVVGQlNpeEZRVU5KTEU5QlFVOHNTMEZCVURzN1FVRkZTaXhwUWtGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhMUVVGTExFTkJRWEpDTEVWQlFYZENMRWRCUVhoQ08wRkJRMGtzYzBKQlFVMHNUVUZCVFN4VFFVRlRMRWxCUVVrc1UwRkJTaXhEUVVGakxFbEJRVWtzUTBGQmJFSXNSVUZCY1VJc1EwRkJja0lzUTBGQlZDeExRVUZ4UXl4TFFVRkxMRU5CUVRGRExFTkJRVm83UVVGRVNpeGhRVVZCTEZsQlFXRXNUVUZCVFN4RlFVRlFMRWRCUVdFc1JVRkJla0k3TzBGQlJVRXNaMEpCUVVzc1lVRkJZU3hGUVVGa0xFbEJRWE5DTEdGQlFXRXNSVUZCZGtNc1JVRkRTU3haUVVGWkxFTkJRVm83UVVGRFNpeG5Ra0ZCU1N4aFFVRmhMRk5CUVZNc1NVRkJTU3hUUVVGS0xFTkJRV01zUTBGQlpDeEZRVUZwUWl4RlFVRnFRaXhEUVVGVUxFTkJRV3BDTEVWQlEwa3NUMEZCVHl4TFFVRlFPenRCUVVWS0xHdENRVUZOTEVOQlFVNDdRVUZEUVN4cFFrRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4TFFVRkxMRVZCUVhKQ0xFVkJRWGxDTEVkQlFYcENPMEZCUTBrc2MwSkJRVTBzVFVGQlRTeFRRVUZUTEVsQlFVa3NVMEZCU2l4RFFVRmpMRWxCUVVrc1EwRkJiRUlzUlVGQmNVSXNRMEZCY2tJc1EwRkJWQ3hMUVVGeFF5eExRVUZMTEVOQlFURkRMRU5CUVZvN1FVRkVTaXhoUVVNNFJDeFpRVUZoTEUxQlFVMHNSVUZCVUN4SFFVRmhMRVZCUVhwQ096dEJRVVU1UkN4blFrRkJTeXhoUVVGaExFVkJRV1FzU1VGQmMwSXNZVUZCWVN4RlFVRjJReXhGUVVOSkxGbEJRVmtzUTBGQldqdEJRVU5LTEdkQ1FVRkpMR0ZCUVdFc1UwRkJVeXhKUVVGSkxGTkJRVW9zUTBGQll5eEZRVUZrTEVWQlFXdENMRVZCUVd4Q0xFTkJRVlFzUTBGQmFrSXNSVUZEU1N4UFFVRlBMRXRCUVZBN08wRkJSVW9zYlVKQlFVOHNTVUZCVUR0QlFVTklPenM3T3pzN1FVRkhUQ3hQUVVGUExFOUJRVkFzUjBGQmFVSXNWMEZCYWtJN096czdPMEZETVVOQk96czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVU5CT3pzN096czdRVUZGUVN4VFFVRlRMR2RDUVVGVUxFTkJRVEJDTEd0Q1FVRXhRaXhGUVVFNFF5eFpRVUZOTzBGQlEyaEVMRkZCUVUwc1QwRkJUeXcyUWtGQllqdEJRVU5CTEZGQlFVMHNaVUZCWlN3clFrRkJja0k3UVVGRFFTeFJRVUZOTEZkQlFWY3NPRUpCUVdwQ08wRkJRMEVzVVVGQlNTeFRRVUZUTEZOQlFWTXNaMEpCUVZRc1EwRkJNRUlzYVVKQlFURkNMRU5CUVdJN1FVRkRRU3hwUWtGQllTeFhRVUZpTzBGQlEwRXNVMEZCU3l4WFFVRk1PenRCUVVWQkxGTkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hQUVVGUExFMUJRVE5DTEVWQlFXMURMRWRCUVc1RExFVkJRWGRETzBGQlEzQkRMR1ZCUVU4c1EwRkJVQ3hGUVVGVkxHZENRVUZXTEVOQlFUSkNMRTFCUVROQ0xFVkJRVzFETEZsQlFVMDdRVUZEY2tNc1owSkJRVWtzVTBGQlV5eHJRa0ZCVkN4RlFVRktMRVZCUVcxRE8wRkJReTlDTEhGQ1FVRkxMR2xDUVVGTU8wRkJRMGc3UVVGRFNpeFRRVXBFTzBGQlMwZzdRVUZEU2l4RFFXWkVJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQmxLSFFzYml4eUtYdG1kVzVqZEdsdmJpQnpLRzhzZFNsN2FXWW9JVzViYjEwcGUybG1LQ0YwVzI5ZEtYdDJZWElnWVQxMGVYQmxiMllnY21WeGRXbHlaVDA5WENKbWRXNWpkR2x2Ymx3aUppWnlaWEYxYVhKbE8ybG1LQ0YxSmlaaEtYSmxkSFZ5YmlCaEtHOHNJVEFwTzJsbUtHa3BjbVYwZFhKdUlHa29ieXdoTUNrN2RtRnlJR1k5Ym1WM0lFVnljbTl5S0Z3aVEyRnVibTkwSUdacGJtUWdiVzlrZFd4bElDZGNJaXR2SzF3aUoxd2lLVHQwYUhKdmR5Qm1MbU52WkdVOVhDSk5UMFJWVEVWZlRrOVVYMFpQVlU1RVhDSXNabjEyWVhJZ2JEMXVXMjlkUFh0bGVIQnZjblJ6T250OWZUdDBXMjlkV3pCZExtTmhiR3dvYkM1bGVIQnZjblJ6TEdaMWJtTjBhVzl1S0dVcGUzWmhjaUJ1UFhSYmIxMWJNVjFiWlYwN2NtVjBkWEp1SUhNb2JqOXVPbVVwZlN4c0xHd3VaWGh3YjNKMGN5eGxMSFFzYml4eUtYMXlaWFIxY200Z2JsdHZYUzVsZUhCdmNuUnpmWFpoY2lCcFBYUjVjR1Z2WmlCeVpYRjFhWEpsUFQxY0ltWjFibU4wYVc5dVhDSW1KbkpsY1hWcGNtVTdabTl5S0haaGNpQnZQVEE3Ynp4eUxteGxibWQwYUR0dkt5c3BjeWh5VzI5ZEtUdHlaWFIxY200Z2MzMXlaWFIxY200Z1pYMHBLQ2tpTENKamJHRnpjeUJHYjNKdFEyOXVkSEp2Ykd4bGNudGNjbHh1SUNBZ0lHRnVhVzFoZEdWR2IzSnRLQ2w3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR1pwWld4a2N5QTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTV0WVhSbGNtbGhiQzFwYm5CMWRDY3BPMXh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdsdVpHVjRJRDBnTURzZ2FXNWtaWGdnUENCbWFXVnNaSE11YkdWdVozUm9PeUJwYm1SbGVDc3JLU0I3SUNBZ0lDQWdJQ0FnSUNBZ1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdacFpXeGtjMXRwYm1SbGVGMHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMmhoYm1kbEp5d2dLQ2s5UG50Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htYVdWc1pITmJhVzVrWlhoZExuWmhiSFZsSUNFOUlGd2lYQ0lwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVdWc1pITmJhVzVrWlhoZExtTnNZWE56VEdsemRDNWhaR1FvSjJoaGN5MTJZV3gxWlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXVnNaSE5iYVc1a1pYaGRMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9KMmhoY3kxMllXeDFaU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnBaV3hrYzF0cGJtUmxlRjB1ZG1Gc2RXVWdJVDBnWENKY0lpbDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVdWc1pITmJhVzVrWlhoZExtTnNZWE56VEdsemRDNWhaR1FvSjJoaGN5MTJZV3gxWlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVpXeHpaWHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacFpXeGtjMXRwYm1SbGVGMHVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25hR0Z6TFhaaGJIVmxKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnSUNCY2NseHVJQ0FnSUd4dllXUkNkWFIwYjI1QmJtbHRZWFJsS0NsN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUdKMWRIUnZiaUE5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2R6Wlc1a0p5azdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHeHZZV1JsY2lBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0Nkc2IyRmtaWEluS1R0Y2NseHVJQ0FnSUNBZ0lDQmlkWFIwYjI0dVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENBb1pTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JpZFhSMGIyNHVjMlYwUVhSMGNtbGlkWFJsS0NkMllXeDFaU2NzSUNjbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHOWhaR1Z5TG5OMGVXeGxMbVJwYzNCc1lYa2dQU0JjSW1Kc2IyTnJYQ0k3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5WMGRHOXVMbk5sZEVGMGRISnBZblYwWlNnbmRtRnNkV1VuTENBblEyRmtZWE4wY21GeUp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJGa1pYSXVjM1I1YkdVdVpHbHpjR3hoZVNBOUlGd2libTl1WlZ3aU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxDQXpNREF3S1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDFjY2x4dWZWeHlYRzVjY2x4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCR2IzSnRRMjl1ZEhKdmJHeGxjanNpTENKcGJYQnZjblFnZFhObGNrTnZiblJ5YjJ4c1pYSWdabkp2YlNBbkxpOVZjMlZ5UTI5dWRISnZiR3hsY2k1cWN5YzdYSEpjYmx4eVhHNWNjbHh1WTJ4aGMzTWdSWFpsYm5SSVlXNWtiR1Z5ZTF4eVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tYdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuVnpaWElnUFNCdVpYY2dkWE5sY2tOdmJuUnliMnhzWlhJb0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JpZFhSMGIyNURiR2xqYXlncGUxeHlYRzRnSUNBZ0lDQWdJR3hsZENCaWRYUjBiMjRnSUQwZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjNObGJtUW5LVHRjY2x4dUlDQWdJQ0FnSUNCaWRYUjBiMjR1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0FvWlNrOVBuc2dJQ0FnSUNBZ0lDQWdJQ0JjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaUzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxMbk4wYjNCUWNtOXdZV2RoZEdsdmJpZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYm1GdFpVWnBaV3hrSUNBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0NkdVlXMWxKeWt1ZG1Gc2RXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JsYldGcGJFWnBaV3hrSUQwZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjJWdFlXbHNKeWt1ZG1Gc2RXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JqY0daR2FXVnNaQ0FnSUQwZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjJOd1ppY3BMblpoYkhWbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjR2h2Ym1WR2FXVnNaQ0E5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2R3YUc5dVpTY3BMblpoYkhWbE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MWMyVnlMbk5sZENodVlXMWxSbWxsYkdRc0lHVnRZV2xzUm1sbGJHUXNJR053WmtacFpXeGtMQ0J3YUc5dVpVWnBaV3hrS1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHNnSUZ4eVhHNGdJQ0FnZlZ4eVhHNTlYSEpjYmx4eVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFVjJaVzUwU0dGdVpHeGxjanNpTENKcGJYQnZjblFnWTNCbVZtRnNhV1JoZEdVZ1puSnZiU0FuTGk0dmFHVnNjR1Z5TDBOd1psWmhiR2xrWVhSbExtcHpKenRjY2x4dVhISmNibU5zWVhOeklFWnZjbTFEYjI1MGNtOXNiR1Z5ZTF4eVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tYdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtNWhiV1ZHYVdWc1pDQWdJQ0E5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2R1WVcxbEp5azdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWxiV0ZwYkVacFpXeGtJQ0FnUFNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duWlcxaGFXd25LVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbU53WmtacFpXeGtJQ0FnSUNBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0NkamNHWW5LVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbkJvYjI1bFJtbGxiR1FnSUNBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0Nkd2FHOXVaU2NwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WlhKeWIzSk5aWE56WVdkbElEMGdiblZzYkR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXlRMjkxYm5RZ0lDQTlJREE3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2RtRnNhV1JoZEdWR2FXeHNSbWxsYkdSektDbDdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHbHVjSFYwY3lBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b0p5NXRZWFJsY21saGJDMXBibkIxZENjcE8xeHlYRzRnSUNBZ0lDQWdJR3hsZENCamIzVnVkQ0E5SURBN1hISmNiaUFnSUNBZ0lDQWdYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCcGJuQjFkSE11YkdWdVozUm9PeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x1Y0hWMGMxdHBYUzUyWVd4MVpTNXNaVzVuZEdnZ1BpQXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIzVnVkQ3NyTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUNBZ0lDQWdJQ0FnSUNBZ1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvWTI5MWJuUWdQVDBnYVc1d2RYUnpMbXhsYm1kMGFDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjY2x4dUlDQWdJQ0FnSUNCOVpXeHpaWHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0IyWVd4cFpHRjBaVVpwWld4a2N5Z3BlMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzFoYVd4U1pXZGxlQ0E5SUM5ZVcyRXRla0V0V2pBdE9TNGhJeVFsSmljcUt5ODlQMTVmWUh0OGZYNHRYU3RBVzJFdGVrRXRXakF0T1Ywb1B6cGJZUzE2UVMxYU1DMDVMVjE3TUN3Mk1YMWJZUzE2UVMxYU1DMDVYU2svS0Q4NlhGd3VXMkV0ZWtFdFdqQXRPVjBvUHpwYllTMTZRUzFhTUMwNUxWMTdNQ3cyTVgxYllTMTZRUzFhTUMwNVhTay9LU29rTHp0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnWTNCbVZHVnpkQ0E5SUc1bGR5QmpjR1pXWVd4cFpHRjBaU2dwTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtNWhiV1ZHYVdWc1pDNTJZV3gxWlM1c1pXNW5kR2dnUENBektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlhKeWIzSk5aWE56WVdkbElEMGdYQ0pEWVcxd2J5QmtaWFpsSUdOdmJuUmxjaUF6SUdOaGNtRmpkR1Z5WlhNZ2IzVWdiV0ZwYzF3aU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duYm1GdFpTMWxjbkp2Y2ljcExtbHVibVZ5VkdWNGRDQTlJSFJvYVhNdVpYSnliM0pOWlhOellXZGxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXlRMjkxYm5Rckt6dGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnbmJtRnRaUzFsY25KdmNpY3BMbWx1Ym1WeVZHVjRkQ0E5SUZ3aVhDSTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hqY0daVVpYTjBMblpoYkdsa1lYUmxLSFJvYVhNdVkzQm1SbWxsYkdRdWRtRnNkV1VwSUQwOUlHWmhiSE5sS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaWEp5YjNKTlpYTnpZV2RsSUQwZ1hDSkZjM1JsSUVOUVJpQnV3Nk52SU1PcElIYkRvV3hwWkc5Y0lqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjJOd1ppMWxjbkp2Y2ljcExtbHVibVZ5VkdWNGRDQTlJSFJvYVhNdVpYSnliM0pOWlhOellXZGxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXlRMjkxYm5Rckt6dGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnblkzQm1MV1Z5Y205eUp5a3VhVzV1WlhKVVpYaDBJRDBnWENKY0lqdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtVnRZV2xzUm1sbGJHUXVkbUZzZFdVdWJXRjBZMmdvYldGcGJGSmxaMlY0S1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eVRXVnpjMkZuWlNBOUlGd2lSWE4wWlNCRmJXRnBiQ0J1dzZOdklNT3BJSGJEb1d4cFpHOWNJanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oyVnRZV2xzTFdWeWNtOXlKeWt1YVc1dVpYSlVaWGgwSUQwZ2RHaHBjeTVsY25KdmNrMWxjM05oWjJVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaWEp5YjNKRGIzVnVkQ3NyTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2RsYldGcGJDMWxjbkp2Y2ljcExtbHVibVZ5VkdWNGRDQTlJRndpWENJN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5Cb2IyNWxSbWxsYkdRdWRtRnNkV1VnUFQwZ1hDSmNJaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnljbTl5VFdWemMyRm5aU0E5SUZ3aVJYTjBaU0JVWld4bFptOXVaU0J1dzZOdklNT3BJSGJEb1d4cFpHOWNJanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0ozQm9iMjVsTFdWeWNtOXlKeWt1YVc1dVpYSlVaWGgwSUQwZ2RHaHBjeTVsY25KdmNrMWxjM05oWjJVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaWEp5YjNKRGIzVnVkQ3NyTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2R3YUc5dVpTMWxjbkp2Y2ljcExtbHVibVZ5VkdWNGRDQTlJRndpWENJN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWxjbkp2Y2tOdmRXNTBJRDRnTUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzU5WEhKY2JseHlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRVp2Y20xRGIyNTBjbTlzYkdWeU95SXNJbWx0Y0c5eWRDQjJZV3hwWkdGMGFXOXVRMjl1ZEhKdmJHeGxjaUJtY205dElGd2lMaTlHYjNKdFEyOXVkSEp2Ykd4bGNpNXFjMXdpTzF4eVhHNWNjbHh1WEhKY2JtTnNZWE56SUZWelpYSkRiMjUwY205c2JHVnllMXh5WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1h0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1sa08xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtRnRaVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ0WVdsc08xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVkzQm1PMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR2h2Ym1VN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjMlYwS0c1aGJXVXNJR1Z0WVdsc0xDQmpjR1lzSUhCb2IyNWxLWHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdZWEp5VlhObGNpQTlJRnRkTzF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0J1WlhkVmMyVnlJRDBnZTMwN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUdsa0lEMGdNVHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdkbUZzYVdSaGRHVkdhV1ZzWkhNZ1BTQnVaWGNnZG1Gc2FXUmhkR2x2YmtOdmJuUnliMnhzWlhJb0tUdGNjbHh1SUNBZ0lDQWdJQ0JjY2x4dUlDQWdJQ0FnSUNCY2NseHVJQ0FnSUNBZ0lDQnBaaUFvYkc5allXeFRkRzl5WVdkbExtZGxkRWwwWlcwb0ozVnpaWEp6SnlrZ0lUMGdiblZzYkNsN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdGeWNsVnpaWElnUFNCS1UwOU9MbkJoY25ObEtHeHZZMkZzVTNSdmNtRm5aUzVuWlhSSmRHVnRLQ2QxYzJWeWN5Y3BLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdhV1lnS0d4dlkyRnNVM1J2Y21GblpTNW5aWFJKZEdWdEtGd2liR0Z6ZEVsa1hDSXBJQ0U5SUc1MWJHd3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1FnUFNCd1lYSnpaVWx1ZENoc2IyTmhiRk4wYjNKaFoyVXVaMlYwU1hSbGJTaGNJbXhoYzNSSlpGd2lLU2tnS3lBeE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1cFpDQWdJQ0E5SUdsa0t5czdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXVZVzFsSUNBOUlHNWhiV1U3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYldGcGJDQTlJR1Z0WVdsc08xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVkzQm1JQ0FnUFNCamNHWTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdhRzl1WlNBOUlIQm9iMjVsTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0J1WlhkVmMyVnlJRDBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW1sa1hDSWdJQ0E2ZEdocGN5NXBaQ3dnWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRndpYm1GdFpWd2lJRG9nZEdocGN5NXVZVzFsTENCY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWENKamNHWmNJaUFnT2lCMGFHbHpMbU53Wml3Z1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aWNHaHZibVZjSWpvZ2RHaHBjeTV3YUc5dVpTd2dYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2laVzFoYVd4Y0lqb2dkR2hwY3k1bGJXRnBiQ0JjY2x4dUlDQWdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9kbUZzYVdSaGRHVkdhV1ZzWkhNdWRtRnNhV1JoZEdWR2FXVnNaSE1vS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNuSlZjMlZ5TG5CMWMyZ29ibVYzVlhObGNpazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZZMkZzVTNSdmNtRm5aUzV6WlhSSmRHVnRLQ2QxYzJWeWN5Y3NJRXBUVDA0dWMzUnlhVzVuYVdaNUtHRnljbFZ6WlhJcEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHOWpZV3hUZEc5eVlXZGxMbk5sZEVsMFpXMG9KMnhoYzNSSlpDY3NJSFJvYVhNdWFXUXBPeUFnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1oyVjBLQ2w3WEhKY2JseHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR1ZrYVhRb0tYdGNjbHh1WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1pHVnNaWFJsS0NsN1hISmNibHh5WEc0Z0lDQWdmVnh5WEc1OVhISmNibHh5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZWelpYSkRiMjUwY205c2JHVnlPeUlzSWk4dklFTnlaV0YwWldRZ1lua2dWRzl0WlNCV2FXeGxiR0ZjY2x4dUx5OGdkRzl0WlM1MmFXeGxiR0ZBWjIxaGFXd3VZMjl0WEhKY2JtTnNZWE56SUZaaGJHbGtZWFJsUTNCbWUxeHlYRzRnSUNBZ2RtRnNhV1JoZEdVb1kzQm1LWHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdjM1Z0SUQwZ01EdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2NtVnRZV2x1WkdWeU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCamNHWWdQU0JqY0dZdWNtVndiR0ZqWlNnbkxpY3NJQ2NuS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F1Y21Wd2JHRmpaU2duTGljc0lDY25LVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ25MU2NzSUNjbktWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdWRISnBiU2dwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1lXeHNSWEYxWVd3Z1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dZM0JtTG14bGJtZDBhQ0F0SURFN0lHa3JLeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kzQm1XMmxkSUNFOUlHTndabHRwSUNzZ01WMHBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoYkd4RmNYVmhiQ0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnBaaUFvWVd4c1JYRjFZV3dwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlERTdJR2tnUEQwZ09Uc2dhU3NyS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZFcwZ1BTQnpkVzBnS3lCd1lYSnpaVWx1ZENoamNHWXVjM1ZpYzNSeWFXNW5LR2tnTFNBeExDQnBLU2tnS2lBb01URWdMU0JwS1R0Y2NseHVJQ0FnSUNBZ0lDQnlaVzFoYVc1a1pYSWdQU0FvYzNWdElDb2dNVEFwSUNVZ01URTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2dvY21WdFlXbHVaR1Z5SUQwOUlERXdLU0I4ZkNBb2NtVnRZV2x1WkdWeUlEMDlJREV4S1NsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WdFlXbHVaR1Z5SUQwZ01EdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2NtVnRZV2x1WkdWeUlDRTlJSEJoY25ObFNXNTBLR053Wmk1emRXSnpkSEpwYm1jb09Td2dNVEFwS1NsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCemRXMGdQU0F3TzF4eVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F4T3lCcElEdzlJREV3T3lCcEt5c3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITjFiU0E5SUhOMWJTQXJJSEJoY25ObFNXNTBLR053Wmk1emRXSnpkSEpwYm1jb2FTQXRJREVzSUdrcEtTQXFJQ2d4TWlBdElHa3BPeUJ5WlcxaGFXNWtaWElnUFNBb2MzVnRJQ29nTVRBcElDVWdNVEU3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNnb2NtVnRZV2x1WkdWeUlEMDlJREV3S1NCOGZDQW9jbVZ0WVdsdVpHVnlJRDA5SURFeEtTbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnRZV2x1WkdWeUlEMGdNRHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9jbVZ0WVdsdVpHVnlJQ0U5SUhCaGNuTmxTVzUwS0dOd1ppNXpkV0p6ZEhKcGJtY29NVEFzSURFeEtTa3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEhKY2JpQWdJQ0I5WEhKY2JuMWNjbHh1WEhKY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ZtRnNhV1JoZEdWRGNHWTdYSEpjYmx4eVhHNGlMQ0pwYlhCdmNuUWdkWE5sY2tOdmJuUnliMnhzWlhJZ1puSnZiU0JjSWk0dlkyOXVkSEp2Ykd4bGNpOVZjMlZ5UTI5dWRISnZiR3hsY2k1cWMxd2lYSEpjYm1sdGNHOXlkQ0JsZG1WdWRFTnZiblJ5YjJ4c1pYSWdabkp2YlNCY0lpNHZZMjl1ZEhKdmJHeGxjaTlGZG1WdWRFTnZiblJ5YjJ4c1pYSXVhbk5jSWx4eVhHNXBiWEJ2Y25RZ1ptOXliVU52Ym5SeWIyeHNaWElnWm5KdmJTQmNJaTR2WTI5dWRISnZiR3hsY2k5R2IzSnRRMjl1ZEhKdmJHeGxjaTVxYzF3aVhISmNibWx0Y0c5eWRDQm1iM0p0UVc1cGJXRjBhVzl1SUdaeWIyMGdYQ0l1TDJOdmJYQnZibVZ1ZEhNdlJtOXliVUZ1YVcxaGRHbHZiaTVxYzF3aVhISmNibHh5WEc1a2IyTjFiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aVJFOU5RMjl1ZEdWdWRFeHZZV1JsWkZ3aUxDQW9LU0E5UGlCN1hISmNiaUFnSUNCamIyNXpkQ0JtYjNKdElEMGdibVYzSUdadmNtMUJibWx0WVhScGIyNG9LVHRjY2x4dUlDQWdJR052Ym5OMElHVjJaVzUwU0dGdVpHeGxjaUE5SUc1bGR5QmxkbVZ1ZEVOdmJuUnliMnhzWlhJb0tUdGNjbHh1SUNBZ0lHTnZibk4wSUdadmNtMUdhV3hzSUQwZ2JtVjNJR1p2Y20xRGIyNTBjbTlzYkdWeUtDazdYSEpjYmlBZ0lDQnNaWFFnYVc1d2RYUnpJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duTG0xaGRHVnlhV0ZzTFdsdWNIVjBKeWs3WEhKY2JpQWdJQ0JsZG1WdWRFaGhibVJzWlhJdVluVjBkRzl1UTJ4cFkyc29LVHNnWEhKY2JpQWdJQ0JtYjNKdExtRnVhVzFoZEdWR2IzSnRLQ2s3SUNBZ0lDQWdJQ0FnSUZ4eVhHNGdJQ0FnWEhKY2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdsdWNIVjBjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJR2x1Y0hWMGMxdHBYUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpWW14MWNsd2lMQ0FvS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htYjNKdFJtbHNiQzUyWVd4cFpHRjBaVVpwYkd4R2FXVnNaSE1vS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5YlM1c2IyRmtRblYwZEc5dVFXNXBiV0YwWlNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlGeHlYRzRnSUNBZ0lDQWdJSDBwWEhKY2JpQWdJQ0I5WEhKY2JuMHBPeUpkZlE9PSJ9
