(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormController = function () {
    function FormController() {
        _classCallCheck(this, FormController);
    }

    _createClass(FormController, [{
        key: 'animateForm',
        value: function animateForm() {
            var fields = document.querySelectorAll('.material-input');

            var _loop = function _loop(index) {
                fields[index].addEventListener('change', function () {
                    if (fields[index].value != "") {
                        fields[index].classList.add('has-value');
                    } else {
                        fields[index].classList.remove('has-value');
                    }
                });

                if (fields[index].value != "") {
                    fields[index].classList.add('has-value');
                } else {
                    fields[index].classList.remove('has-value');
                }
            };

            for (var index = 0; index < fields.length; index++) {
                _loop(index);
            }
        }
    }, {
        key: 'loadButtonAnimate',
        value: function loadButtonAnimate() {
            var button = document.getElementById('send');
            var loader = document.getElementById('loader');
            button.addEventListener('click', function (e) {
                button.setAttribute('value', '');
                loader.style.display = "block";
                setTimeout(function () {
                    button.setAttribute('value', 'Cadastrar');
                    loader.style.display = "none";
                }, 1500);
            });
        }
    }]);

    return FormController;
}();

module.exports = FormController;

},{}],2:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UserController = require('./UserController.js');

var _UserController2 = _interopRequireDefault(_UserController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventHandler = function () {
    function EventHandler() {
        _classCallCheck(this, EventHandler);

        this.user = new _UserController2.default();
    }

    _createClass(EventHandler, [{
        key: 'buttonClick',
        value: function buttonClick() {
            var _this = this;

            var button = document.getElementById('send');
            if (button != null) {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    var nameField = document.getElementById('name').value;
                    var emailField = document.getElementById('email').value;
                    var cpfField = document.getElementById('cpf').value;
                    var phoneField = document.getElementById('phone').value;

                    if (button.classList.value.indexOf('disabled') == -1) {
                        _this.user.set(nameField, emailField, cpfField, phoneField);
                    }
                });
            }
        }
    }, {
        key: 'deleteClick',
        value: function deleteClick() {
            var _this2 = this;

            var deleteBtn = document.querySelector('.list-user');
            var currentEl = null;
            var listItem = null;
            if (deleteBtn != null) {
                deleteBtn.addEventListener('click', function (e) {
                    e.preventDefault();
                    if (e.target && e.target.classList.contains('delete')) {
                        currentEl = e.target;
                        listItem = document.getElementById(currentEl.getAttribute('data-id')).remove();
                        _this2.user.delete(currentEl.getAttribute('data-id'));
                    }
                });
            }
        }
    }]);

    return EventHandler;
}();

module.exports = EventHandler;

},{"./UserController.js":4}],3:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _CpfValidate = require('../helper/CpfValidate.js');

var _CpfValidate2 = _interopRequireDefault(_CpfValidate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormController = function () {
    function FormController() {
        _classCallCheck(this, FormController);

        this.nameField = document.getElementById('name');
        this.emailField = document.getElementById('email');
        this.cpfField = document.getElementById('cpf');
        this.phoneField = document.getElementById('phone');
        this.errorMessage = null;
        this.errorCount = 0;
    }

    _createClass(FormController, [{
        key: 'validateFillFields',
        value: function validateFillFields() {
            var inputs = document.querySelectorAll('.material-input');
            var count = 0;

            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].value.length > 0) {
                    count++;
                }
            }

            if (count == inputs.length) {
                return true;
            } else {
                return false;
            }
        }
    }, {
        key: 'validateFields',
        value: function validateFields() {
            var mailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
            var cpfTest = new _CpfValidate2.default();
            if (this.nameField.value.length < 3) {
                this.errorMessage = "Campo deve conter 3 caracteres ou mais";
                document.getElementById('name-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                document.getElementById('name-error').innerText = "";
            }
            if (cpfTest.validate(this.cpfField.value) == false) {
                this.errorMessage = "Este CPF não é válido";
                document.getElementById('cpf-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                document.getElementById('cpf-error').innerText = "";
            }
            if (!this.emailField.value.match(mailRegex)) {
                this.errorMessage = "Este Email não é válido";
                document.getElementById('email-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                document.getElementById('email-error').innerText = "";
            }
            if (this.phoneField.value == "") {
                this.errorMessage = "Este Telefone não é válido";
                document.getElementById('phone-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                document.getElementById('phone-error').innerText = "";
            }

            if (this.errorCount > 0) {
                return false;
            } else {
                return true;
            }
        }
    }]);

    return FormController;
}();

module.exports = FormController;

},{"../helper/CpfValidate.js":5}],4:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FormController = require("./FormController.js");

var _FormController2 = _interopRequireDefault(_FormController);

var _CreateElement = require("../helper/CreateElement.js");

var _CreateElement2 = _interopRequireDefault(_CreateElement);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UserController = function () {
    function UserController() {
        _classCallCheck(this, UserController);

        this.id;
        this.name;
        this.email;
        this.cpf;
        this.phone;
    }

    _createClass(UserController, [{
        key: "set",
        value: function set(name, email, cpf, phone) {
            var arrUser = [];
            var newUser = {};
            var id = 1;
            var validateFields = new _FormController2.default();

            if (localStorage.getItem('users') != null) {
                arrUser = JSON.parse(localStorage.getItem('users'));
            }
            if (localStorage.getItem("lastId") != null) {
                id = parseInt(localStorage.getItem("lastId")) + 1;
            }

            this.id = id++;
            this.name = name;
            this.email = email;
            this.cpf = cpf;
            this.phone = phone;

            newUser = {
                "id": this.id,
                "name": this.name,
                "cpf": this.cpf,
                "phone": this.phone,
                "email": this.email
            };

            if (validateFields.validateFields()) {
                arrUser.push(newUser);
                localStorage.setItem('users', JSON.stringify(arrUser));
                localStorage.setItem('lastId', this.id);
            }
        }
    }, {
        key: "get",
        value: function get(funcDelete) {
            var template = "";
            var userList = JSON.parse(localStorage.getItem('users'));
            var userListEl = document.getElementById('list-user');
            if (userListEl != null) {
                userListEl.innerHTML = '';

                userList.forEach(function (el) {
                    var listItem = document.createElement('li');
                    listItem.classList.add('list-user-item');
                    listItem.setAttribute('id', el.id);
                    template = "<div class=\"user-name-content\">\n                                        <span class=\"list-text\" id=\"user-name\">" + el.name + "</span>\n                                    </div>\n                                    <div class=\"user-full-content\">\n                                        <span class=\"list-text\" id=\"user-email\">" + el.email + "</span>\n                                        <span class=\"list-text\" id=\"user-cpf\">" + el.cpf + "</span>\n                                        <span class=\"list-text\" id=\"user-phone\">" + el.phone + "</span>\n                                        <button type=\"button\" id=\"edit\">Editar</button>\n                                        <button type=\"button\" class=\"delete\" data-id=" + el.id + ">Deletar</button>\n                                    </div>";
                    listItem.innerHTML = template;
                    userListEl.appendChild(listItem);
                });
            }
        }
    }, {
        key: "delete",
        value: function _delete(itemId) {
            var userList = JSON.parse(localStorage.getItem('users'));
            for (var i = 0; i < userList.length; i++) {
                if (parseInt(itemId) == userList[i].id) {
                    userList.splice(i, 1);
                }
            }
            localStorage.setItem('users', JSON.stringify(userList));
        }
    }, {
        key: "edit",
        value: function edit() {}
    }]);

    return UserController;
}();

module.exports = UserController;

},{"../helper/CreateElement.js":6,"./FormController.js":3}],5:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Created by Tome Vilela
// tome.vilela@gmail.com
var ValidateCpf = function () {
    function ValidateCpf() {
        _classCallCheck(this, ValidateCpf);
    }

    _createClass(ValidateCpf, [{
        key: 'validate',
        value: function validate(cpf) {
            var sum = 0;
            var remainder = void 0;

            cpf = cpf.replace('.', '').replace('.', '').replace('-', '').trim();

            var allEqual = true;
            for (var i = 0; i < cpf.length - 1; i++) {
                if (cpf[i] != cpf[i + 1]) allEqual = false;
            }
            if (allEqual) return false;

            for (var i = 1; i <= 9; i++) {
                sum = sum + parseInt(cpf.substring(i - 1, i)) * (11 - i);
            }remainder = sum * 10 % 11;

            if (remainder == 10 || remainder == 11) remainder = 0;
            if (remainder != parseInt(cpf.substring(9, 10))) return false;

            sum = 0;
            for (var i = 1; i <= 10; i++) {
                sum = sum + parseInt(cpf.substring(i - 1, i)) * (12 - i);
            }remainder = sum * 10 % 11;

            if (remainder == 10 || remainder == 11) remainder = 0;
            if (remainder != parseInt(cpf.substring(10, 11))) return false;

            return true;
        }
    }]);

    return ValidateCpf;
}();

module.exports = ValidateCpf;

},{}],6:[function(require,module,exports){
'use strict';

var createEl = function createEl(parent, arr, className) {
    for (var i = 0; i < arr.length; i++) {
        var el = document.createElement(arr[i]);
        el.setAttribute('class', className);
        if (parent != null) {
            parent.appendChild(el);
        }
    }
};

module.exports = createEl;

},{}],7:[function(require,module,exports){
"use strict";

var _UserController = require("./controller/UserController.js");

var _UserController2 = _interopRequireDefault(_UserController);

var _EventController = require("./controller/EventController.js");

var _EventController2 = _interopRequireDefault(_EventController);

var _FormController = require("./controller/FormController.js");

var _FormController2 = _interopRequireDefault(_FormController);

var _FormAnimation = require("./components/FormAnimation.js");

var _FormAnimation2 = _interopRequireDefault(_FormAnimation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

document.addEventListener("DOMContentLoaded", function () {
    init();
});

var init = function init() {
    var form = new _FormAnimation2.default();
    var eventHandler = new _EventController2.default();
    var formFill = new _FormController2.default();
    var user = new _UserController2.default();

    var inputs = document.querySelectorAll('.material-input');
    var button = document.getElementById('send');

    form.animateForm();
    eventHandler.buttonClick();
    eventHandler.deleteClick();

    for (var i = 0; i < inputs.length; i++) {
        inputs[i].addEventListener("blur", function () {
            if (formFill.validateFillFields()) {
                button.classList.remove('disabled');
                if (formFill.validateFields()) {
                    form.loadButtonAnimate();
                }
            }
        });
    }
    user.get();
};

},{"./components/FormAnimation.js":1,"./controller/EventController.js":2,"./controller/FormController.js":3,"./controller/UserController.js":4}]},{},[7])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvc2NyaXB0cy9jb21wb25lbnRzL0Zvcm1BbmltYXRpb24uanMiLCJzcmMvc2NyaXB0cy9jb250cm9sbGVyL0V2ZW50Q29udHJvbGxlci5qcyIsInNyYy9zY3JpcHRzL2NvbnRyb2xsZXIvRm9ybUNvbnRyb2xsZXIuanMiLCJzcmMvc2NyaXB0cy9jb250cm9sbGVyL1VzZXJDb250cm9sbGVyLmpzIiwic3JjL3NjcmlwdHMvaGVscGVyL0NwZlZhbGlkYXRlLmpzIiwic3JjL3NjcmlwdHMvaGVscGVyL0NyZWF0ZUVsZW1lbnQuanMiLCJzcmMvc2NyaXB0cy9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0lDQU0sYzs7Ozs7OztzQ0FDVztBQUNULGdCQUFJLFNBQVMsU0FBUyxnQkFBVCxDQUEwQixpQkFBMUIsQ0FBYjs7QUFEUyx1Q0FFQSxLQUZBO0FBR0wsdUJBQU8sS0FBUCxFQUFjLGdCQUFkLENBQStCLFFBQS9CLEVBQXlDLFlBQUk7QUFDekMsd0JBQUksT0FBTyxLQUFQLEVBQWMsS0FBZCxJQUF1QixFQUEzQixFQUErQjtBQUMzQiwrQkFBTyxLQUFQLEVBQWMsU0FBZCxDQUF3QixHQUF4QixDQUE0QixXQUE1QjtBQUNILHFCQUZELE1BRU87QUFDSCwrQkFBTyxLQUFQLEVBQWMsU0FBZCxDQUF3QixNQUF4QixDQUErQixXQUEvQjtBQUNIO0FBQ0osaUJBTkQ7O0FBUUEsb0JBQUksT0FBTyxLQUFQLEVBQWMsS0FBZCxJQUF1QixFQUEzQixFQUE4QjtBQUMxQiwyQkFBTyxLQUFQLEVBQWMsU0FBZCxDQUF3QixHQUF4QixDQUE0QixXQUE1QjtBQUNILGlCQUZELE1BRUs7QUFDRCwyQkFBTyxLQUFQLEVBQWMsU0FBZCxDQUF3QixNQUF4QixDQUErQixXQUEvQjtBQUNIO0FBZkk7O0FBRVQsaUJBQUssSUFBSSxRQUFRLENBQWpCLEVBQW9CLFFBQVEsT0FB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cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9cmV0dXJuIGV9KSgpIiwiY2xhc3MgRm9ybUNvbnRyb2xsZXJ7XHJcbiAgICBhbmltYXRlRm9ybSgpe1xyXG4gICAgICAgIGxldCBmaWVsZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubWF0ZXJpYWwtaW5wdXQnKTtcclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZmllbGRzLmxlbmd0aDsgaW5kZXgrKykgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmaWVsZHNbaW5kZXhdLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpPT57XHJcbiAgICAgICAgICAgICAgICBpZiAoZmllbGRzW2luZGV4XS52YWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdoYXMtdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzW2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChmaWVsZHNbaW5kZXhdLnZhbHVlICE9IFwiXCIpe1xyXG4gICAgICAgICAgICAgICAgZmllbGRzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdoYXMtdmFsdWUnKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBmaWVsZHNbaW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy12YWx1ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBsb2FkQnV0dG9uQW5pbWF0ZSgpe1xyXG4gICAgICAgIGxldCBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VuZCcpO1xyXG4gICAgICAgIGxldCBsb2FkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9hZGVyJyk7XHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgndmFsdWUnLCAnJyk7XHJcbiAgICAgICAgICAgIGxvYWRlci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgJ0NhZGFzdHJhcicpO1xyXG4gICAgICAgICAgICAgICAgbG9hZGVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgfSwgMTUwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRm9ybUNvbnRyb2xsZXI7IiwiaW1wb3J0IHVzZXJDb250cm9sbGVyIGZyb20gJy4vVXNlckNvbnRyb2xsZXIuanMnO1xyXG5cclxuXHJcbmNsYXNzIEV2ZW50SGFuZGxlcntcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy51c2VyID0gbmV3IHVzZXJDb250cm9sbGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYnV0dG9uQ2xpY2soKXtcclxuICAgICAgICBsZXQgYnV0dG9uICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZW5kJyk7XHJcbiAgICAgICAgaWYgKGJ1dHRvbiAhPSBudWxsKXtcclxuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpPT57ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG5hbWVGaWVsZCAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZScpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgbGV0IGVtYWlsRmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW1haWwnKS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGxldCBjcGZGaWVsZCAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NwZicpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgbGV0IHBob25lRmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGhvbmUnKS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5jbGFzc0xpc3QudmFsdWUuaW5kZXhPZignZGlzYWJsZWQnKSA9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXNlci5zZXQobmFtZUZpZWxkLCBlbWFpbEZpZWxkLCBjcGZGaWVsZCwgcGhvbmVGaWVsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVDbGljaygpe1xyXG4gICAgICAgIGxldCBkZWxldGVCdG4gID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxpc3QtdXNlcicpO1xyXG4gICAgICAgIGxldCBjdXJyZW50RWwgID0gbnVsbDtcclxuICAgICAgICBsZXQgbGlzdEl0ZW0gICA9IG51bGw7XHJcbiAgICAgICAgaWYgKGRlbGV0ZUJ0biAhPSBudWxsKXtcclxuICAgICAgICAgICAgZGVsZXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGlmICggZS50YXJnZXQgJiYgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCAnZGVsZXRlJyApICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRFbCA9IGUudGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RJdGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY3VycmVudEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVzZXIuZGVsZXRlKGN1cnJlbnRFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50SGFuZGxlcjsiLCJpbXBvcnQgY3BmVmFsaWRhdGUgZnJvbSAnLi4vaGVscGVyL0NwZlZhbGlkYXRlLmpzJztcclxuXHJcbmNsYXNzIEZvcm1Db250cm9sbGVye1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLm5hbWVGaWVsZCAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYW1lJyk7XHJcbiAgICAgICAgdGhpcy5lbWFpbEZpZWxkICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW1haWwnKTtcclxuICAgICAgICB0aGlzLmNwZkZpZWxkICAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjcGYnKTtcclxuICAgICAgICB0aGlzLnBob25lRmllbGQgICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwaG9uZScpO1xyXG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmVycm9yQ291bnQgICA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgdmFsaWRhdGVGaWxsRmllbGRzKCl7XHJcbiAgICAgICAgbGV0IGlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tYXRlcmlhbC1pbnB1dCcpO1xyXG4gICAgICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGlucHV0c1tpXS52YWx1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICB9ICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY291bnQgPT0gaW5wdXRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YWxpZGF0ZUZpZWxkcygpe1xyXG4gICAgICAgIGNvbnN0IG1haWxSZWdleCA9IC9eW2EtekEtWjAtOS4hIyQlJicqKy89P15fYHt8fX4tXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSokLztcclxuICAgICAgICBsZXQgY3BmVGVzdCA9IG5ldyBjcGZWYWxpZGF0ZSgpO1xyXG4gICAgICAgIGlmICh0aGlzLm5hbWVGaWVsZC52YWx1ZS5sZW5ndGggPCAzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlID0gXCJDYW1wbyBkZXZlIGNvbnRlciAzIGNhcmFjdGVyZXMgb3UgbWFpc1wiO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZS1lcnJvcicpLmlubmVyVGV4dCA9IHRoaXMuZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yQ291bnQrKztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZS1lcnJvcicpLmlubmVyVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjcGZUZXN0LnZhbGlkYXRlKHRoaXMuY3BmRmllbGQudmFsdWUpID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlID0gXCJFc3RlIENQRiBuw6NvIMOpIHbDoWxpZG9cIjtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NwZi1lcnJvcicpLmlubmVyVGV4dCA9IHRoaXMuZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yQ291bnQrKztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3BmLWVycm9yJykuaW5uZXJUZXh0ID0gXCJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmVtYWlsRmllbGQudmFsdWUubWF0Y2gobWFpbFJlZ2V4KSkge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IFwiRXN0ZSBFbWFpbCBuw6NvIMOpIHbDoWxpZG9cIjtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VtYWlsLWVycm9yJykuaW5uZXJUZXh0ID0gdGhpcy5lcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JDb3VudCsrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbWFpbC1lcnJvcicpLmlubmVyVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnBob25lRmllbGQudmFsdWUgPT0gXCJcIikge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IFwiRXN0ZSBUZWxlZm9uZSBuw6NvIMOpIHbDoWxpZG9cIjtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bob25lLWVycm9yJykuaW5uZXJUZXh0ID0gdGhpcy5lcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JDb3VudCsrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwaG9uZS1lcnJvcicpLmlubmVyVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5lcnJvckNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1Db250cm9sbGVyOyIsImltcG9ydCB2YWxpZGF0aW9uQ29udHJvbGxlciBmcm9tIFwiLi9Gb3JtQ29udHJvbGxlci5qc1wiO1xyXG5pbXBvcnQgY3JlYXRlRWwgZnJvbSBcIi4uL2hlbHBlci9DcmVhdGVFbGVtZW50LmpzXCI7XHJcblxyXG5cclxuY2xhc3MgVXNlckNvbnRyb2xsZXJ7XHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHRoaXMuaWQ7XHJcbiAgICAgICAgdGhpcy5uYW1lO1xyXG4gICAgICAgIHRoaXMuZW1haWw7XHJcbiAgICAgICAgdGhpcy5jcGY7XHJcbiAgICAgICAgdGhpcy5waG9uZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQobmFtZSwgZW1haWwsIGNwZiwgcGhvbmUpe1xyXG4gICAgICAgIGxldCBhcnJVc2VyID0gW107XHJcbiAgICAgICAgbGV0IG5ld1VzZXIgPSB7fTtcclxuICAgICAgICBsZXQgaWQgPSAxO1xyXG4gICAgICAgIGxldCB2YWxpZGF0ZUZpZWxkcyA9IG5ldyB2YWxpZGF0aW9uQ29udHJvbGxlcigpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnMnKSAhPSBudWxsKXtcclxuICAgICAgICAgICAgYXJyVXNlciA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJzJykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJsYXN0SWRcIikgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZCA9IHBhcnNlSW50KGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwibGFzdElkXCIpKSArIDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmlkICAgID0gaWQrKztcclxuICAgICAgICB0aGlzLm5hbWUgID0gbmFtZTtcclxuICAgICAgICB0aGlzLmVtYWlsID0gZW1haWw7XHJcbiAgICAgICAgdGhpcy5jcGYgICA9IGNwZjtcclxuICAgICAgICB0aGlzLnBob25lID0gcGhvbmU7XHJcblxyXG4gICAgICAgIG5ld1VzZXIgPSB7XHJcbiAgICAgICAgICAgIFwiaWRcIiAgIDp0aGlzLmlkLCBcclxuICAgICAgICAgICAgXCJuYW1lXCIgOiB0aGlzLm5hbWUsIFxyXG4gICAgICAgICAgICBcImNwZlwiICA6IHRoaXMuY3BmLCBcclxuICAgICAgICAgICAgXCJwaG9uZVwiOiB0aGlzLnBob25lLCBcclxuICAgICAgICAgICAgXCJlbWFpbFwiOiB0aGlzLmVtYWlsIFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh2YWxpZGF0ZUZpZWxkcy52YWxpZGF0ZUZpZWxkcygpKSB7XHJcbiAgICAgICAgICAgIGFyclVzZXIucHVzaChuZXdVc2VyKTtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXJzJywgSlNPTi5zdHJpbmdpZnkoYXJyVXNlcikpO1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGFzdElkJywgdGhpcy5pZCk7ICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQoZnVuY0RlbGV0ZSl7XHJcbiAgICAgICAgbGV0IHRlbXBsYXRlID0gXCJcIjtcclxuICAgICAgICBjb25zdCB1c2VyTGlzdCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJzJykpO1xyXG4gICAgICAgIGNvbnN0IHVzZXJMaXN0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGlzdC11c2VyJyk7XHJcbiAgICAgICAgaWYodXNlckxpc3RFbCAhPSBudWxsKXtcclxuICAgICAgICAgICAgdXNlckxpc3RFbC5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgICAgICAgICAgIHVzZXJMaXN0LmZvckVhY2goKGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGlzdEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gICAgICAgICAgICAgICAgbGlzdEl0ZW0uY2xhc3NMaXN0LmFkZCgnbGlzdC11c2VyLWl0ZW0nKTtcclxuICAgICAgICAgICAgICAgIGxpc3RJdGVtLnNldEF0dHJpYnV0ZSgnaWQnLCBlbC5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gYDxkaXYgY2xhc3M9XCJ1c2VyLW5hbWUtY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsaXN0LXRleHRcIiBpZD1cInVzZXItbmFtZVwiPiR7ZWwubmFtZX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidXNlci1mdWxsLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGlzdC10ZXh0XCIgaWQ9XCJ1c2VyLWVtYWlsXCI+JHtlbC5lbWFpbH08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxpc3QtdGV4dFwiIGlkPVwidXNlci1jcGZcIj4ke2VsLmNwZn08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxpc3QtdGV4dFwiIGlkPVwidXNlci1waG9uZVwiPiR7ZWwucGhvbmV9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJlZGl0XCI+RWRpdGFyPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImRlbGV0ZVwiIGRhdGEtaWQ9JHtlbC5pZH0+RGVsZXRhcjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gO1xyXG4gICAgICAgICAgICAgICAgbGlzdEl0ZW0uaW5uZXJIVE1MID0gdGVtcGxhdGU7XHJcbiAgICAgICAgICAgICAgICB1c2VyTGlzdEVsLmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZShpdGVtSWQpe1xyXG4gICAgICAgIGNvbnN0IHVzZXJMaXN0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnMnKSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1c2VyTGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZihwYXJzZUludChpdGVtSWQpID09IHVzZXJMaXN0W2ldLmlkKXtcclxuICAgICAgICAgICAgICAgIHVzZXJMaXN0LnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcnMnLCBKU09OLnN0cmluZ2lmeSh1c2VyTGlzdCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGVkaXQoKXtcclxuXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFVzZXJDb250cm9sbGVyOyIsIi8vIENyZWF0ZWQgYnkgVG9tZSBWaWxlbGFcclxuLy8gdG9tZS52aWxlbGFAZ21haWwuY29tXHJcbmNsYXNzIFZhbGlkYXRlQ3Bme1xyXG4gICAgdmFsaWRhdGUoY3BmKXtcclxuICAgICAgICBsZXQgc3VtID0gMDtcclxuICAgICAgICBsZXQgcmVtYWluZGVyO1xyXG5cclxuICAgICAgICBjcGYgPSBjcGYucmVwbGFjZSgnLicsICcnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgnLicsICcnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgnLScsICcnKVxyXG4gICAgICAgICAgICAudHJpbSgpO1xyXG5cclxuICAgICAgICBsZXQgYWxsRXF1YWwgPSB0cnVlO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3BmLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoY3BmW2ldICE9IGNwZltpICsgMV0pXHJcbiAgICAgICAgICAgICAgICBhbGxFcXVhbCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYWxsRXF1YWwpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gOTsgaSsrKVxyXG4gICAgICAgICAgICBzdW0gPSBzdW0gKyBwYXJzZUludChjcGYuc3Vic3RyaW5nKGkgLSAxLCBpKSkgKiAoMTEgLSBpKTtcclxuICAgICAgICByZW1haW5kZXIgPSAoc3VtICogMTApICUgMTE7XHJcblxyXG4gICAgICAgIGlmICgocmVtYWluZGVyID09IDEwKSB8fCAocmVtYWluZGVyID09IDExKSlcclxuICAgICAgICAgICAgcmVtYWluZGVyID0gMDtcclxuICAgICAgICBpZiAocmVtYWluZGVyICE9IHBhcnNlSW50KGNwZi5zdWJzdHJpbmcoOSwgMTApKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICBzdW0gPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IDEwOyBpKyspXHJcbiAgICAgICAgICAgIHN1bSA9IHN1bSArIHBhcnNlSW50KGNwZi5zdWJzdHJpbmcoaSAtIDEsIGkpKSAqICgxMiAtIGkpOyByZW1haW5kZXIgPSAoc3VtICogMTApICUgMTE7XHJcblxyXG4gICAgICAgIGlmICgocmVtYWluZGVyID09IDEwKSB8fCAocmVtYWluZGVyID09IDExKSlcclxuICAgICAgICAgICAgcmVtYWluZGVyID0gMDtcclxuICAgICAgICBpZiAocmVtYWluZGVyICE9IHBhcnNlSW50KGNwZi5zdWJzdHJpbmcoMTAsIDExKSkpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVmFsaWRhdGVDcGY7XHJcblxyXG4iLCJjb25zdCBjcmVhdGVFbCA9IChwYXJlbnQsIGFyciwgY2xhc3NOYW1lKSA9PiB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYXJyW2ldKTtcclxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xhc3NOYW1lKTtcclxuICAgICAgICBpZihwYXJlbnQgIT0gbnVsbCl7XHJcbiAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChlbCk7XHJcbiAgICAgICAgfVxyXG5cdH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVFbDsiLCJpbXBvcnQgdXNlckNvbnRyb2xsZXIgZnJvbSBcIi4vY29udHJvbGxlci9Vc2VyQ29udHJvbGxlci5qc1wiXHJcbmltcG9ydCBldmVudENvbnRyb2xsZXIgZnJvbSBcIi4vY29udHJvbGxlci9FdmVudENvbnRyb2xsZXIuanNcIlxyXG5pbXBvcnQgZm9ybUNvbnRyb2xsZXIgZnJvbSBcIi4vY29udHJvbGxlci9Gb3JtQ29udHJvbGxlci5qc1wiXHJcbmltcG9ydCBmb3JtQW5pbWF0aW9uIGZyb20gXCIuL2NvbXBvbmVudHMvRm9ybUFuaW1hdGlvbi5qc1wiXHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XHJcbiAgICBpbml0KCk7XHJcbn0pO1xyXG5cclxuY29uc3QgaW5pdCA9ICgpID0+e1xyXG4gICAgY29uc3QgZm9ybSA9IG5ldyBmb3JtQW5pbWF0aW9uKCk7XHJcbiAgICBjb25zdCBldmVudEhhbmRsZXIgPSBuZXcgZXZlbnRDb250cm9sbGVyKCk7XHJcbiAgICBjb25zdCBmb3JtRmlsbCA9IG5ldyBmb3JtQ29udHJvbGxlcigpO1xyXG4gICAgY29uc3QgdXNlciA9IG5ldyB1c2VyQ29udHJvbGxlcigpO1xyXG4gICAgXHJcbiAgICBsZXQgaW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1hdGVyaWFsLWlucHV0Jyk7XHJcbiAgICBsZXQgYnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlbmQnKTtcclxuICAgIFxyXG4gICAgZm9ybS5hbmltYXRlRm9ybSgpOyAgICAgICAgICBcclxuICAgIGV2ZW50SGFuZGxlci5idXR0b25DbGljaygpOyBcclxuICAgIGV2ZW50SGFuZGxlci5kZWxldGVDbGljaygpOyBcclxuICAgIFxyXG4gICAgXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlucHV0c1tpXS5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChmb3JtRmlsbC52YWxpZGF0ZUZpbGxGaWVsZHMoKSkge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICBpZihmb3JtRmlsbC52YWxpZGF0ZUZpZWxkcygpKXtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtLmxvYWRCdXR0b25BbmltYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgfSlcclxuICAgIH0gICAgXHJcbiAgICB1c2VyLmdldCgpO1xyXG59Il0sInByZUV4aXN0aW5nQ29tbWVudCI6Ii8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0p6Y21NdmMyTnlhWEIwY3k5amIyMXdiMjVsYm5SekwwWnZjbTFCYm1sdFlYUnBiMjR1YW5NaUxDSnpjbU12YzJOeWFYQjBjeTlqYjI1MGNtOXNiR1Z5TDBWMlpXNTBRMjl1ZEhKdmJHeGxjaTVxY3lJc0luTnlZeTl6WTNKcGNIUnpMMk52Ym5SeWIyeHNaWEl2Um05eWJVTnZiblJ5YjJ4c1pYSXVhbk1pTENKemNtTXZjMk55YVhCMGN5OWpiMjUwY205c2JHVnlMMVZ6WlhKRGIyNTBjbTlzYkdWeUxtcHpJaXdpYzNKakwzTmpjbWx3ZEhNdmFHVnNjR1Z5TDBOd1psWmhiR2xrWVhSbExtcHpJaXdpYzNKakwzTmpjbWx3ZEhNdmFHVnNjR1Z5TDBOeVpXRjBaVVZzWlcxbGJuUXVhbk1pTENKemNtTXZjMk55YVhCMGN5OXRZV2x1TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPenM3T3pzN08wbERRVTBzWXpzN096czdPenR6UTBGRFZ6dEJRVU5VTEdkQ1FVRkpMRk5CUVZNc1UwRkJVeXhuUWtGQlZDeERRVUV3UWl4cFFrRkJNVUlzUTBGQllqczdRVUZFVXl4MVEwRkZRU3hMUVVaQk8wRkJSMHdzZFVKQlFVOHNTMEZCVUN4RlFVRmpMR2RDUVVGa0xFTkJRU3RDTEZGQlFTOUNMRVZCUVhsRExGbEJRVWs3UVVGRGVrTXNkMEpCUVVrc1QwRkJUeXhMUVVGUUxFVkJRV01zUzBGQlpDeEpRVUYxUWl4RlFVRXpRaXhGUVVFclFqdEJRVU16UWl3clFrRkJUeXhMUVVGUUxFVkJRV01zVTBGQlpDeERRVUYzUWl4SFFVRjRRaXhEUVVFMFFpeFhRVUUxUWp0QlFVTklMSEZDUVVaRUxFMUJSVTg3UVVGRFNDd3JRa0ZCVHl4TFFVRlFMRVZCUVdNc1UwRkJaQ3hEUVVGM1FpeE5RVUY0UWl4RFFVRXJRaXhYUVVFdlFqdEJRVU5JTzBGQlEwb3NhVUpCVGtRN08wRkJVVUVzYjBKQlFVa3NUMEZCVHl4TFFVRlFMRVZCUVdNc1MwRkJaQ3hKUVVGMVFpeEZRVUV6UWl4RlFVRTRRanRCUVVNeFFpd3lRa0ZCVHl4TFFVRlFMRVZCUVdNc1UwRkJaQ3hEUVVGM1FpeEhRVUY0UWl4RFFVRTBRaXhYUVVFMVFqdEJRVU5JTEdsQ1FVWkVMRTFCUlVzN1FVRkRSQ3d5UWtGQlR5eExRVUZRTEVWQlFXTXNVMEZCWkN4RFFVRjNRaXhOUVVGNFFpeERRVUVyUWl4WFFVRXZRanRCUVVOSU8wRkJaa2s3TzBGQlJWUXNhVUpCUVVzc1NVRkJTU3hSUVVGUkxFTkJRV3BDTEVWQlFXOUNMRkZCUVZFc1QwRkJUeXhOUVVGdVF5eEZRVUV5UXl4UFFVRXpReXhGUVVGdlJEdEJRVUZCTEhOQ1FVRXpReXhMUVVFeVF6dEJRV051UkR0QlFVTktPenM3TkVOQlJXdENPMEZCUTJZc1owSkJRVWtzVTBGQlV5eFRRVUZUTEdOQlFWUXNRMEZCZDBJc1RVRkJlRUlzUTBGQllqdEJRVU5CTEdkQ1FVRkpMRk5CUVZNc1UwRkJVeXhqUVVGVUxFTkJRWGRDTEZGQlFYaENMRU5CUVdJN1FVRkRRU3h0UWtGQlR5eG5Ra0ZCVUN4RFFVRjNRaXhQUVVGNFFpeEZRVUZwUXl4VlFVRkRMRU5CUVVRc1JVRkJUenRCUVVOd1F5eDFRa0ZCVHl4WlFVRlFMRU5CUVc5Q0xFOUJRWEJDTEVWQlFUWkNMRVZCUVRkQ08wRkJRMEVzZFVKQlFVOHNTMEZCVUN4RFFVRmhMRTlCUVdJc1IwRkJkVUlzVDBGQmRrSTdRVUZEUVN3eVFrRkJWeXhaUVVGTk8wRkJRMklzTWtKQlFVOHNXVUZCVUN4RFFVRnZRaXhQUVVGd1FpeEZRVUUyUWl4WFFVRTNRanRCUVVOQkxESkNRVUZQTEV0QlFWQXNRMEZCWVN4UFFVRmlMRWRCUVhWQ0xFMUJRWFpDTzBGQlEwZ3NhVUpCU0VRc1JVRkhSeXhKUVVoSU8wRkJTVWdzWVVGUVJEdEJRVkZJT3pzN096czdRVUZIVEN4UFFVRlBMRTlCUVZBc1IwRkJhVUlzWTBGQmFrSTdPenM3T3pzN1FVTnNRMEU3T3pzN096czdPMGxCUjAwc1dUdEJRVU5HTERSQ1FVRmhPMEZCUVVFN08wRkJRMVFzWVVGQlN5eEpRVUZNTEVkQlFWa3NPRUpCUVZvN1FVRkRTRHM3T3p0elEwRkZXVHRCUVVGQk96dEJRVU5VTEdkQ1FVRkpMRk5CUVZVc1UwRkJVeXhqUVVGVUxFTkJRWGRDTEUxQlFYaENMRU5CUVdRN1FVRkRRU3huUWtGQlNTeFZRVUZWTEVsQlFXUXNSVUZCYlVJN1FVRkRaaXgxUWtGQlR5eG5Ra0ZCVUN4RFFVRjNRaXhQUVVGNFFpeEZRVUZwUXl4VlFVRkRMRU5CUVVRc1JVRkJTenRCUVVOc1F5eHpRa0ZCUlN4alFVRkdPMEZCUTBFc2MwSkJRVVVzWlVGQlJqdEJRVU5CTEhkQ1FVRkpMRmxCUVdFc1UwRkJVeXhqUVVGVUxFTkJRWGRDTEUxQlFYaENMRVZCUVdkRExFdEJRV3BFTzBGQlEwRXNkMEpCUVVrc1lVRkJZU3hUUVVGVExHTkJRVlFzUTBGQmQwSXNUMEZCZUVJc1JVRkJhVU1zUzBGQmJFUTdRVUZEUVN4M1FrRkJTU3hYUVVGaExGTkJRVk1zWTBGQlZDeERRVUYzUWl4TFFVRjRRaXhGUVVFclFpeExRVUZvUkR0QlFVTkJMSGRDUVVGSkxHRkJRV0VzVTBGQlV5eGpRVUZVTEVOQlFYZENMRTlCUVhoQ0xFVkJRV2xETEV0QlFXeEVPenRCUVVWQkxIZENRVUZKTEU5QlFVOHNVMEZCVUN4RFFVRnBRaXhMUVVGcVFpeERRVUYxUWl4UFFVRjJRaXhEUVVFclFpeFZRVUV2UWl4TFFVRTRReXhEUVVGRExFTkJRVzVFTEVWQlFYTkVPMEZCUTJ4RUxEaENRVUZMTEVsQlFVd3NRMEZCVlN4SFFVRldMRU5CUVdNc1UwRkJaQ3hGUVVGNVFpeFZRVUY2UWl4RlFVRnhReXhSUVVGeVF5eEZRVUVyUXl4VlFVRXZRenRCUVVOSU8wRkJRMG9zYVVKQldFUTdRVUZaU0R0QlFVTktPenM3YzBOQlJWazdRVUZCUVRzN1FVRkRWQ3huUWtGQlNTeFpRVUZoTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhaUVVGMlFpeERRVUZxUWp0QlFVTkJMR2RDUVVGSkxGbEJRV0VzU1VGQmFrSTdRVUZEUVN4blFrRkJTU3hYUVVGaExFbEJRV3BDTzBGQlEwRXNaMEpCUVVrc1lVRkJZU3hKUVVGcVFpeEZRVUZ6UWp0QlFVTnNRaXd3UWtGQlZTeG5Ra0ZCVml4RFFVRXlRaXhQUVVFelFpeEZRVUZ2UXl4VlFVRkRMRU5CUVVRc1JVRkJUenRCUVVOMlF5eHpRa0ZCUlN4alFVRkdPMEZCUTBFc2QwSkJRVXNzUlVGQlJTeE5RVUZHTEVsQlFWa3NSVUZCUlN4TlFVRkdMRU5CUVZNc1UwRkJWQ3hEUVVGdFFpeFJRVUZ1UWl4RFFVRTJRaXhSUVVFM1FpeERRVUZxUWl4RlFVRXlSRHRCUVVOMlJDeHZRMEZCV1N4RlFVRkZMRTFCUVdRN1FVRkRRU3h0UTBGQlZ5eFRRVUZUTEdOQlFWUXNRMEZCZDBJc1ZVRkJWU3haUVVGV0xFTkJRWFZDTEZOQlFYWkNMRU5CUVhoQ0xFVkJRVEpFTEUxQlFUTkVMRVZCUVZnN1FVRkRRU3dyUWtGQlN5eEpRVUZNTEVOQlFWVXNUVUZCVml4RFFVRnBRaXhWUVVGVkxGbEJRVllzUTBGQmRVSXNVMEZCZGtJc1EwRkJha0k3UVVGRFNEdEJRVU5LTEdsQ1FWQkVPMEZCVVVnN1FVRkRTanM3T3pzN08wRkJSMHdzVDBGQlR5eFBRVUZRTEVkQlFXbENMRmxCUVdwQ096czdPenM3TzBGRE0wTkJPenM3T3pzN096dEpRVVZOTEdNN1FVRkRSaXc0UWtGQllUdEJRVUZCT3p0QlFVTlVMR0ZCUVVzc1UwRkJUQ3hIUVVGdlFpeFRRVUZUTEdOQlFWUXNRMEZCZDBJc1RVRkJlRUlzUTBGQmNFSTdRVUZEUVN4aFFVRkxMRlZCUVV3c1IwRkJiMElzVTBGQlV5eGpRVUZVTEVOQlFYZENMRTlCUVhoQ0xFTkJRWEJDTzBGQlEwRXNZVUZCU3l4UlFVRk1MRWRCUVc5Q0xGTkJRVk1zWTBGQlZDeERRVUYzUWl4TFFVRjRRaXhEUVVGd1FqdEJRVU5CTEdGQlFVc3NWVUZCVEN4SFFVRnZRaXhUUVVGVExHTkJRVlFzUTBGQmQwSXNUMEZCZUVJc1EwRkJjRUk3UVVGRFFTeGhRVUZMTEZsQlFVd3NSMEZCYjBJc1NVRkJjRUk3UVVGRFFTeGhRVUZMTEZWQlFVd3NSMEZCYjBJc1EwRkJjRUk3UVVGRFNEczdPenMyUTBGRmJVSTdRVUZEYUVJc1owSkJRVWtzVTBGQlV5eFRRVUZUTEdkQ1FVRlVMRU5CUVRCQ0xHbENRVUV4UWl4RFFVRmlPMEZCUTBFc1owSkJRVWtzVVVGQlVTeERRVUZhT3p0QlFVVkJMR2xDUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1QwRkJUeXhOUVVFelFpeEZRVUZ0UXl4SFFVRnVReXhGUVVGM1F6dEJRVU53UXl4dlFrRkJTU3hQUVVGUExFTkJRVkFzUlVGQlZTeExRVUZXTEVOQlFXZENMRTFCUVdoQ0xFZEJRWGxDTEVOQlFUZENMRVZCUVdkRE8wRkJRelZDTzBGQlEwZzdRVUZEU2pzN1FVRkZSQ3huUWtGQlNTeFRRVUZUTEU5QlFVOHNUVUZCY0VJc1JVRkJORUk3UVVGRGVFSXNkVUpCUVU4c1NVRkJVRHRCUVVOSUxHRkJSa1FzVFVGRlN6dEJRVU5FTEhWQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS096czdlVU5CUldVN1FVRkRXaXhuUWtGQlRTeFpRVUZaTEhOSlFVRnNRanRCUVVOQkxHZENRVUZKTEZWQlFWVXNNa0pCUVdRN1FVRkRRU3huUWtGQlNTeExRVUZMTEZOQlFVd3NRMEZCWlN4TFFVRm1MRU5CUVhGQ0xFMUJRWEpDTEVkQlFUaENMRU5CUVd4RExFVkJRWEZETzBGQlEycERMSEZDUVVGTExGbEJRVXdzUjBGQmIwSXNkME5CUVhCQ08wRkJRMEVzZVVKQlFWTXNZMEZCVkN4RFFVRjNRaXhaUVVGNFFpeEZRVUZ6UXl4VFFVRjBReXhIUVVGclJDeExRVUZMTEZsQlFYWkVPMEZCUTBFc2NVSkJRVXNzVlVGQlREdEJRVU5JTEdGQlNrUXNUVUZKVHp0QlFVTklMSGxDUVVGVExHTkJRVlFzUTBGQmQwSXNXVUZCZUVJc1JVRkJjME1zVTBGQmRFTXNSMEZCYTBRc1JVRkJiRVE3UVVGRFNEdEJRVU5FTEdkQ1FVRkpMRkZCUVZFc1VVRkJVaXhEUVVGcFFpeExRVUZMTEZGQlFVd3NRMEZCWXl4TFFVRXZRaXhMUVVGNVF5eExRVUUzUXl4RlFVRnZSRHRCUVVOb1JDeHhRa0ZCU3l4WlFVRk1MRWRCUVc5Q0xIVkNRVUZ3UWp0QlFVTkJMSGxDUVVGVExHTkJRVlFzUTBGQmQwSXNWMEZCZUVJc1JVRkJjVU1zVTBGQmNrTXNSMEZCYVVRc1MwRkJTeXhaUVVGMFJEdEJRVU5CTEhGQ1FVRkxMRlZCUVV3N1FVRkRTQ3hoUVVwRUxFMUJTVTg3UVVGRFNDeDVRa0ZCVXl4alFVRlVMRU5CUVhkQ0xGZEJRWGhDTEVWQlFYRkRMRk5CUVhKRExFZEJRV2xFTEVWQlFXcEVPMEZCUTBnN1FVRkRSQ3huUWtGQlNTeERRVUZETEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhMUVVGb1FpeERRVUZ6UWl4TFFVRjBRaXhEUVVFMFFpeFRRVUUxUWl4RFFVRk1MRVZCUVRaRE8wRkJRM3BETEhGQ1FVRkxMRmxCUVV3c1IwRkJiMElzZVVKQlFYQkNPMEZCUTBFc2VVSkJRVk1zWTBGQlZDeERRVUYzUWl4aFFVRjRRaXhGUVVGMVF5eFRRVUYyUXl4SFFVRnRSQ3hMUVVGTExGbEJRWGhFTzBGQlEwRXNjVUpCUVVzc1ZVRkJURHRCUVVOSUxHRkJTa1FzVFVGSlR6dEJRVU5JTEhsQ1FVRlRMR05CUVZRc1EwRkJkMElzWVVGQmVFSXNSVUZCZFVNc1UwRkJka01zUjBGQmJVUXNSVUZCYmtRN1FVRkRTRHRCUVVORUxHZENRVUZKTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhMUVVGb1FpeEpRVUY1UWl4RlFVRTNRaXhGUVVGcFF6dEJRVU0zUWl4eFFrRkJTeXhaUVVGTUxFZEJRVzlDTERSQ1FVRndRanRCUVVOQkxIbENRVUZUTEdOQlFWUXNRMEZCZDBJc1lVRkJlRUlzUlVGQmRVTXNVMEZCZGtNc1IwRkJiVVFzUzBGQlN5eFpRVUY0UkR0QlFVTkJMSEZDUVVGTExGVkJRVXc3UVVGRFNDeGhRVXBFTEUxQlNVODdRVUZEU0N4NVFrRkJVeXhqUVVGVUxFTkJRWGRDTEdGQlFYaENMRVZCUVhWRExGTkJRWFpETEVkQlFXMUVMRVZCUVc1RU8wRkJRMGc3TzBGQlJVUXNaMEpCUVVrc1MwRkJTeXhWUVVGTUxFZEJRV3RDTEVOQlFYUkNMRVZCUVhsQ08wRkJRM0pDTEhWQ1FVRlBMRXRCUVZBN1FVRkRTQ3hoUVVaRUxFMUJSVTg3UVVGRFNDeDFRa0ZCVHl4SlFVRlFPMEZCUTBnN1FVRkRTanM3T3pzN08wRkJSMHdzVDBGQlR5eFBRVUZRTEVkQlFXbENMR05CUVdwQ096czdPenM3TzBGRGNrVkJPenM3TzBGQlEwRTdPenM3T3pzN08wbEJSMDBzWXp0QlFVTkdMRGhDUVVGaE8wRkJRVUU3TzBGQlExUXNZVUZCU3l4RlFVRk1PMEZCUTBFc1lVRkJTeXhKUVVGTU8wRkJRMEVzWVVGQlN5eExRVUZNTzBGQlEwRXNZVUZCU3l4SFFVRk1PMEZCUTBFc1lVRkJTeXhMUVVGTU8wRkJRMGc3T3pzN05FSkJSVWNzU1N4RlFVRk5MRXNzUlVGQlR5eEhMRVZCUVVzc1N5eEZRVUZOTzBGQlEzaENMR2RDUVVGSkxGVkJRVlVzUlVGQlpEdEJRVU5CTEdkQ1FVRkpMRlZCUVZVc1JVRkJaRHRCUVVOQkxHZENRVUZKTEV0QlFVc3NRMEZCVkR0QlFVTkJMR2RDUVVGSkxHbENRVUZwUWl3NFFrRkJja0k3TzBGQlIwRXNaMEpCUVVrc1lVRkJZU3hQUVVGaUxFTkJRWEZDTEU5QlFYSkNMRXRCUVdsRExFbEJRWEpETEVWQlFUQkRPMEZCUTNSRExEQkNRVUZWTEV0QlFVc3NTMEZCVEN4RFFVRlhMR0ZCUVdFc1QwRkJZaXhEUVVGeFFpeFBRVUZ5UWl4RFFVRllMRU5CUVZZN1FVRkRTRHRCUVVORUxHZENRVUZKTEdGQlFXRXNUMEZCWWl4RFFVRnhRaXhSUVVGeVFpeExRVUZyUXl4SlFVRjBReXhGUVVFMFF6dEJRVU40UXl4eFFrRkJTeXhUUVVGVExHRkJRV0VzVDBGQllpeERRVUZ4UWl4UlFVRnlRaXhEUVVGVUxFbEJRVEpETEVOQlFXaEVPMEZCUTBnN08wRkJSVVFzYVVKQlFVc3NSVUZCVEN4SFFVRmhMRWxCUVdJN1FVRkRRU3hwUWtGQlN5eEpRVUZNTEVkQlFXRXNTVUZCWWp0QlFVTkJMR2xDUVVGTExFdEJRVXdzUjBGQllTeExRVUZpTzBGQlEwRXNhVUpCUVVzc1IwRkJUQ3hIUVVGaExFZEJRV0k3UVVGRFFTeHBRa0ZCU3l4TFFVRk1MRWRCUVdFc1MwRkJZanM3UVVGRlFTeHpRa0ZCVlR0QlFVTk9MSE5DUVVGUkxFdEJRVXNzUlVGRVVEdEJRVVZPTEhkQ1FVRlRMRXRCUVVzc1NVRkdVanRCUVVkT0xIVkNRVUZUTEV0QlFVc3NSMEZJVWp0QlFVbE9MSGxDUVVGVExFdEJRVXNzUzBGS1VqdEJRVXRPTEhsQ1FVRlRMRXRCUVVzN1FVRk1VaXhoUVVGV096dEJRVkZCTEdkQ1FVRkpMR1ZCUVdVc1kwRkJaaXhGUVVGS0xFVkJRWEZETzBGQlEycERMSGRDUVVGUkxFbEJRVklzUTBGQllTeFBRVUZpTzBGQlEwRXNOa0pCUVdFc1QwRkJZaXhEUVVGeFFpeFBRVUZ5UWl4RlFVRTRRaXhMUVVGTExGTkJRVXdzUTBGQlpTeFBRVUZtTEVOQlFUbENPMEZCUTBFc05rSkJRV0VzVDBGQllpeERRVUZ4UWl4UlFVRnlRaXhGUVVFclFpeExRVUZMTEVWQlFYQkRPMEZCUTBnN1FVRkRTanM3T3pSQ1FVVkhMRlVzUlVGQlZ6dEJRVU5ZTEdkQ1FVRkpMRmRCUVZjc1JVRkJaanRCUVVOQkxHZENRVUZOTEZkQlFWY3NTMEZCU3l4TFFVRk1MRU5CUVZjc1lVRkJZU3hQUVVGaUxFTkJRWEZDTEU5QlFYSkNMRU5CUVZnc1EwRkJha0k3UVVGRFFTeG5Ra0ZCVFN4aFFVRmhMRk5CUVZNc1kwRkJWQ3hEUVVGM1FpeFhRVUY0UWl4RFFVRnVRanRCUVVOQkxHZENRVUZITEdOQlFXTXNTVUZCYWtJc1JVRkJjMEk3UVVGRGJFSXNNa0pCUVZjc1UwRkJXQ3hIUVVGMVFpeEZRVUYyUWpzN1FVRkZRU3g1UWtGQlV5eFBRVUZVTEVOQlFXbENMRlZCUVVNc1JVRkJSQ3hGUVVGUk8wRkJRM0pDTEhkQ1FVRkpMRmRCUVZjc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEVsQlFYWkNMRU5CUVdZN1FVRkRRU3cyUWtGQlV5eFRRVUZVTEVOQlFXMUNMRWRCUVc1Q0xFTkJRWFZDTEdkQ1FVRjJRanRCUVVOQkxEWkNRVUZUTEZsQlFWUXNRMEZCYzBJc1NVRkJkRUlzUlVGQk5FSXNSMEZCUnl4RlFVRXZRanRCUVVOUkxEQktRVU41UkN4SFFVRkhMRWxCUkRWRUxIZE9RVWt3UkN4SFFVRkhMRXRCU2pkRUxHMUhRVXQzUkN4SFFVRkhMRWRCVERORUxIRkhRVTB3UkN4SFFVRkhMRXRCVGpkRUxIVk5RVkVyUkN4SFFVRkhMRVZCVW14Rk8wRkJWVklzTmtKQlFWTXNVMEZCVkN4SFFVRnhRaXhSUVVGeVFqdEJRVU5CTEN0Q1FVRlhMRmRCUVZnc1EwRkJkVUlzVVVGQmRrSTdRVUZEU0N4cFFrRm9Ra1E3UVVGcFFrZzdRVUZEU2pzN08yZERRVVZOTEUwc1JVRkJUenRCUVVOV0xHZENRVUZOTEZkQlFWY3NTMEZCU3l4TFFVRk1MRU5CUVZjc1lVRkJZU3hQUVVGaUxFTkJRWEZDTEU5QlFYSkNMRU5CUVZnc1EwRkJha0k3UVVGRFFTeHBRa0ZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEZOQlFWTXNUVUZCTjBJc1JVRkJjVU1zUjBGQmNrTXNSVUZCTUVNN1FVRkRkRU1zYjBKQlFVY3NVMEZCVXl4TlFVRlVMRXRCUVc5Q0xGTkJRVk1zUTBGQlZDeEZRVUZaTEVWQlFXNURMRVZCUVhORE8wRkJRMnhETERaQ1FVRlRMRTFCUVZRc1EwRkJaMElzUTBGQmFFSXNSVUZCYlVJc1EwRkJia0k3UVVGRFNEdEJRVU5LTzBGQlEwUXNlVUpCUVdFc1QwRkJZaXhEUVVGeFFpeFBRVUZ5UWl4RlFVRTRRaXhMUVVGTExGTkJRVXdzUTBGQlpTeFJRVUZtTEVOQlFUbENPMEZCUTBnN096c3JRa0ZGU3l4RFFVVk1PenM3T3pzN1FVRkpUQ3hQUVVGUExFOUJRVkFzUjBGQmFVSXNZMEZCYWtJN096czdPenM3T3p0QlF6TkdRVHRCUVVOQk8wbEJRMDBzVnpzN096czdPenRwUTBGRFR5eEhMRVZCUVVrN1FVRkRWQ3huUWtGQlNTeE5RVUZOTEVOQlFWWTdRVUZEUVN4blFrRkJTU3hyUWtGQlNqczdRVUZGUVN4clFrRkJUU3hKUVVGSkxFOUJRVW9zUTBGQldTeEhRVUZhTEVWQlFXbENMRVZCUVdwQ0xFVkJRMFFzVDBGRVF5eERRVU5QTEVkQlJGQXNSVUZEV1N4RlFVUmFMRVZCUlVRc1QwRkdReXhEUVVWUExFZEJSbEFzUlVGRldTeEZRVVphTEVWQlIwUXNTVUZJUXl4RlFVRk9PenRCUVV0QkxHZENRVUZKTEZkQlFWY3NTVUZCWmp0QlFVTkJMR2xDUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1NVRkJTU3hOUVVGS0xFZEJRV0VzUTBGQmFrTXNSVUZCYjBNc1IwRkJjRU1zUlVGQmVVTTdRVUZEY2tNc2IwSkJRVWtzU1VGQlNTeERRVUZLTEV0QlFWVXNTVUZCU1N4SlFVRkpMRU5CUVZJc1EwRkJaQ3hGUVVOSkxGZEJRVmNzUzBGQldEdEJRVU5RTzBGQlEwUXNaMEpCUVVrc1VVRkJTaXhGUVVOSkxFOUJRVThzUzBGQlVEczdRVUZGU2l4cFFrRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4TFFVRkxMRU5CUVhKQ0xFVkJRWGRDTEVkQlFYaENPMEZCUTBrc2MwSkJRVTBzVFVGQlRTeFRRVUZUTEVsQlFVa3NVMEZCU2l4RFFVRmpMRWxCUVVrc1EwRkJiRUlzUlVGQmNVSXNRMEZCY2tJc1EwRkJWQ3hMUVVGeFF5eExRVUZMTEVOQlFURkRMRU5CUVZvN1FVRkVTaXhoUVVWQkxGbEJRV0VzVFVGQlRTeEZRVUZRTEVkQlFXRXNSVUZCZWtJN08wRkJSVUVzWjBKQlFVc3NZVUZCWVN4RlFVRmtMRWxCUVhOQ0xHRkJRV0VzUlVGQmRrTXNSVUZEU1N4WlFVRlpMRU5CUVZvN1FVRkRTaXhuUWtGQlNTeGhRVUZoTEZOQlFWTXNTVUZCU1N4VFFVRktMRU5CUVdNc1EwRkJaQ3hGUVVGcFFpeEZRVUZxUWl4RFFVRlVMRU5CUVdwQ0xFVkJRMGtzVDBGQlR5eExRVUZRT3p0QlFVVktMR3RDUVVGTkxFTkJRVTQ3UVVGRFFTeHBRa0ZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeExRVUZMTEVWQlFYSkNMRVZCUVhsQ0xFZEJRWHBDTzBGQlEwa3NjMEpCUVUwc1RVRkJUU3hUUVVGVExFbEJRVWtzVTBGQlNpeERRVUZqTEVsQlFVa3NRMEZCYkVJc1JVRkJjVUlzUTBGQmNrSXNRMEZCVkN4TFFVRnhReXhMUVVGTExFTkJRVEZETEVOQlFWbzdRVUZFU2l4aFFVTTRSQ3haUVVGaExFMUJRVTBzUlVGQlVDeEhRVUZoTEVWQlFYcENPenRCUVVVNVJDeG5Ra0ZCU3l4aFFVRmhMRVZCUVdRc1NVRkJjMElzWVVGQllTeEZRVUYyUXl4RlFVTkpMRmxCUVZrc1EwRkJXanRCUVVOS0xHZENRVUZKTEdGQlFXRXNVMEZCVXl4SlFVRkpMRk5CUVVvc1EwRkJZeXhGUVVGa0xFVkJRV3RDTEVWQlFXeENMRU5CUVZRc1EwRkJha0lzUlVGRFNTeFBRVUZQTEV0QlFWQTdPMEZCUlVvc2JVSkJRVThzU1VGQlVEdEJRVU5JT3pzN096czdRVUZIVEN4UFFVRlBMRTlCUVZBc1IwRkJhVUlzVjBGQmFrSTdPenM3TzBGRE1VTkJMRWxCUVUwc1YwRkJWeXhUUVVGWUxGRkJRVmNzUTBGQlF5eE5RVUZFTEVWQlFWTXNSMEZCVkN4RlFVRmpMRk5CUVdRc1JVRkJORUk3UVVGRGVrTXNVMEZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEVsQlFVa3NUVUZCZUVJc1JVRkJaME1zUjBGQmFFTXNSVUZCY1VNN1FVRkRha01zV1VGQlNTeExRVUZMTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhKUVVGSkxFTkJRVW9zUTBGQmRrSXNRMEZCVkR0QlFVTkJMRmRCUVVjc1dVRkJTQ3hEUVVGblFpeFBRVUZvUWl4RlFVRjVRaXhUUVVGNlFqdEJRVU5CTEZsQlFVY3NWVUZCVlN4SlFVRmlMRVZCUVd0Q08wRkJRMlFzYlVKQlFVOHNWMEZCVUN4RFFVRnRRaXhGUVVGdVFqdEJRVU5JTzBGQlExQTdRVUZEUkN4RFFWSkVPenRCUVZWQkxFOUJRVThzVDBGQlVDeEhRVUZwUWl4UlFVRnFRanM3T3pzN1FVTldRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenM3TzBGQlJVRXNVMEZCVXl4blFrRkJWQ3hEUVVFd1FpeHJRa0ZCTVVJc1JVRkJPRU1zV1VGQlRUdEJRVU5vUkR0QlFVTklMRU5CUmtRN08wRkJTVUVzU1VGQlRTeFBRVUZQTEZOQlFWQXNTVUZCVHl4SFFVRkxPMEZCUTJRc1VVRkJUU3hQUVVGUExEWkNRVUZpTzBGQlEwRXNVVUZCVFN4bFFVRmxMQ3RDUVVGeVFqdEJRVU5CTEZGQlFVMHNWMEZCVnl3NFFrRkJha0k3UVVGRFFTeFJRVUZOTEU5QlFVOHNPRUpCUVdJN08wRkJSVUVzVVVGQlNTeFRRVUZUTEZOQlFWTXNaMEpCUVZRc1EwRkJNRUlzYVVKQlFURkNMRU5CUVdJN1FVRkRRU3hSUVVGSkxGTkJRVk1zVTBGQlV5eGpRVUZVTEVOQlFYZENMRTFCUVhoQ0xFTkJRV0k3TzBGQlJVRXNVMEZCU3l4WFFVRk1PMEZCUTBFc2FVSkJRV0VzVjBGQllqdEJRVU5CTEdsQ1FVRmhMRmRCUVdJN08wRkJSMEVzVTBGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhKUVVGSkxFOUJRVThzVFVGQk0wSXNSVUZCYlVNc1IwRkJia01zUlVGQmQwTTdRVUZEY0VNc1pVRkJUeXhEUVVGUUxFVkJRVlVzWjBKQlFWWXNRMEZCTWtJc1RVRkJNMElzUlVGQmJVTXNXVUZCVFR0QlFVTnlReXhuUWtGQlNTeFRRVUZUTEd0Q1FVRlVMRVZCUVVvc1JVRkJiVU03UVVGREwwSXNkVUpCUVU4c1UwRkJVQ3hEUVVGcFFpeE5RVUZxUWl4RFFVRjNRaXhWUVVGNFFqdEJRVU5CTEc5Q1FVRkhMRk5CUVZNc1kwRkJWQ3hGUVVGSUxFVkJRVFpDTzBGQlEzcENMSGxDUVVGTExHbENRVUZNTzBGQlEwZzdRVUZEU2p0QlFVTktMRk5CVUVRN1FVRlJTRHRCUVVORUxGTkJRVXNzUjBGQlREdEJRVU5JTEVOQmVrSkVJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQmxLSFFzYml4eUtYdG1kVzVqZEdsdmJpQnpLRzhzZFNsN2FXWW9JVzViYjEwcGUybG1LQ0YwVzI5ZEtYdDJZWElnWVQxMGVYQmxiMllnY21WeGRXbHlaVDA5WENKbWRXNWpkR2x2Ymx3aUppWnlaWEYxYVhKbE8ybG1LQ0YxSmlaaEtYSmxkSFZ5YmlCaEtHOHNJVEFwTzJsbUtHa3BjbVYwZFhKdUlHa29ieXdoTUNrN2RtRnlJR1k5Ym1WM0lFVnljbTl5S0Z3aVEyRnVibTkwSUdacGJtUWdiVzlrZFd4bElDZGNJaXR2SzF3aUoxd2lLVHQwYUhKdmR5Qm1MbU52WkdVOVhDSk5UMFJWVEVWZlRrOVVYMFpQVlU1RVhDSXNabjEyWVhJZ2JEMXVXMjlkUFh0bGVIQnZjblJ6T250OWZUdDBXMjlkV3pCZExtTmhiR3dvYkM1bGVIQnZjblJ6TEdaMWJtTjBhVzl1S0dVcGUzWmhjaUJ1UFhSYmIxMWJNVjFiWlYwN2NtVjBkWEp1SUhNb2JqOXVPbVVwZlN4c0xHd3VaWGh3YjNKMGN5eGxMSFFzYml4eUtYMXlaWFIxY200Z2JsdHZYUzVsZUhCdmNuUnpmWFpoY2lCcFBYUjVjR1Z2WmlCeVpYRjFhWEpsUFQxY0ltWjFibU4wYVc5dVhDSW1KbkpsY1hWcGNtVTdabTl5S0haaGNpQnZQVEE3Ynp4eUxteGxibWQwYUR0dkt5c3BjeWh5VzI5ZEtUdHlaWFIxY200Z2MzMXlaWFIxY200Z1pYMHBLQ2tpTENKamJHRnpjeUJHYjNKdFEyOXVkSEp2Ykd4bGNudGNjbHh1SUNBZ0lHRnVhVzFoZEdWR2IzSnRLQ2w3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR1pwWld4a2N5QTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTV0WVhSbGNtbGhiQzFwYm5CMWRDY3BPMXh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdsdVpHVjRJRDBnTURzZ2FXNWtaWGdnUENCbWFXVnNaSE11YkdWdVozUm9PeUJwYm1SbGVDc3JLU0I3SUNBZ0lDQWdJQ0FnSUNBZ1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdacFpXeGtjMXRwYm1SbGVGMHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMmhoYm1kbEp5d2dLQ2s5UG50Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htYVdWc1pITmJhVzVrWlhoZExuWmhiSFZsSUNFOUlGd2lYQ0lwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVdWc1pITmJhVzVrWlhoZExtTnNZWE56VEdsemRDNWhaR1FvSjJoaGN5MTJZV3gxWlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXVnNaSE5iYVc1a1pYaGRMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9KMmhoY3kxMllXeDFaU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnBaV3hrYzF0cGJtUmxlRjB1ZG1Gc2RXVWdJVDBnWENKY0lpbDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVdWc1pITmJhVzVrWlhoZExtTnNZWE56VEdsemRDNWhaR1FvSjJoaGN5MTJZV3gxWlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVpXeHpaWHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacFpXeGtjMXRwYm1SbGVGMHVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25hR0Z6TFhaaGJIVmxKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnSUNCY2NseHVJQ0FnSUd4dllXUkNkWFIwYjI1QmJtbHRZWFJsS0NsN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUdKMWRIUnZiaUE5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2R6Wlc1a0p5azdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHeHZZV1JsY2lBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0Nkc2IyRmtaWEluS1R0Y2NseHVJQ0FnSUNBZ0lDQmlkWFIwYjI0dVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENBb1pTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JpZFhSMGIyNHVjMlYwUVhSMGNtbGlkWFJsS0NkMllXeDFaU2NzSUNjbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHOWhaR1Z5TG5OMGVXeGxMbVJwYzNCc1lYa2dQU0JjSW1Kc2IyTnJYQ0k3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5WMGRHOXVMbk5sZEVGMGRISnBZblYwWlNnbmRtRnNkV1VuTENBblEyRmtZWE4wY21GeUp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJGa1pYSXVjM1I1YkdVdVpHbHpjR3hoZVNBOUlGd2libTl1WlZ3aU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxDQXhOVEF3S1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDFjY2x4dWZWeHlYRzVjY2x4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCR2IzSnRRMjl1ZEhKdmJHeGxjanNpTENKcGJYQnZjblFnZFhObGNrTnZiblJ5YjJ4c1pYSWdabkp2YlNBbkxpOVZjMlZ5UTI5dWRISnZiR3hsY2k1cWN5YzdYSEpjYmx4eVhHNWNjbHh1WTJ4aGMzTWdSWFpsYm5SSVlXNWtiR1Z5ZTF4eVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tYdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuVnpaWElnUFNCdVpYY2dkWE5sY2tOdmJuUnliMnhzWlhJb0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JpZFhSMGIyNURiR2xqYXlncGUxeHlYRzRnSUNBZ0lDQWdJR3hsZENCaWRYUjBiMjRnSUQwZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjNObGJtUW5LVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9ZblYwZEc5dUlDRTlJRzUxYkd3cGUxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaWRYUjBiMjR1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0FvWlNrOVBuc2dJQ0FnSUNBZ0lDQWdJQ0JjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVXVjM1J2Y0ZCeWIzQmhaMkYwYVc5dUtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JtRnRaVVpwWld4a0lDQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZHVZVzFsSnlrdWRtRnNkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaVzFoYVd4R2FXVnNaQ0E5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2RsYldGcGJDY3BMblpoYkhWbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdOd1prWnBaV3hrSUNBZ1BTQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnblkzQm1KeWt1ZG1Gc2RXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NHaHZibVZHYVdWc1pDQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZHdhRzl1WlNjcExuWmhiSFZsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWW5WMGRHOXVMbU5zWVhOelRHbHpkQzUyWVd4MVpTNXBibVJsZUU5bUtDZGthWE5oWW14bFpDY3BJRDA5SUMweEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUxYzJWeUxuTmxkQ2h1WVcxbFJtbGxiR1FzSUdWdFlXbHNSbWxsYkdRc0lHTndaa1pwWld4a0xDQndhRzl1WlVacFpXeGtLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdSbGJHVjBaVU5zYVdOcktDbDdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHUmxiR1YwWlVKMGJpQWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3ViR2x6ZEMxMWMyVnlKeWs3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR04xY25KbGJuUkZiQ0FnUFNCdWRXeHNPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQnNhWE4wU1hSbGJTQWdJRDBnYm5Wc2JEdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1pHVnNaWFJsUW5SdUlDRTlJRzUxYkd3cGUxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1ZDZEc0dVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENBb1pTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NCbExuUmhjbWRsZENBbUppQmxMblJoY21kbGRDNWpiR0Z6YzB4cGMzUXVZMjl1ZEdGcGJuTW9JQ2RrWld4bGRHVW5JQ2tnS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVkRVZzSUQwZ1pTNTBZWEpuWlhRN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdsemRFbDBaVzBnUFNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2hqZFhKeVpXNTBSV3d1WjJWMFFYUjBjbWxpZFhSbEtDZGtZWFJoTFdsa0p5a3BMbkpsYlc5MlpTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZFhObGNpNWtaV3hsZEdVb1kzVnljbVZ1ZEVWc0xtZGxkRUYwZEhKcFluVjBaU2duWkdGMFlTMXBaQ2NwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNibjFjY2x4dVhISmNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdSWFpsYm5SSVlXNWtiR1Z5T3lJc0ltbHRjRzl5ZENCamNHWldZV3hwWkdGMFpTQm1jbTl0SUNjdUxpOW9aV3h3WlhJdlEzQm1WbUZzYVdSaGRHVXVhbk1uTzF4eVhHNWNjbHh1WTJ4aGMzTWdSbTl5YlVOdmJuUnliMnhzWlhKN1hISmNiaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3BlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVibUZ0WlVacFpXeGtJQ0FnSUQwZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjI1aGJXVW5LVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ0WVdsc1JtbGxiR1FnSUNBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0NkbGJXRnBiQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTNCbVJtbGxiR1FnSUNBZ0lEMGdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oyTndaaWNwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dodmJtVkdhV1ZzWkNBZ0lEMGdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0ozQm9iMjVsSnlrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1bGNuSnZjazFsYzNOaFoyVWdQU0J1ZFd4c08xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0pEYjNWdWRDQWdJRDBnTUR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjJZV3hwWkdGMFpVWnBiR3hHYVdWc1pITW9LWHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdhVzV3ZFhSeklEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25MbTFoZEdWeWFXRnNMV2x1Y0hWMEp5azdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHTnZkVzUwSUQwZ01EdGNjbHh1SUNBZ0lDQWdJQ0JjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHbHVjSFYwY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVc1d2RYUnpXMmxkTG5aaGJIVmxMbXhsYm1kMGFDQStJREFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZkVzUwS3lzN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ0lDQWdJQ0FnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNoamIzVnVkQ0E5UFNCcGJuQjFkSE11YkdWdVozUm9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lIMWxiSE5sZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhaaGJHbGtZWFJsUm1sbGJHUnpLQ2w3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYldGcGJGSmxaMlY0SUQwZ0wxNWJZUzE2UVMxYU1DMDVMaUVqSkNVbUp5b3JMejAvWGw5Z2UzeDlmaTFkSzBCYllTMTZRUzFhTUMwNVhTZy9PbHRoTFhwQkxWb3dMVGt0WFhzd0xEWXhmVnRoTFhwQkxWb3dMVGxkS1Q4b1B6cGNYQzViWVMxNlFTMWFNQzA1WFNnL09sdGhMWHBCTFZvd0xUa3RYWHN3TERZeGZWdGhMWHBCTFZvd0xUbGRLVDhwS2lRdk8xeHlYRzRnSUNBZ0lDQWdJR3hsZENCamNHWlVaWE4wSUQwZ2JtVjNJR053WmxaaGJHbGtZWFJsS0NrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVibUZ0WlVacFpXeGtMblpoYkhWbExteGxibWQwYUNBOElETXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGNuSnZjazFsYzNOaFoyVWdQU0JjSWtOaGJYQnZJR1JsZG1VZ1kyOXVkR1Z5SURNZ1kyRnlZV04wWlhKbGN5QnZkU0J0WVdselhDSTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0NkdVlXMWxMV1Z5Y205eUp5a3VhVzV1WlhKVVpYaDBJRDBnZEdocGN5NWxjbkp2Y2sxbGMzTmhaMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0pEYjNWdWRDc3JPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZHVZVzFsTFdWeWNtOXlKeWt1YVc1dVpYSlVaWGgwSUQwZ1hDSmNJanRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdhV1lnS0dOd1psUmxjM1F1ZG1Gc2FXUmhkR1VvZEdocGN5NWpjR1pHYVdWc1pDNTJZV3gxWlNrZ1BUMGdabUZzYzJVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNrMWxjM05oWjJVZ1BTQmNJa1Z6ZEdVZ1ExQkdJRzdEbzI4Z3c2a2dkc09oYkdsa2Ixd2lPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnblkzQm1MV1Z5Y205eUp5a3VhVzV1WlhKVVpYaDBJRDBnZEdocGN5NWxjbkp2Y2sxbGMzTmhaMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0pEYjNWdWRDc3JPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZGpjR1l0WlhKeWIzSW5LUzVwYm01bGNsUmxlSFFnUFNCY0lsd2lPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVaVzFoYVd4R2FXVnNaQzUyWVd4MVpTNXRZWFJqYUNodFlXbHNVbVZuWlhncEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlhKeWIzSk5aWE56WVdkbElEMGdYQ0pGYzNSbElFVnRZV2xzSUc3RG8yOGd3NmtnZHNPaGJHbGtiMXdpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDZ25aVzFoYVd3dFpYSnliM0luS1M1cGJtNWxjbFJsZUhRZ1BTQjBhR2x6TG1WeWNtOXlUV1Z6YzJGblpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNrTnZkVzUwS3lzN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjJWdFlXbHNMV1Z5Y205eUp5a3VhVzV1WlhKVVpYaDBJRDBnWENKY0lqdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNHaHZibVZHYVdWc1pDNTJZV3gxWlNBOVBTQmNJbHdpS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaWEp5YjNKTlpYTnpZV2RsSUQwZ1hDSkZjM1JsSUZSbGJHVm1iMjVsSUc3RG8yOGd3NmtnZHNPaGJHbGtiMXdpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDZ25jR2h2Ym1VdFpYSnliM0luS1M1cGJtNWxjbFJsZUhRZ1BTQjBhR2x6TG1WeWNtOXlUV1Z6YzJGblpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNrTnZkVzUwS3lzN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjNCb2IyNWxMV1Z5Y205eUp5a3VhVzV1WlhKVVpYaDBJRDBnWENKY0lqdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVZ5Y205eVEyOTFiblFnUGlBd0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYm4xY2NseHVYSEpjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnUm05eWJVTnZiblJ5YjJ4c1pYSTdJaXdpYVcxd2IzSjBJSFpoYkdsa1lYUnBiMjVEYjI1MGNtOXNiR1Z5SUdaeWIyMGdYQ0l1TDBadmNtMURiMjUwY205c2JHVnlMbXB6WENJN1hISmNibWx0Y0c5eWRDQmpjbVZoZEdWRmJDQm1jbTl0SUZ3aUxpNHZhR1ZzY0dWeUwwTnlaV0YwWlVWc1pXMWxiblF1YW5OY0lqdGNjbHh1WEhKY2JseHlYRzVqYkdGemN5QlZjMlZ5UTI5dWRISnZiR3hsY250Y2NseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDbDdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXBaRHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbTVoYldVN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJXRnBiRHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbU53Wmp0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5Cb2IyNWxPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhObGRDaHVZVzFsTENCbGJXRnBiQ3dnWTNCbUxDQndhRzl1WlNsN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUdGeWNsVnpaWElnUFNCYlhUdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2JtVjNWWE5sY2lBOUlIdDlPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQnBaQ0E5SURFN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUhaaGJHbGtZWFJsUm1sbGJHUnpJRDBnYm1WM0lIWmhiR2xrWVhScGIyNURiMjUwY205c2JHVnlLQ2s3WEhKY2JpQWdJQ0FnSUNBZ1hISmNiaUFnSUNBZ0lDQWdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHeHZZMkZzVTNSdmNtRm5aUzVuWlhSSmRHVnRLQ2QxYzJWeWN5Y3BJQ0U5SUc1MWJHd3BlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbkpWYzJWeUlEMGdTbE5QVGk1d1lYSnpaU2hzYjJOaGJGTjBiM0poWjJVdVoyVjBTWFJsYlNnbmRYTmxjbk1uS1NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHNiMk5oYkZOMGIzSmhaMlV1WjJWMFNYUmxiU2hjSW14aGMzUkpaRndpS1NBaFBTQnVkV3hzS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsa0lEMGdjR0Z5YzJWSmJuUW9iRzlqWVd4VGRHOXlZV2RsTG1kbGRFbDBaVzBvWENKc1lYTjBTV1JjSWlrcElDc2dNVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhV1FnSUNBZ1BTQnBaQ3NyTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Ym1GdFpTQWdQU0J1WVcxbE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXMWhhV3dnUFNCbGJXRnBiRHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbU53WmlBZ0lEMGdZM0JtTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dodmJtVWdQU0J3YUc5dVpUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2JtVjNWWE5sY2lBOUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSnBaRndpSUNBZ09uUm9hWE11YVdRc0lGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCY0ltNWhiV1ZjSWlBNklIUm9hWE11Ym1GdFpTd2dYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lZM0JtWENJZ0lEb2dkR2hwY3k1amNHWXNJRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbkJvYjI1bFhDSTZJSFJvYVhNdWNHaHZibVVzSUZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW1WdFlXbHNYQ0k2SUhSb2FYTXVaVzFoYVd3Z1hISmNiaUFnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0haaGJHbGtZWFJsUm1sbGJHUnpMblpoYkdsa1lYUmxSbWxsYkdSektDa3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZWEp5VlhObGNpNXdkWE5vS0c1bGQxVnpaWElwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzYjJOaGJGTjBiM0poWjJVdWMyVjBTWFJsYlNnbmRYTmxjbk1uTENCS1UwOU9Mbk4wY21sdVoybG1lU2hoY25KVmMyVnlLU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WTJGc1UzUnZjbUZuWlM1elpYUkpkR1Z0S0Nkc1lYTjBTV1FuTENCMGFHbHpMbWxrS1RzZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR2RsZENobWRXNWpSR1ZzWlhSbEtYdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2RHVnRjR3hoZEdVZ1BTQmNJbHdpTzF4eVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhWelpYSk1hWE4wSUQwZ1NsTlBUaTV3WVhKelpTaHNiMk5oYkZOMGIzSmhaMlV1WjJWMFNYUmxiU2duZFhObGNuTW5LU2s3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZFhObGNreHBjM1JGYkNBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0Nkc2FYTjBMWFZ6WlhJbktUdGNjbHh1SUNBZ0lDQWdJQ0JwWmloMWMyVnlUR2x6ZEVWc0lDRTlJRzUxYkd3cGUxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMWMyVnlUR2x6ZEVWc0xtbHVibVZ5U0ZSTlRDQTlJQ2NuTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RYTmxja3hwYzNRdVptOXlSV0ZqYUNnb1pXd3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzYVhOMFNYUmxiU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMnhwSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNhWE4wU1hSbGJTNWpiR0Z6YzB4cGMzUXVZV1JrS0Nkc2FYTjBMWFZ6WlhJdGFYUmxiU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHbHpkRWwwWlcwdWMyVjBRWFIwY21saWRYUmxLQ2RwWkNjc0lHVnNMbWxrS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVnRjR3hoZEdVZ1BTQmdQR1JwZGlCamJHRnpjejFjSW5WelpYSXRibUZ0WlMxamIyNTBaVzUwWENJK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGMzQmhiaUJqYkdGemN6MWNJbXhwYzNRdGRHVjRkRndpSUdsa1BWd2lkWE5sY2kxdVlXMWxYQ0krSkh0bGJDNXVZVzFsZlR3dmMzQmhiajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0oxYzJWeUxXWjFiR3d0WTI5dWRHVnVkRndpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOd1lXNGdZMnhoYzNNOVhDSnNhWE4wTFhSbGVIUmNJaUJwWkQxY0luVnpaWEl0WlcxaGFXeGNJajRrZTJWc0xtVnRZV2xzZlR3dmMzQmhiajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh6Y0dGdUlHTnNZWE56UFZ3aWJHbHpkQzEwWlhoMFhDSWdhV1E5WENKMWMyVnlMV053Wmx3aVBpUjdaV3d1WTNCbWZUd3ZjM0JoYmo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4emNHRnVJR05zWVhOelBWd2liR2x6ZEMxMFpYaDBYQ0lnYVdROVhDSjFjMlZ5TFhCb2IyNWxYQ0krSkh0bGJDNXdhRzl1WlgwOEwzTndZVzQrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WW5WMGRHOXVJSFI1Y0dVOVhDSmlkWFIwYjI1Y0lpQnBaRDFjSW1Wa2FYUmNJajVGWkdsMFlYSThMMkoxZEhSdmJqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGlkWFIwYjI0Z2RIbHdaVDFjSW1KMWRIUnZibHdpSUdOc1lYTnpQVndpWkdWc1pYUmxYQ0lnWkdGMFlTMXBaRDBrZTJWc0xtbGtmVDVFWld4bGRHRnlQQzlpZFhSMGIyNCtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbUE3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FYTjBTWFJsYlM1cGJtNWxja2hVVFV3Z1BTQjBaVzF3YkdGMFpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ6WlhKTWFYTjBSV3d1WVhCd1pXNWtRMmhwYkdRb2JHbHpkRWwwWlcwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0I5SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWkdWc1pYUmxLR2wwWlcxSlpDbDdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkWE5sY2t4cGMzUWdQU0JLVTA5T0xuQmhjbk5sS0d4dlkyRnNVM1J2Y21GblpTNW5aWFJKZEdWdEtDZDFjMlZ5Y3ljcEtUdGNjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhWelpYSk1hWE4wTG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1LSEJoY25ObFNXNTBLR2wwWlcxSlpDa2dQVDBnZFhObGNreHBjM1JiYVYwdWFXUXBlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObGNreHBjM1F1YzNCc2FXTmxLR2tzSURFcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlDQWdJQ0FnSUNBZ0lDQWdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHeHZZMkZzVTNSdmNtRm5aUzV6WlhSSmRHVnRLQ2QxYzJWeWN5Y3NJRXBUVDA0dWMzUnlhVzVuYVdaNUtIVnpaWEpNYVhOMEtTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWldScGRDZ3BlMXh5WEc1Y2NseHVJQ0FnSUgxY2NseHVYSEpjYm4xY2NseHVYSEpjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVlhObGNrTnZiblJ5YjJ4c1pYSTdJaXdpTHk4Z1EzSmxZWFJsWkNCaWVTQlViMjFsSUZacGJHVnNZVnh5WEc0dkx5QjBiMjFsTG5acGJHVnNZVUJuYldGcGJDNWpiMjFjY2x4dVkyeGhjM01nVm1Gc2FXUmhkR1ZEY0daN1hISmNiaUFnSUNCMllXeHBaR0YwWlNoamNHWXBlMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQnpkVzBnUFNBd08xeHlYRzRnSUNBZ0lDQWdJR3hsZENCeVpXMWhhVzVrWlhJN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdOd1ppQTlJR053Wmk1eVpYQnNZV05sS0NjdUp5d2dKeWNwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQ2N1Snl3Z0p5Y3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDNXlaWEJzWVdObEtDY3RKeXdnSnljcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUM1MGNtbHRLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR3hsZENCaGJHeEZjWFZoYkNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmpjR1l1YkdWdVozUm9JQzBnTVRzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamNHWmJhVjBnSVQwZ1kzQm1XMmtnS3lBeFhTbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZzYkVWeGRXRnNJRDBnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hoYkd4RmNYVmhiQ2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Uc2dhU0E4UFNBNU95QnBLeXNwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE4xYlNBOUlITjFiU0FySUhCaGNuTmxTVzUwS0dOd1ppNXpkV0p6ZEhKcGJtY29hU0F0SURFc0lHa3BLU0FxSUNneE1TQXRJR2twTzF4eVhHNGdJQ0FnSUNBZ0lISmxiV0ZwYm1SbGNpQTlJQ2h6ZFcwZ0tpQXhNQ2tnSlNBeE1UdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ2h5WlcxaGFXNWtaWElnUFQwZ01UQXBJSHg4SUNoeVpXMWhhVzVrWlhJZ1BUMGdNVEVwS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlcxaGFXNWtaWElnUFNBd08xeHlYRzRnSUNBZ0lDQWdJR2xtSUNoeVpXMWhhVzVrWlhJZ0lUMGdjR0Z5YzJWSmJuUW9ZM0JtTG5OMVluTjBjbWx1WnlnNUxDQXhNQ2twS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhOMWJTQTlJREE3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREU3SUdrZ1BEMGdNVEE3SUdrckt5bGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzVnRJRDBnYzNWdElDc2djR0Z5YzJWSmJuUW9ZM0JtTG5OMVluTjBjbWx1WnlocElDMGdNU3dnYVNrcElDb2dLREV5SUMwZ2FTazdJSEpsYldGcGJtUmxjaUE5SUNoemRXMGdLaUF4TUNrZ0pTQXhNVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0NoeVpXMWhhVzVrWlhJZ1BUMGdNVEFwSUh4OElDaHlaVzFoYVc1a1pYSWdQVDBnTVRFcEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXMWhhVzVrWlhJZ1BTQXdPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaVzFoYVc1a1pYSWdJVDBnY0dGeWMyVkpiblFvWTNCbUxuTjFZbk4wY21sdVp5Z3hNQ3dnTVRFcEtTbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjY2x4dUlDQWdJSDFjY2x4dWZWeHlYRzVjY2x4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCV1lXeHBaR0YwWlVOd1pqdGNjbHh1WEhKY2JpSXNJbU52Ym5OMElHTnlaV0YwWlVWc0lEMGdLSEJoY21WdWRDd2dZWEp5TENCamJHRnpjMDVoYldVcElEMCtJSHRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWVhKeUxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1ZzSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2hoY25KYmFWMHBPMXh5WEc0Z0lDQWdJQ0FnSUdWc0xuTmxkRUYwZEhKcFluVjBaU2duWTJ4aGMzTW5MQ0JqYkdGemMwNWhiV1VwTzF4eVhHNGdJQ0FnSUNBZ0lHbG1LSEJoY21WdWRDQWhQU0J1ZFd4c0tYdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NHRnlaVzUwTG1Gd2NHVnVaRU5vYVd4a0tHVnNLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHgwZlZ4eVhHNTlYSEpjYmx4eVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHTnlaV0YwWlVWc095SXNJbWx0Y0c5eWRDQjFjMlZ5UTI5dWRISnZiR3hsY2lCbWNtOXRJRndpTGk5amIyNTBjbTlzYkdWeUwxVnpaWEpEYjI1MGNtOXNiR1Z5TG1welhDSmNjbHh1YVcxd2IzSjBJR1YyWlc1MFEyOXVkSEp2Ykd4bGNpQm1jbTl0SUZ3aUxpOWpiMjUwY205c2JHVnlMMFYyWlc1MFEyOXVkSEp2Ykd4bGNpNXFjMXdpWEhKY2JtbHRjRzl5ZENCbWIzSnRRMjl1ZEhKdmJHeGxjaUJtY205dElGd2lMaTlqYjI1MGNtOXNiR1Z5TDBadmNtMURiMjUwY205c2JHVnlMbXB6WENKY2NseHVhVzF3YjNKMElHWnZjbTFCYm1sdFlYUnBiMjRnWm5KdmJTQmNJaTR2WTI5dGNHOXVaVzUwY3k5R2IzSnRRVzVwYldGMGFXOXVMbXB6WENKY2NseHVYSEpjYm1SdlkzVnRaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWENKRVQwMURiMjUwWlc1MFRHOWhaR1ZrWENJc0lDZ3BJRDArSUh0Y2NseHVJQ0FnSUdsdWFYUW9LVHRjY2x4dWZTazdYSEpjYmx4eVhHNWpiMjV6ZENCcGJtbDBJRDBnS0NrZ1BUNTdYSEpjYmlBZ0lDQmpiMjV6ZENCbWIzSnRJRDBnYm1WM0lHWnZjbTFCYm1sdFlYUnBiMjRvS1R0Y2NseHVJQ0FnSUdOdmJuTjBJR1YyWlc1MFNHRnVaR3hsY2lBOUlHNWxkeUJsZG1WdWRFTnZiblJ5YjJ4c1pYSW9LVHRjY2x4dUlDQWdJR052Ym5OMElHWnZjbTFHYVd4c0lEMGdibVYzSUdadmNtMURiMjUwY205c2JHVnlLQ2s3WEhKY2JpQWdJQ0JqYjI1emRDQjFjMlZ5SUQwZ2JtVjNJSFZ6WlhKRGIyNTBjbTlzYkdWeUtDazdYSEpjYmlBZ0lDQmNjbHh1SUNBZ0lHeGxkQ0JwYm5CMWRITWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLQ2N1YldGMFpYSnBZV3d0YVc1d2RYUW5LVHRjY2x4dUlDQWdJR3hsZENCaWRYUjBiMjRnUFNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duYzJWdVpDY3BPMXh5WEc0Z0lDQWdYSEpjYmlBZ0lDQm1iM0p0TG1GdWFXMWhkR1ZHYjNKdEtDazdJQ0FnSUNBZ0lDQWdJRnh5WEc0Z0lDQWdaWFpsYm5SSVlXNWtiR1Z5TG1KMWRIUnZia05zYVdOcktDazdJRnh5WEc0Z0lDQWdaWFpsYm5SSVlXNWtiR1Z5TG1SbGJHVjBaVU5zYVdOcktDazdJRnh5WEc0Z0lDQWdYSEpjYmlBZ0lDQmNjbHh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dhVzV3ZFhSekxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXNXdkWFJ6VzJsZExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSmliSFZ5WENJc0lDZ3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnZjbTFHYVd4c0xuWmhiR2xrWVhSbFJtbHNiRVpwWld4a2N5Z3BLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWRYUjBiMjR1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2duWkdsellXSnNaV1FuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1LR1p2Y20xR2FXeHNMblpoYkdsa1lYUmxSbWxsYkdSektDa3BlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjbTB1Ykc5aFpFSjFkSFJ2YmtGdWFXMWhkR1VvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmNjbHh1SUNBZ0lDQWdJQ0I5S1Z4eVhHNGdJQ0FnZlNBZ0lDQmNjbHh1SUNBZ0lIVnpaWEl1WjJWMEtDazdYSEpjYm4waVhYMD0ifQ==
