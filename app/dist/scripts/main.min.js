(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormController = function () {
    function FormController() {
        _classCallCheck(this, FormController);
    }

    _createClass(FormController, [{
        key: 'animateForm',
        value: function animateForm() {
            var fields = document.querySelectorAll('.material-input');

            var _loop = function _loop(index) {
                fields[index].addEventListener('change', function () {
                    if (fields[index].value != "") {
                        fields[index].classList.add('has-value');
                    } else {
                        fields[index].classList.remove('has-value');
                    }
                });

                if (fields[index].value != "") {
                    fields[index].classList.add('has-value');
                } else {
                    fields[index].classList.remove('has-value');
                }
            };

            for (var index = 0; index < fields.length; index++) {
                _loop(index);
            }
        }
    }, {
        key: 'loadButtonAnimate',
        value: function loadButtonAnimate() {
            var urlParam = window.location;
            var parameter = urlParam.search.substring(1);
            var button = null;
            if (parameter == "") {
                button = document.getElementById('send');
            } else {
                button = document.getElementById('alter');
            }
            var loader = document.getElementById('loader');
            var value = button.getAttribute('value');
            button.addEventListener('click', function (e) {
                button.setAttribute('value', '');
                loader.style.display = "block";
                setTimeout(function () {
                    button.setAttribute('value', value);
                    loader.style.display = "none";
                    window.location.href = "/listuser.html";
                }, 1500);
            });
        }
    }]);

    return FormController;
}();

module.exports = FormController;

},{}],2:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UserController = require('./UserController.js');

var _UserController2 = _interopRequireDefault(_UserController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventHandler = function () {
    function EventHandler() {
        _classCallCheck(this, EventHandler);

        this.user = new _UserController2.default();
        this.nameField = document.getElementById('name');
        this.emailField = document.getElementById('email');
        this.cpfField = document.getElementById('cpf');
        this.phoneField = document.getElementById('phone');
    }

    _createClass(EventHandler, [{
        key: 'buttonClick',
        value: function buttonClick() {
            var _this = this;

            var urlParam = window.location;
            var parameter = urlParam.search.substring(1);
            var button = document.getElementById('send');
            if (button != null && parameter == "") {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    if (button.classList.value.indexOf('disabled') == -1) {
                        _this.user.set(_this.nameField.value, _this.emailField.value, _this.cpfField.value, _this.phoneField.value);
                    }
                });
            }
        }
    }, {
        key: 'deleteClick',
        value: function deleteClick() {
            var _this2 = this;

            var deleteBtn = document.querySelector('.list-user');
            var currentEl = null;
            var listItem = null;
            if (deleteBtn != null) {
                deleteBtn.addEventListener('click', function (e) {
                    e.preventDefault();
                    if (e.target && e.target.classList.contains('delete')) {
                        currentEl = e.target;
                        listItem = document.getElementById(currentEl.getAttribute('data-id')).remove();
                        _this2.user.delete(currentEl.getAttribute('data-id'));
                    }
                });
            }
        }
    }, {
        key: 'editClick',
        value: function editClick() {
            var editBtn = document.querySelector('.list-user');
            var currentEl = null;

            if (editBtn != null) {
                editBtn.addEventListener('click', function (e) {
                    e.preventDefault();
                    if (e.target && e.target.classList.contains('edit')) {
                        currentEl = e.target;
                        document.location.href = '/?editUser=' + currentEl.getAttribute('data-id');
                    }
                });
            }
        }
    }, {
        key: 'alterClick',
        value: function alterClick() {
            var _this3 = this;

            var saveBtn = document.querySelector('form');
            var urlParam = window.location;
            var parameter = urlParam.search.substring(1);
            var id = parameter.split('=');

            if (saveBtn != null) {
                saveBtn.addEventListener('click', function (e) {
                    e.preventDefault();
                    if (e.target && e.target.classList.contains('alter')) {
                        _this3.user.edit(id[1], _this3.nameField.value, _this3.emailField.value, _this3.cpfField.value, _this3.phoneField.value);
                    }
                });
            }
        }
    }, {
        key: 'maskInputs',
        value: function maskInputs() {
            var cpfField = document.getElementById('cpf');
            var phoneField = document.getElementById('phone');

            if (phoneField != null && cpfField != null) {
                phoneField.addEventListener('keypress', function (e) {
                    switch (phoneField.value.length) {
                        case 1:
                            phoneField.value = "(" + phoneField.value;
                            break;
                        case 3:
                            phoneField.value = phoneField.value + ") ";
                            break;
                        case 9:
                            phoneField.value = phoneField.value + "-";
                            break;
                        case 14:
                            phoneField.value = phoneField.value.substring(0, 9) + phoneField.value.charAt(10) + '-' + phoneField.value.substring(11);
                            break;
                    }
                });

                cpfField.addEventListener('keypress', function (e) {
                    switch (cpfField.value.length) {
                        case 3:
                            cpfField.value = cpfField.value + ".";
                            break;
                        case 7:
                            cpfField.value = cpfField.value + ".";
                            break;
                        case 11:
                            cpfField.value = cpfField.value + "-";
                            break;
                        default:
                            break;
                    }
                });
            }
        }
    }]);

    return EventHandler;
}();

module.exports = EventHandler;

},{"./UserController.js":4}],3:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _CpfValidate = require('../helper/CpfValidate.js');

var _CpfValidate2 = _interopRequireDefault(_CpfValidate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormController = function () {
    function FormController() {
        _classCallCheck(this, FormController);

        this.nameField = document.getElementById('name');
        this.emailField = document.getElementById('email');
        this.cpfField = document.getElementById('cpf');
        this.phoneField = document.getElementById('phone');
        this.errorMessage = null;
        this.errorCount = 0;
    }

    _createClass(FormController, [{
        key: 'validateFillFields',
        value: function validateFillFields() {
            var inputs = document.querySelectorAll('.material-input');
            var count = 0;

            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].value.length > 0) {
                    count++;
                }
            }

            if (count == inputs.length) {
                return true;
            } else {
                return false;
            }
        }
    }, {
        key: 'validateFields',
        value: function validateFields() {
            var mailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
            var cpfTest = new _CpfValidate2.default();
            if (this.nameField.value.length < 3) {
                this.errorMessage = "Campo deve conter 3 caracteres ou mais";
                document.getElementById('name-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                this.errorCount--;
                document.getElementById('name-error').innerText = "";
            }
            if (cpfTest.validate(this.cpfField.value) == false) {
                this.errorMessage = "Este CPF não é válido";
                document.getElementById('cpf-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                this.errorCount--;
                document.getElementById('cpf-error').innerText = "";
            }
            if (!this.emailField.value.match(mailRegex)) {
                this.errorMessage = "Este Email não é válido";
                document.getElementById('email-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                this.errorCount--;
                document.getElementById('email-error').innerText = "";
            }
            if (this.phoneField.value == "") {
                this.errorMessage = "Este Telefone não é válido";
                document.getElementById('phone-error').innerText = this.errorMessage;
                this.errorCount++;
            } else {
                this.errorCount--;
                document.getElementById('phone-error').innerText = "";
            }

            if (this.errorCount > 0) {
                return false;
            } else {
                return true;
            }
        }
    }, {
        key: 'editForm',
        value: function editForm() {
            var urlParam = window.location;
            var parameter = urlParam.search.substring(1);
            var id = null;
            var button = document.getElementById('send');
            if (parameter != "") {
                var userList = JSON.parse(localStorage.getItem('users'));
                id = parameter.split('=');

                for (var i = 0; i < userList.length; i++) {
                    if (parseInt(id[1]) == userList[i].id) {
                        this.nameField.value = userList[i].name;
                        this.emailField.value = userList[i].email;
                        this.cpfField.value = userList[i].cpf;
                        this.phoneField.value = userList[i].phone;

                        this.nameField.classList.add('has-value');
                        this.emailField.classList.add('has-value');
                        this.cpfField.classList.add('has-value');
                        this.phoneField.classList.add('has-value');

                        button.setAttribute("value", "Alterar");
                        button.classList.add('alter');
                        button.setAttribute('id', 'alter');
                    }
                }
            }
        }
    }]);

    return FormController;
}();

module.exports = FormController;

},{"../helper/CpfValidate.js":5}],4:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FormController = require('./FormController.js');

var _FormController2 = _interopRequireDefault(_FormController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UserController = function () {
    function UserController() {
        _classCallCheck(this, UserController);

        this.id;
        this.name;
        this.email;
        this.cpf;
        this.phone;
    }

    _createClass(UserController, [{
        key: 'set',
        value: function set(name, email, cpf, phone) {
            var arrUser = [];
            var newUser = {};
            var id = 1;
            var validateFields = new _FormController2.default();

            if (localStorage.getItem('users') != null) {
                arrUser = JSON.parse(localStorage.getItem('users'));
            }
            if (localStorage.getItem("lastId") != null) {
                id = parseInt(localStorage.getItem("lastId")) + 1;
            }

            this.id = id++;
            this.name = name;
            this.email = email;
            this.cpf = cpf;
            this.phone = phone;

            newUser = {
                "id": this.id,
                "name": this.name,
                "cpf": this.cpf,
                "phone": this.phone,
                "email": this.email
            };

            if (validateFields.validateFields()) {
                arrUser.push(newUser);
                localStorage.setItem('users', JSON.stringify(arrUser));
                localStorage.setItem('lastId', this.id);
            }
        }
    }, {
        key: 'get',
        value: function get() {
            var template = "";
            var userList = JSON.parse(localStorage.getItem('users'));
            var tempUserList = JSON.parse(localStorage.getItem('tempUsers'));
            var userListEl = document.getElementById('list-user');
            if (userListEl != null && userList != null) {
                userListEl.innerHTML = '';

                userList.forEach(function (el) {
                    var listItem = document.createElement('li');
                    listItem.classList.add('list-user-item');
                    listItem.setAttribute('id', el.id);
                    template = '<div class="user-name-content">\n                                        <span class="list-text" id="user-name">' + el.name + ' - ' + el.cpf + '</span>\n                                    </div>\n                                    <div class="user-full-content">\n                                        <div class="user-info">\n                                            <span class="list-text" id="user-email"><strong>Email:</strong> ' + el.email + '</span>\n                                            <span class="list-text" id="user-phone"><strong>Tel:</strong> ' + el.phone + '</span>\n                                        </div>\n                                        <div class="user-action">\n                                            <button type="button" class="action-btn edit icon-pencil" data-id=' + el.id + ' id="edit"></button>\n                                            <button type="button" class="action-btn delete icon-cancel-circle" data-id=' + el.id + '></button>\n                                        </div>\n                                    </div>';
                    listItem.innerHTML = template;
                    userListEl.appendChild(listItem);
                });
            }
            if (userListEl != null && tempUserList != null && userList != null) {
                if (userList == null || userList.length == 0) {
                    userListEl.innerHTML = '';
                    tempUserList.forEach(function (el) {
                        var listItem = document.createElement('li');
                        listItem.classList.add('list-user-item');
                        listItem.setAttribute('id', el.id);
                        template = '<div class="user-name-content">\n                                            <span class="list-text" id="user-name">' + el.name + ' - ' + el.cpf + '</span>\n                                        </div>\n                                        <div class="user-full-content">\n                                            <span class="list-text" id="user-email">Email: ' + el.email + '</span>\n                                            <span class="list-text" id="user-phone">Tel: ' + el.phone + '</span>\n                                        </div>';
                        listItem.innerHTML = template;
                        userListEl.appendChild(listItem);
                    });
                }
            }
        }
    }, {
        key: 'promiseGet',
        value: function promiseGet() {
            var userList = JSON.parse(localStorage.getItem('users'));
            var url = "https://private-21e8de-rafaellucio.apiary-mock.com/users";

            if (userList == null) {
                fetch(url, { headers: { "Content-Type": "application/json; charset=utf-8" } }).then(function (res) {
                    return res.json();
                }).then(function (response) {
                    localStorage.setItem('tempUsers', JSON.stringify(response));
                }).catch(function (err) {
                    console.log("sorry, there are no results for your search");
                });
            }
        }
    }, {
        key: 'delete',
        value: function _delete(itemId) {
            var userList = JSON.parse(localStorage.getItem('users'));
            for (var i = 0; i < userList.length; i++) {
                if (parseInt(itemId) == userList[i].id) {
                    userList.splice(i, 1);
                }
            }
            localStorage.setItem('users', JSON.stringify(userList));
        }
    }, {
        key: 'edit',
        value: function edit(itemId, name, email, cpf, phone) {
            var userList = JSON.parse(localStorage.getItem('users'));
            for (var i = 0; i < userList.length; i++) {
                if (parseInt(itemId) == userList[i].id) {
                    userList[i] = {
                        "id": userList[i].id,
                        "name": name,
                        "cpf": cpf,
                        "phone": phone,
                        "email": email
                    };
                }
            }

            localStorage.setItem('users', JSON.stringify(userList));
        }
    }]);

    return UserController;
}();

module.exports = UserController;

},{"./FormController.js":3}],5:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Created by Tome Vilela
// tome.vilela@gmail.com
var ValidateCpf = function () {
    function ValidateCpf() {
        _classCallCheck(this, ValidateCpf);
    }

    _createClass(ValidateCpf, [{
        key: 'validate',
        value: function validate(cpf) {
            var sum = 0;
            var remainder = void 0;

            cpf = cpf.replace('.', '').replace('.', '').replace('-', '').trim();

            var allEqual = true;
            for (var i = 0; i < cpf.length - 1; i++) {
                if (cpf[i] != cpf[i + 1]) allEqual = false;
            }
            if (allEqual) return false;

            for (var i = 1; i <= 9; i++) {
                sum = sum + parseInt(cpf.substring(i - 1, i)) * (11 - i);
            }remainder = sum * 10 % 11;

            if (remainder == 10 || remainder == 11) remainder = 0;
            if (remainder != parseInt(cpf.substring(9, 10))) return false;

            sum = 0;
            for (var i = 1; i <= 10; i++) {
                sum = sum + parseInt(cpf.substring(i - 1, i)) * (12 - i);
            }remainder = sum * 10 % 11;

            if (remainder == 10 || remainder == 11) remainder = 0;
            if (remainder != parseInt(cpf.substring(10, 11))) return false;

            return true;
        }
    }]);

    return ValidateCpf;
}();

module.exports = ValidateCpf;

},{}],6:[function(require,module,exports){
"use strict";

var _UserController = require("./controller/UserController.js");

var _UserController2 = _interopRequireDefault(_UserController);

var _EventController = require("./controller/EventController.js");

var _EventController2 = _interopRequireDefault(_EventController);

var _FormController = require("./controller/FormController.js");

var _FormController2 = _interopRequireDefault(_FormController);

var _FormAnimation = require("./components/FormAnimation.js");

var _FormAnimation2 = _interopRequireDefault(_FormAnimation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

document.addEventListener("DOMContentLoaded", function () {
    init();
});

var init = function init() {
    var form = new _FormAnimation2.default();
    var eventHandler = new _EventController2.default();
    var formFill = new _FormController2.default();
    var user = new _UserController2.default();

    var urlParam = window.location;
    var parameter = urlParam.search.substring(1);

    var inputs = document.querySelectorAll('.material-input');
    var button = document.getElementById('send');

    form.animateForm();
    eventHandler.deleteClick();
    eventHandler.editClick();
    eventHandler.buttonClick();
    eventHandler.alterClick();
    eventHandler.maskInputs();
    formFill.editForm();

    for (var i = 0; i < inputs.length; i++) {
        inputs[i].addEventListener("blur", function () {
            if (formFill.validateFillFields()) {
                button.classList.remove('disabled');
                if (formFill.validateFields()) {
                    form.loadButtonAnimate();
                }
            }
        });
        if (formFill.validateFillFields()) {
            button.classList.remove('disabled');
            if (formFill.validateFields()) {
                form.loadButtonAnimate();
            }
        }
    }

    user.get();
    user.promiseGet();
};

},{"./components/FormAnimation.js":1,"./controller/EventController.js":2,"./controller/FormController.js":3,"./controller/UserController.js":4}]},{},[6])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
